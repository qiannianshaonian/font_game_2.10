{
  "code": "import AppConfig from \"../../AppConfig\";\r\nimport ModelBase from \"./ModelBase\";\r\nimport { ResMgr } from \"../../ResMgr\";\r\nimport URI from \"../../URI\";\r\nexport default class MapFontInfo extends ModelBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._quality = 1;\r\n    }\r\n    static getGroup(font) {\r\n        if (MapFontInfo._groupCache[font] == null) {\r\n            let arr = [];\r\n            for (let i = 0; i < MapFontInfo.DataSource[\"group\"].length; i++) {\r\n                let tempGroup = MapFontInfo.DataSource[\"group\"][i];\r\n                if (tempGroup.indexOf(font) != -1) {\r\n                    arr.push(tempGroup);\r\n                }\r\n            }\r\n            for (let i = 0; i < MapFontInfo.DataSource[\"bank\"].length; i++) {\r\n                let tempGroup = MapFontInfo.DataSource[\"bank\"][i];\r\n                if (tempGroup.indexOf(font) != -1) {\r\n                    arr.push(tempGroup);\r\n                }\r\n            }\r\n            MapFontInfo._groupCache[font] = arr;\r\n        }\r\n        return MapFontInfo._groupCache[font];\r\n    }\r\n    get quality() {\r\n        return this._quality;\r\n    }\r\n    set quality(value) {\r\n        if (value > 4) {\r\n            value = 4;\r\n        }\r\n        this._quality = value;\r\n    }\r\n    static create(data) {\r\n        if (AppConfig.pools['MapFontInfo'] == null) {\r\n            AppConfig.pools['MapFontInfo'] = { sign: 'MapFontInfo', pool: MapFontInfo._pool, createCount: 0, recoverCount: 0 };\r\n        }\r\n        AppConfig.pools['MapFontInfo'].createCount++;\r\n        let cout;\r\n        if (MapFontInfo._pool.length > 0) {\r\n            cout = MapFontInfo._pool.pop();\r\n            cout.isRecover = false;\r\n        }\r\n        else {\r\n            cout = new MapFontInfo();\r\n        }\r\n        if (data != null)\r\n            cout.setDataByKey(data);\r\n        return cout;\r\n    }\r\n    get canHeChengGroup() {\r\n        if (MapFontInfo._heChengCiZuObj[this.text] == null) {\r\n            let cout = [];\r\n            MapFontInfo.DataSource[\"group\"].forEach(element => {\r\n                if (element.indexOf(this.text) != -1) {\r\n                    cout.push(element);\r\n                }\r\n            });\r\n            MapFontInfo.DataSource[\"bank\"].forEach(element => {\r\n                if (element.indexOf(this.text) != -1) {\r\n                    cout.push(element);\r\n                }\r\n            });\r\n            MapFontInfo._heChengCiZuObj[this.text] = cout;\r\n        }\r\n        return MapFontInfo._heChengCiZuObj[this.text].length > 0;\r\n    }\r\n    get canHeChengGroups() {\r\n        if (this.canHeChengGroup) {\r\n            return MapFontInfo._heChengCiZuObj[this.text];\r\n        }\r\n        return [];\r\n    }\r\n    getStructInfos(fontId = null, isExceptSelf = true) {\r\n        let cout = [];\r\n        if (fontId == this.id && isExceptSelf == false) {\r\n            cout.push(fontId.toString());\r\n        }\r\n        else {\r\n            this.structInfo.split(\",\").forEach(element => {\r\n                if (fontId == null) {\r\n                    if (element == this.id.toString()) {\r\n                        return;\r\n                    }\r\n                    cout.push(element);\r\n                }\r\n                else {\r\n                    if (isExceptSelf && element == fontId.toString()) {\r\n                        return;\r\n                    }\r\n                    if (element.split(\"_\").indexOf(fontId.toString()) != -1) {\r\n                        cout.push(element);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return cout;\r\n    }\r\n    get canHeChengFont() {\r\n        if (MapFontInfo._heChengHanZiObj[this.text] == null) {\r\n            let cout = [];\r\n            MapFontInfo.DataSource[\"font\"].forEach(element => {\r\n                let fontInfo = MapFontInfo.create();\r\n                fontInfo.setDataByValueArr(element);\r\n                let structInfos = fontInfo.getStructInfos(this.id);\r\n                if (structInfos.length > 0) {\r\n                    cout.push(fontInfo);\r\n                }\r\n            });\r\n            MapFontInfo._heChengHanZiObj[this.text] = cout;\r\n        }\r\n        return MapFontInfo._heChengHanZiObj[this.text].length > 0;\r\n    }\r\n    get canHeChengFontInfos() {\r\n        if (this.canHeChengFont) {\r\n            return MapFontInfo._heChengHanZiObj[this.text];\r\n        }\r\n        return [];\r\n    }\r\n    getStuntFontEffect() {\r\n        if (!this.isStuntFont) {\r\n            return null;\r\n        }\r\n        if (this._stuntFontEffect == null) {\r\n            this._stuntFontEffect = ResMgr.Instance().createSpine(URI.spineUrl + \"other_wupinghuanrao_kin_little.sk\", \"animation\", true);\r\n            this._stuntFontEffect.x = this._stuntFontEffect.y = 44;\r\n            this._stuntFontEffect.scaleX = this._stuntFontEffect.scaleY = 1.3;\r\n        }\r\n        return this._stuntFontEffect;\r\n    }\r\n    destroyStuntEffect() {\r\n        if (this._stuntFontEffect) {\r\n            this._stuntFontEffect.destroy(true);\r\n            this._stuntFontEffect = null;\r\n        }\r\n    }\r\n    getStruct() {\r\n        return MapFontInfo.DataSource[\"font_struct\"];\r\n    }\r\n    recover() {\r\n        if (this.isRecover) {\r\n            return;\r\n        }\r\n        if (this._stuntFontEffect) {\r\n            this._stuntFontEffect.destroy(true);\r\n        }\r\n        this._stuntFontEffect = null;\r\n        if (AppConfig.pools['MapFontInfo'] == null) {\r\n            AppConfig.pools['MapFontInfo'] = { sign: 'MapFontInfo', pool: MapFontInfo._pool, createCount: 0, recoverCount: 0 };\r\n        }\r\n        AppConfig.pools['MapFontInfo'].recoverCount++;\r\n        MapFontInfo._pool.push(this);\r\n        this.isRecover = true;\r\n    }\r\n    setDataByValueArr(dataArr) {\r\n        let fontStruct = MapFontInfo.DataSource[\"font_struct\"];\r\n        let obj;\r\n        for (let i = 0; i < dataArr.length; i++) {\r\n            if (fontStruct.length > i)\r\n                this[fontStruct[i]] = dataArr[i];\r\n        }\r\n    }\r\n    setDataByKey(value) {\r\n        let obj;\r\n        if (value[\"text\"] == \"*\") {\r\n            obj = value;\r\n        }\r\n        else {\r\n            let fontStruct = MapFontInfo.DataSource[\"font_struct\"];\r\n            let fontDatas = MapFontInfo.DataSource[\"font\"];\r\n            for (let i = 0; i < fontDatas.length; i++) {\r\n                let fontArr = MapFontInfo.DataSource[\"font\"][i];\r\n                let isMeet = true;\r\n                for (let tempProperty in value) {\r\n                    if (value[tempProperty] != fontArr[fontStruct.indexOf(tempProperty)]) {\r\n                        isMeet = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (isMeet) {\r\n                    obj = {};\r\n                    for (let j = 0; j < fontStruct.length; j++) {\r\n                        obj[fontStruct[j]] = fontArr[j];\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (obj != null) {\r\n            this.setData(obj);\r\n        }\r\n    }\r\n}\r\nMapFontInfo._groupCache = {};\r\nMapFontInfo._pool = [];\r\nMapFontInfo._heChengCiZuObj = {};\r\nMapFontInfo._heChengHanZiObj = {};\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/src/AppConfig.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/src/script/model/ModelBase.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/src/ResMgr.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/src/URI.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Skeleton.ts"
  ]
}

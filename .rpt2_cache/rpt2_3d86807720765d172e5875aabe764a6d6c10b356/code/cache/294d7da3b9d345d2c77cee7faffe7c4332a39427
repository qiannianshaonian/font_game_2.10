{
  "code": "import { Point } from \"../maths/Point\";\r\nimport { Rectangle } from \"../maths/Rectangle\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class HitArea {\r\n    contains(x, y) {\r\n        if (!HitArea._isHitGraphic(x, y, this.hit))\r\n            return false;\r\n        return !HitArea._isHitGraphic(x, y, this.unHit);\r\n    }\r\n    static _isHitGraphic(x, y, graphic) {\r\n        if (!graphic)\r\n            return false;\r\n        var cmds = graphic.cmds;\r\n        if (!cmds && graphic._one) {\r\n            cmds = HitArea._cmds;\r\n            cmds.length = 1;\r\n            cmds[0] = graphic._one;\r\n        }\r\n        if (!cmds)\r\n            return false;\r\n        var i, len;\r\n        len = cmds.length;\r\n        var cmd;\r\n        for (i = 0; i < len; i++) {\r\n            cmd = cmds[i];\r\n            if (!cmd)\r\n                continue;\r\n            switch (cmd.cmdID) {\r\n                case \"Translate\":\r\n                    x -= cmd.tx;\r\n                    y -= cmd.ty;\r\n            }\r\n            if (HitArea._isHitCmd(x, y, cmd))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    static _isHitCmd(x, y, cmd) {\r\n        if (!cmd)\r\n            return false;\r\n        var rst = false;\r\n        switch (cmd.cmdID) {\r\n            case \"DrawRect\":\r\n                HitArea._rect.setTo(cmd.x, cmd.y, cmd.width, cmd.height);\r\n                rst = HitArea._rect.contains(x, y);\r\n                break;\r\n            case \"DrawCircle\":\r\n                var d;\r\n                x -= cmd.x;\r\n                y -= cmd.y;\r\n                d = x * x + y * y;\r\n                rst = d < cmd.radius * cmd.radius;\r\n                break;\r\n            case \"DrawPoly\":\r\n                x -= cmd.x;\r\n                y -= cmd.y;\r\n                rst = HitArea._ptInPolygon(x, y, cmd.points);\r\n                break;\r\n        }\r\n        return rst;\r\n    }\r\n    static _ptInPolygon(x, y, areaPoints) {\r\n        var p = HitArea._ptPoint;\r\n        p.setTo(x, y);\r\n        var nCross = 0;\r\n        var p1x, p1y, p2x, p2y;\r\n        var len;\r\n        len = areaPoints.length;\r\n        for (var i = 0; i < len; i += 2) {\r\n            p1x = areaPoints[i];\r\n            p1y = areaPoints[i + 1];\r\n            p2x = areaPoints[(i + 2) % len];\r\n            p2y = areaPoints[(i + 3) % len];\r\n            if (p1y == p2y)\r\n                continue;\r\n            if (p.y < Math.min(p1y, p2y))\r\n                continue;\r\n            if (p.y >= Math.max(p1y, p2y))\r\n                continue;\r\n            var tx = (p.y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x;\r\n            if (tx > p.x)\r\n                nCross++;\r\n        }\r\n        return (nCross % 2 == 1);\r\n    }\r\n    get hit() {\r\n        if (!this._hit)\r\n            this._hit = new ILaya.Graphics();\r\n        return this._hit;\r\n    }\r\n    set hit(value) {\r\n        this._hit = value;\r\n    }\r\n    get unHit() {\r\n        if (!this._unHit)\r\n            this._unHit = new ILaya.Graphics();\r\n        return this._unHit;\r\n    }\r\n    set unHit(value) {\r\n        this._unHit = value;\r\n    }\r\n}\r\nHitArea._cmds = [];\r\nHitArea._rect = new Rectangle();\r\nHitArea._ptPoint = new Point();\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Graphics.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Point.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Rectangle.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/HitArea.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Graphics } from \"../display/Graphics\";\r\nexport declare class HitArea {\r\n    private static _cmds;\r\n    private static _rect;\r\n    private static _ptPoint;\r\n    private _hit;\r\n    private _unHit;\r\n    contains(x: number, y: number): boolean;\r\n    static _isHitGraphic(x: number, y: number, graphic: Graphics): boolean;\r\n    static _isHitCmd(x: number, y: number, cmd: any): boolean;\r\n    static _ptInPolygon(x: number, y: number, areaPoints: any[]): boolean;\r\n    hit: Graphics;\r\n    unHit: Graphics;\r\n}\r\n"
  }
}

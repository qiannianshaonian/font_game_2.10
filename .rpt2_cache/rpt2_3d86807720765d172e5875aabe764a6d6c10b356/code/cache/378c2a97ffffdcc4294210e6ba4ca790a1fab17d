{
  "code": "import { Sprite } from \"./Sprite\";\r\nimport { Config } from \"./../../Config\";\r\nimport { Input } from \"./Input\";\r\nimport { SpriteConst } from \"./SpriteConst\";\r\nimport { Const } from \"../Const\";\r\nimport { Event } from \"../events/Event\";\r\nimport { MouseManager } from \"../events/MouseManager\";\r\nimport { Matrix } from \"../maths/Matrix\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Render } from \"../renders/Render\";\r\nimport { RenderInfo } from \"../renders/RenderInfo\";\r\nimport { Context } from \"../resource/Context\";\r\nimport { Browser } from \"../utils/Browser\";\r\nimport { CallLater } from \"../utils/CallLater\";\r\nimport { ColorUtils } from \"../utils/ColorUtils\";\r\nimport { RunDriver } from \"../utils/RunDriver\";\r\nimport { VectorGraphManager } from \"../utils/VectorGraphManager\";\r\nimport { RenderState2D } from \"../webgl/utils/RenderState2D\";\r\nimport { Stat } from \"../utils/Stat\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { LayaGL } from \"../layagl/LayaGL\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class Stage extends Sprite {\r\n    constructor() {\r\n        super();\r\n        this.offset = new Point();\r\n        this._frameRate = \"fast\";\r\n        this.designWidth = 0;\r\n        this.designHeight = 0;\r\n        this.canvasRotation = false;\r\n        this.canvasDegree = 0;\r\n        this.renderingEnabled = true;\r\n        this.screenAdaptationEnabled = true;\r\n        this._canvasTransform = new Matrix();\r\n        this._screenMode = \"none\";\r\n        this._scaleMode = \"noscale\";\r\n        this._alignV = \"top\";\r\n        this._alignH = \"left\";\r\n        this._bgColor = \"black\";\r\n        this._mouseMoveTime = 0;\r\n        this._renderCount = 0;\r\n        this._safariOffsetY = 0;\r\n        this._frameStartTime = 0;\r\n        this._previousOrientation = Browser.window.orientation;\r\n        this._wgColor = [0, 0, 0, 1];\r\n        this._scene3Ds = [];\r\n        this._globalRepaintSet = false;\r\n        this._globalRepaintGet = false;\r\n        this._3dUI = [];\r\n        this._curUIBase = null;\r\n        this.useRetinalCanvas = false;\r\n        super.set_transform(this._createTransform());\r\n        this.mouseEnabled = true;\r\n        this.hitTestPrior = true;\r\n        this.autoSize = false;\r\n        this._setBit(Const.DISPLAYED_INSTAGE, true);\r\n        this._setBit(Const.ACTIVE_INHIERARCHY, true);\r\n        this._isFocused = true;\r\n        this._isVisibility = true;\r\n        this.useRetinalCanvas = Config.useRetinalCanvas;\r\n        var window = Browser.window;\r\n        window.addEventListener(\"focus\", () => {\r\n            this._isFocused = true;\r\n            this.event(Event.FOCUS);\r\n            this.event(Event.FOCUS_CHANGE);\r\n        });\r\n        window.addEventListener(\"blur\", () => {\r\n            this._isFocused = false;\r\n            this.event(Event.BLUR);\r\n            this.event(Event.FOCUS_CHANGE);\r\n            if (this._isInputting())\r\n                Input[\"inputElement\"].target.focus = false;\r\n        });\r\n        var state = \"visibilityState\", visibilityChange = \"visibilitychange\";\r\n        var document = window.document;\r\n        if (typeof document.hidden !== \"undefined\") {\r\n            visibilityChange = \"visibilitychange\";\r\n            state = \"visibilityState\";\r\n        }\r\n        else if (typeof document.mozHidden !== \"undefined\") {\r\n            visibilityChange = \"mozvisibilitychange\";\r\n            state = \"mozVisibilityState\";\r\n        }\r\n        else if (typeof document.msHidden !== \"undefined\") {\r\n            visibilityChange = \"msvisibilitychange\";\r\n            state = \"msVisibilityState\";\r\n        }\r\n        else if (typeof document.webkitHidden !== \"undefined\") {\r\n            visibilityChange = \"webkitvisibilitychange\";\r\n            state = \"webkitVisibilityState\";\r\n        }\r\n        window.document.addEventListener(visibilityChange, () => {\r\n            if (Browser.document[state] == \"hidden\") {\r\n                this._isVisibility = false;\r\n                if (this._isInputting())\r\n                    Input[\"inputElement\"].target.focus = false;\r\n            }\r\n            else {\r\n                this._isVisibility = true;\r\n            }\r\n            this.renderingEnabled = this._isVisibility;\r\n            this.event(Event.VISIBILITY_CHANGE);\r\n        });\r\n        window.addEventListener(\"resize\", () => {\r\n            var orientation = Browser.window.orientation;\r\n            if (orientation != null && orientation != this._previousOrientation && this._isInputting()) {\r\n                Input[\"inputElement\"].target.focus = false;\r\n            }\r\n            this._previousOrientation = orientation;\r\n            if (this._isInputting())\r\n                return;\r\n            if (Browser.onSafari)\r\n                this._safariOffsetY = (Browser.window.__innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight) - Browser.window.innerHeight;\r\n            this._resetCanvas();\r\n        });\r\n        window.addEventListener(\"orientationchange\", (e) => {\r\n            this._resetCanvas();\r\n        });\r\n        this.on(Event.MOUSE_MOVE, this, this._onmouseMove);\r\n        if (Browser.onMobile)\r\n            this.on(Event.MOUSE_DOWN, this, this._onmouseMove);\r\n    }\r\n    _isInputting() {\r\n        return (Browser.onMobile && Input.isInputting);\r\n    }\r\n    set width(value) {\r\n        this.designWidth = value;\r\n        super.set_width(value);\r\n        ILaya.systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    get width() {\r\n        return super.get_width();\r\n    }\r\n    set height(value) {\r\n        this.designHeight = value;\r\n        super.set_height(value);\r\n        ILaya.systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    get height() {\r\n        return super.get_height();\r\n    }\r\n    set transform(value) {\r\n        super.set_transform(value);\r\n    }\r\n    get transform() {\r\n        if (this._tfChanged)\r\n            this._adjustTransform();\r\n        return (this._transform = this._transform || this._createTransform());\r\n    }\r\n    get isFocused() {\r\n        return this._isFocused;\r\n    }\r\n    get isVisibility() {\r\n        return this._isVisibility;\r\n    }\r\n    _changeCanvasSize() {\r\n        this.setScreenSize(Browser.clientWidth * Browser.pixelRatio, Browser.clientHeight * Browser.pixelRatio);\r\n    }\r\n    _resetCanvas() {\r\n        if (!this.screenAdaptationEnabled)\r\n            return;\r\n        this._changeCanvasSize();\r\n    }\r\n    setScreenSize(screenWidth, screenHeight) {\r\n        var rotation = false;\r\n        if (this._screenMode !== Stage.SCREEN_NONE) {\r\n            var screenType = screenWidth / screenHeight < 1 ? Stage.SCREEN_VERTICAL : Stage.SCREEN_HORIZONTAL;\r\n            rotation = screenType !== this._screenMode;\r\n            if (rotation) {\r\n                var temp = screenHeight;\r\n                screenHeight = screenWidth;\r\n                screenWidth = temp;\r\n            }\r\n        }\r\n        this.canvasRotation = rotation;\r\n        var canvas = Render._mainCanvas;\r\n        var canvasStyle = canvas.source.style;\r\n        var mat = this._canvasTransform.identity();\r\n        var scaleMode = this._scaleMode;\r\n        var scaleX = screenWidth / this.designWidth;\r\n        var scaleY = screenHeight / this.designHeight;\r\n        var canvasWidth = this.useRetinalCanvas ? screenWidth : this.designWidth;\r\n        var canvasHeight = this.useRetinalCanvas ? screenHeight : this.designHeight;\r\n        var realWidth = screenWidth;\r\n        var realHeight = screenHeight;\r\n        var pixelRatio = Browser.pixelRatio;\r\n        this._width = this.designWidth;\r\n        this._height = this.designHeight;\r\n        switch (scaleMode) {\r\n            case Stage.SCALE_NOSCALE:\r\n                scaleX = scaleY = 1;\r\n                realWidth = this.designWidth;\r\n                realHeight = this.designHeight;\r\n                break;\r\n            case Stage.SCALE_SHOWALL:\r\n                scaleX = scaleY = Math.min(scaleX, scaleY);\r\n                canvasWidth = realWidth = Math.round(this.designWidth * scaleX);\r\n                canvasHeight = realHeight = Math.round(this.designHeight * scaleY);\r\n                break;\r\n            case Stage.SCALE_NOBORDER:\r\n                scaleX = scaleY = Math.max(scaleX, scaleY);\r\n                realWidth = Math.round(this.designWidth * scaleX);\r\n                realHeight = Math.round(this.designHeight * scaleY);\r\n                break;\r\n            case Stage.SCALE_FULL:\r\n                scaleX = scaleY = 1;\r\n                this._width = canvasWidth = screenWidth;\r\n                this._height = canvasHeight = screenHeight;\r\n                break;\r\n            case Stage.SCALE_FIXED_WIDTH:\r\n                scaleY = scaleX;\r\n                this._height = canvasHeight = Math.round(screenHeight / scaleX);\r\n                break;\r\n            case Stage.SCALE_FIXED_HEIGHT:\r\n                scaleX = scaleY;\r\n                this._width = canvasWidth = Math.round(screenWidth / scaleY);\r\n                break;\r\n            case Stage.SCALE_FIXED_AUTO:\r\n                if ((screenWidth / screenHeight) < (this.designWidth / this.designHeight)) {\r\n                    scaleY = scaleX;\r\n                    this._height = canvasHeight = Math.round(screenHeight / scaleX);\r\n                }\r\n                else {\r\n                    scaleX = scaleY;\r\n                    this._width = canvasWidth = Math.round(screenWidth / scaleY);\r\n                }\r\n                break;\r\n        }\r\n        if (this.useRetinalCanvas) {\r\n            realWidth = canvasWidth = screenWidth;\r\n            realHeight = canvasHeight = screenHeight;\r\n        }\r\n        scaleX *= this.scaleX;\r\n        scaleY *= this.scaleY;\r\n        if (scaleX === 1 && scaleY === 1) {\r\n            this.transform.identity();\r\n        }\r\n        else {\r\n            this.transform.a = this._formatData(scaleX / (realWidth / canvasWidth));\r\n            this.transform.d = this._formatData(scaleY / (realHeight / canvasHeight));\r\n        }\r\n        canvas.size(canvasWidth, canvasHeight);\r\n        RunDriver.changeWebGLSize(canvasWidth, canvasHeight);\r\n        mat.scale(realWidth / canvasWidth / pixelRatio, realHeight / canvasHeight / pixelRatio);\r\n        if (this._alignH === Stage.ALIGN_LEFT)\r\n            this.offset.x = 0;\r\n        else if (this._alignH === Stage.ALIGN_RIGHT)\r\n            this.offset.x = screenWidth - realWidth;\r\n        else\r\n            this.offset.x = (screenWidth - realWidth) * 0.5 / pixelRatio;\r\n        if (this._alignV === Stage.ALIGN_TOP)\r\n            this.offset.y = 0;\r\n        else if (this._alignV === Stage.ALIGN_BOTTOM)\r\n            this.offset.y = screenHeight - realHeight;\r\n        else\r\n            this.offset.y = (screenHeight - realHeight) * 0.5 / pixelRatio;\r\n        this.offset.x = Math.round(this.offset.x);\r\n        this.offset.y = Math.round(this.offset.y);\r\n        mat.translate(this.offset.x, this.offset.y);\r\n        if (this._safariOffsetY)\r\n            mat.translate(0, this._safariOffsetY);\r\n        this.canvasDegree = 0;\r\n        if (rotation) {\r\n            if (this._screenMode === Stage.SCREEN_HORIZONTAL) {\r\n                mat.rotate(Math.PI / 2);\r\n                mat.translate(screenHeight / pixelRatio, 0);\r\n                this.canvasDegree = 90;\r\n            }\r\n            else {\r\n                mat.rotate(-Math.PI / 2);\r\n                mat.translate(0, screenWidth / pixelRatio);\r\n                this.canvasDegree = -90;\r\n            }\r\n        }\r\n        mat.a = this._formatData(mat.a);\r\n        mat.d = this._formatData(mat.d);\r\n        mat.tx = this._formatData(mat.tx);\r\n        mat.ty = this._formatData(mat.ty);\r\n        super.set_transform(this.transform);\r\n        canvasStyle.transformOrigin = canvasStyle.webkitTransformOrigin = canvasStyle.msTransformOrigin = canvasStyle.mozTransformOrigin = canvasStyle.oTransformOrigin = \"0px 0px 0px\";\r\n        canvasStyle.transform = canvasStyle.webkitTransform = canvasStyle.msTransform = canvasStyle.mozTransform = canvasStyle.oTransform = \"matrix(\" + mat.toString() + \")\";\r\n        canvasStyle.width = canvasWidth;\r\n        canvasStyle.height = canvasHeight;\r\n        if (this._safariOffsetY)\r\n            mat.translate(0, -this._safariOffsetY);\r\n        mat.translate(parseInt(canvasStyle.left) || 0, parseInt(canvasStyle.top) || 0);\r\n        this.visible = true;\r\n        this._repaint |= SpriteConst.REPAINT_CACHE;\r\n        this.event(Event.RESIZE);\r\n    }\r\n    _formatData(value) {\r\n        if (Math.abs(value) < 0.000001)\r\n            return 0;\r\n        if (Math.abs(1 - value) < 0.001)\r\n            return value > 0 ? 1 : -1;\r\n        return value;\r\n    }\r\n    get scaleMode() {\r\n        return this._scaleMode;\r\n    }\r\n    set scaleMode(value) {\r\n        this._scaleMode = value;\r\n        ILaya.systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    get alignH() {\r\n        return this._alignH;\r\n    }\r\n    set alignH(value) {\r\n        this._alignH = value;\r\n        ILaya.systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    get alignV() {\r\n        return this._alignV;\r\n    }\r\n    set alignV(value) {\r\n        this._alignV = value;\r\n        ILaya.systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    get bgColor() {\r\n        return this._bgColor;\r\n    }\r\n    set bgColor(value) {\r\n        this._bgColor = value;\r\n        if (value)\r\n            this._wgColor = ColorUtils.create(value).arrColor;\r\n        else\r\n            this._wgColor = null;\r\n        if (value) {\r\n            Render.canvas.style.background = value;\r\n        }\r\n        else {\r\n            Render.canvas.style.background = \"none\";\r\n        }\r\n    }\r\n    get mouseX() {\r\n        return Math.round(MouseManager.instance.mouseX / this.clientScaleX);\r\n    }\r\n    get mouseY() {\r\n        return Math.round(MouseManager.instance.mouseY / this.clientScaleY);\r\n    }\r\n    getMousePoint() {\r\n        return Point.TEMP.setTo(this.mouseX, this.mouseY);\r\n    }\r\n    get clientScaleX() {\r\n        return this._transform ? this._transform.getScaleX() : 1;\r\n    }\r\n    get clientScaleY() {\r\n        return this._transform ? this._transform.getScaleY() : 1;\r\n    }\r\n    get screenMode() {\r\n        return this._screenMode;\r\n    }\r\n    set screenMode(value) {\r\n        this._screenMode = value;\r\n    }\r\n    repaint(type = SpriteConst.REPAINT_CACHE) {\r\n        this._repaint |= type;\r\n    }\r\n    parentRepaint(type = SpriteConst.REPAINT_CACHE) {\r\n    }\r\n    _loop() {\r\n        this._globalRepaintGet = this._globalRepaintSet;\r\n        this._globalRepaintSet = false;\r\n        this.render(Render._context, 0, 0);\r\n        return true;\r\n    }\r\n    getFrameTm() {\r\n        return this._frameStartTime;\r\n    }\r\n    _onmouseMove(e) {\r\n        this._mouseMoveTime = Browser.now();\r\n    }\r\n    getTimeFromFrameStart() {\r\n        return Browser.now() - this._frameStartTime;\r\n    }\r\n    set visible(value) {\r\n        if (this.visible !== value) {\r\n            super.set_visible(value);\r\n            var style = Render._mainCanvas.source.style;\r\n            style.visibility = value ? \"visible\" : \"hidden\";\r\n        }\r\n    }\r\n    get visible() {\r\n        return super.visible;\r\n    }\r\n    render(context, x, y) {\r\n        if (window.conch) {\r\n            this.renderToNative(context, x, y);\r\n            return;\r\n        }\r\n        if (this._frameRate === Stage.FRAME_SLEEP) {\r\n            var now = Browser.now();\r\n            if (now - this._frameStartTime >= 1000)\r\n                this._frameStartTime = now;\r\n            else\r\n                return;\r\n        }\r\n        else {\r\n            if (!this._visible) {\r\n                this._renderCount++;\r\n                if (this._renderCount % 5 === 0) {\r\n                    CallLater.I._update();\r\n                    Stat.loopCount++;\r\n                    RenderInfo.loopCount = Stat.loopCount;\r\n                    this._updateTimers();\r\n                }\r\n                return;\r\n            }\r\n            this._frameStartTime = Browser.now();\r\n            RenderInfo.loopStTm = this._frameStartTime;\r\n        }\r\n        this._renderCount++;\r\n        var frameMode = this._frameRate === Stage.FRAME_MOUSE ? (((this._frameStartTime - this._mouseMoveTime) < 2000) ? Stage.FRAME_FAST : Stage.FRAME_SLOW) : this._frameRate;\r\n        var isFastMode = (frameMode !== Stage.FRAME_SLOW);\r\n        var isDoubleLoop = (this._renderCount % 2 === 0);\r\n        Stat.renderSlow = !isFastMode;\r\n        if (!isFastMode && !isDoubleLoop)\r\n            return;\r\n        CallLater.I._update();\r\n        Stat.loopCount++;\r\n        RenderInfo.loopCount = Stat.loopCount;\r\n        if (this.renderingEnabled) {\r\n            for (var i = 0, n = this._scene3Ds.length; i < n; i++)\r\n                this._scene3Ds[i]._update();\r\n            context.clear();\r\n            super.render(context, x, y);\r\n            Stat._StatRender.renderNotCanvas(context, x, y);\r\n        }\r\n        if (this.renderingEnabled) {\r\n            Stage.clear(this._bgColor);\r\n            context.flush();\r\n            VectorGraphManager.instance && VectorGraphManager.getInstance().endDispose();\r\n        }\r\n        this._updateTimers();\r\n    }\r\n    renderToNative(context, x, y) {\r\n        this._renderCount++;\r\n        if (!this._visible) {\r\n            if (this._renderCount % 5 === 0) {\r\n                CallLater.I._update();\r\n                Stat.loopCount++;\r\n                RenderInfo.loopCount = Stat.loopCount;\r\n                this._updateTimers();\r\n            }\r\n            return;\r\n        }\r\n        CallLater.I._update();\r\n        Stat.loopCount++;\r\n        RenderInfo.loopCount = Stat.loopCount;\r\n        if (this.renderingEnabled) {\r\n            for (var i = 0, n = this._scene3Ds.length; i < n; i++)\r\n                this._scene3Ds[i]._update();\r\n            context.clear();\r\n            super.render(context, x, y);\r\n            Stat._StatRender.renderNotCanvas(context, x, y);\r\n        }\r\n        if (this.renderingEnabled) {\r\n            Stage.clear(this._bgColor);\r\n            context.flush();\r\n            VectorGraphManager.instance && VectorGraphManager.getInstance().endDispose();\r\n        }\r\n        this._updateTimers();\r\n    }\r\n    _updateTimers() {\r\n        ILaya.systemTimer._update();\r\n        ILaya.startTimer._update();\r\n        ILaya.physicsTimer._update();\r\n        ILaya.updateTimer._update();\r\n        ILaya.lateTimer._update();\r\n        ILaya.timer._update();\r\n    }\r\n    set fullScreenEnabled(value) {\r\n        var document = Browser.document;\r\n        var canvas = Render.canvas;\r\n        if (value) {\r\n            canvas.addEventListener('mousedown', this._requestFullscreen);\r\n            canvas.addEventListener('touchstart', this._requestFullscreen);\r\n            document.addEventListener(\"fullscreenchange\", this._fullScreenChanged);\r\n            document.addEventListener(\"mozfullscreenchange\", this._fullScreenChanged);\r\n            document.addEventListener(\"webkitfullscreenchange\", this._fullScreenChanged);\r\n            document.addEventListener(\"msfullscreenchange\", this._fullScreenChanged);\r\n        }\r\n        else {\r\n            canvas.removeEventListener('mousedown', this._requestFullscreen);\r\n            canvas.removeEventListener('touchstart', this._requestFullscreen);\r\n            document.removeEventListener(\"fullscreenchange\", this._fullScreenChanged);\r\n            document.removeEventListener(\"mozfullscreenchange\", this._fullScreenChanged);\r\n            document.removeEventListener(\"webkitfullscreenchange\", this._fullScreenChanged);\r\n            document.removeEventListener(\"msfullscreenchange\", this._fullScreenChanged);\r\n        }\r\n    }\r\n    get frameRate() {\r\n        if (!ILaya.Render.isConchApp) {\r\n            return this._frameRate;\r\n        }\r\n        else {\r\n            return this._frameRateNative;\r\n        }\r\n    }\r\n    set frameRate(value) {\r\n        if (!ILaya.Render.isConchApp) {\r\n            this._frameRate = value;\r\n        }\r\n        else {\r\n            var c = window.conch;\r\n            switch (value) {\r\n                case Stage.FRAME_FAST:\r\n                    c.config.setLimitFPS(60);\r\n                    break;\r\n                case Stage.FRAME_MOUSE:\r\n                    c.config.setMouseFrame(2000);\r\n                    break;\r\n                case Stage.FRAME_SLOW:\r\n                    c.config.setSlowFrame(true);\r\n                    break;\r\n                case Stage.FRAME_SLEEP:\r\n                    c.config.setLimitFPS(1);\r\n                    break;\r\n            }\r\n            this._frameRateNative = value;\r\n        }\r\n    }\r\n    _requestFullscreen() {\r\n        var element = Browser.document.documentElement;\r\n        if (element.requestFullscreen) {\r\n            element.requestFullscreen();\r\n        }\r\n        else if (element.mozRequestFullScreen) {\r\n            element.mozRequestFullScreen();\r\n        }\r\n        else if (element.webkitRequestFullscreen) {\r\n            element.webkitRequestFullscreen();\r\n        }\r\n        else if (element.msRequestFullscreen) {\r\n            element.msRequestFullscreen();\r\n        }\r\n    }\r\n    _fullScreenChanged() {\r\n        ILaya.stage.event(Event.FULL_SCREEN_CHANGE);\r\n    }\r\n    exitFullscreen() {\r\n        var document = Browser.document;\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        }\r\n        else if (document.mozCancelFullScreen) {\r\n            document.mozCancelFullScreen();\r\n        }\r\n        else if (document.webkitExitFullscreen) {\r\n            document.webkitExitFullscreen();\r\n        }\r\n    }\r\n    isGlobalRepaint() {\r\n        return this._globalRepaintGet;\r\n    }\r\n    setGlobalRepaint() {\r\n        this._globalRepaintSet = true;\r\n    }\r\n    add3DUI(uibase) {\r\n        var uiroot = uibase.rootView;\r\n        if (this._3dUI.indexOf(uiroot) >= 0)\r\n            return;\r\n        this._3dUI.push(uiroot);\r\n    }\r\n    remove3DUI(uibase) {\r\n        var uiroot = uibase.rootView;\r\n        var p = this._3dUI.indexOf(uiroot);\r\n        if (p >= 0) {\r\n            this._3dUI.splice(p, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nStage.SCALE_NOSCALE = \"noscale\";\r\nStage.SCALE_EXACTFIT = \"exactfit\";\r\nStage.SCALE_SHOWALL = \"showall\";\r\nStage.SCALE_NOBORDER = \"noborder\";\r\nStage.SCALE_FULL = \"full\";\r\nStage.SCALE_FIXED_WIDTH = \"fixedwidth\";\r\nStage.SCALE_FIXED_HEIGHT = \"fixedheight\";\r\nStage.SCALE_FIXED_AUTO = \"fixedauto\";\r\nStage.ALIGN_LEFT = \"left\";\r\nStage.ALIGN_RIGHT = \"right\";\r\nStage.ALIGN_CENTER = \"center\";\r\nStage.ALIGN_TOP = \"top\";\r\nStage.ALIGN_MIDDLE = \"middle\";\r\nStage.ALIGN_BOTTOM = \"bottom\";\r\nStage.SCREEN_NONE = \"none\";\r\nStage.SCREEN_HORIZONTAL = \"horizontal\";\r\nStage.SCREEN_VERTICAL = \"vertical\";\r\nStage.FRAME_FAST = \"fast\";\r\nStage.FRAME_SLOW = \"slow\";\r\nStage.FRAME_MOUSE = \"mouse\";\r\nStage.FRAME_SLEEP = \"sleep\";\r\nStage.clear = function (value) {\r\n    Context.set2DRenderConfig();\r\n    var gl = LayaGL.instance;\r\n    RenderState2D.worldScissorTest && gl.disable(gl.SCISSOR_TEST);\r\n    var ctx = Render.context;\r\n    var c = (ctx._submits._length == 0 || Config.preserveDrawingBuffer) ? ColorUtils.create(value).arrColor : ILaya.stage._wgColor;\r\n    if (c)\r\n        ctx.clearBG(c[0], c[1], c[2], c[3]);\r\n    else\r\n        ctx.clearBG(0, 0, 0, 0);\r\n    RenderState2D.clear();\r\n};\r\nClassUtils.regClass(\"laya.display.Stage\", Stage);\r\nClassUtils.regClass(\"Laya.Stage\", Stage);\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Node.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/Config.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Input.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/SpriteConst.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/Const.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/events/MouseManager.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Matrix.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Point.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/renders/Render.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/renders/RenderInfo.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Context.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/HTMLCanvas.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Browser.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/CallLater.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/ColorUtils.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/RunDriver.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/VectorGraphManager.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/utils/RenderState2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/WebGLContext.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Stat.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Timer.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/layagl/LayaGL.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Stage.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Sprite } from \"./Sprite\";\r\nimport { Node } from \"./Node\";\r\nimport { Matrix } from \"../maths/Matrix\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Context } from \"../resource/Context\";\r\nexport declare class Stage extends Sprite {\r\n    static SCALE_NOSCALE: string;\r\n    static SCALE_EXACTFIT: string;\r\n    static SCALE_SHOWALL: string;\r\n    static SCALE_NOBORDER: string;\r\n    static SCALE_FULL: string;\r\n    static SCALE_FIXED_WIDTH: string;\r\n    static SCALE_FIXED_HEIGHT: string;\r\n    static SCALE_FIXED_AUTO: string;\r\n    static ALIGN_LEFT: string;\r\n    static ALIGN_RIGHT: string;\r\n    static ALIGN_CENTER: string;\r\n    static ALIGN_TOP: string;\r\n    static ALIGN_MIDDLE: string;\r\n    static ALIGN_BOTTOM: string;\r\n    static SCREEN_NONE: string;\r\n    static SCREEN_HORIZONTAL: string;\r\n    static SCREEN_VERTICAL: string;\r\n    static FRAME_FAST: string;\r\n    static FRAME_SLOW: string;\r\n    static FRAME_MOUSE: string;\r\n    static FRAME_SLEEP: string;\r\n    focus: Node;\r\n    offset: Point;\r\n    private _frameRate;\r\n    designWidth: number;\r\n    designHeight: number;\r\n    canvasRotation: boolean;\r\n    canvasDegree: number;\r\n    renderingEnabled: boolean;\r\n    screenAdaptationEnabled: boolean;\r\n    _canvasTransform: Matrix;\r\n    private _screenMode;\r\n    private _scaleMode;\r\n    private _alignV;\r\n    private _alignH;\r\n    private _bgColor;\r\n    private _mouseMoveTime;\r\n    private _renderCount;\r\n    private _safariOffsetY;\r\n    private _frameStartTime;\r\n    private _previousOrientation;\r\n    private _isFocused;\r\n    private _isVisibility;\r\n    _wgColor: number[] | null;\r\n    _scene3Ds: any[];\r\n    private _globalRepaintSet;\r\n    private _globalRepaintGet;\r\n    _3dUI: Sprite[];\r\n    _curUIBase: Sprite | null;\r\n    useRetinalCanvas: boolean;\r\n    constructor();\r\n    private _isInputting;\r\n    width: number;\r\n    height: number;\r\n    transform: Matrix;\r\n    readonly isFocused: boolean;\r\n    readonly isVisibility: boolean;\r\n    private _changeCanvasSize;\r\n    protected _resetCanvas(): void;\r\n    setScreenSize(screenWidth: number, screenHeight: number): void;\r\n    private _formatData;\r\n    scaleMode: string;\r\n    alignH: string;\r\n    alignV: string;\r\n    bgColor: string;\r\n    readonly mouseX: number;\r\n    readonly mouseY: number;\r\n    getMousePoint(): Point;\r\n    readonly clientScaleX: number;\r\n    readonly clientScaleY: number;\r\n    screenMode: string;\r\n    repaint(type?: number): void;\r\n    parentRepaint(type?: number): void;\r\n    _loop(): boolean;\r\n    getFrameTm(): number;\r\n    private _onmouseMove;\r\n    getTimeFromFrameStart(): number;\r\n    visible: boolean;\r\n    static clear: Function;\r\n    render(context: Context, x: number, y: number): void;\r\n    renderToNative(context: Context, x: number, y: number): void;\r\n    private _updateTimers;\r\n    fullScreenEnabled: boolean;\r\n    frameRate: string;\r\n    private _requestFullscreen;\r\n    private _fullScreenChanged;\r\n    exitFullscreen(): void;\r\n    isGlobalRepaint(): boolean;\r\n    setGlobalRepaint(): void;\r\n    add3DUI(uibase: Sprite): void;\r\n    remove3DUI(uibase: Sprite): boolean;\r\n}\r\n"
  }
}

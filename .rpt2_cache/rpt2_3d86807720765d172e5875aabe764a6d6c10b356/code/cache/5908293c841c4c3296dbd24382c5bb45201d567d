{
  "code": "import { Bone } from \"./Bone\";\r\nimport { TfConstraintData } from \"./TfConstraintData\";\r\nimport { PathConstraintData } from \"./PathConstraintData\";\r\nimport { DeformAniData } from \"./DeformAniData\";\r\nimport { DeformSlotData } from \"./DeformSlotData\";\r\nimport { DeformSlotDisplayData } from \"./DeformSlotDisplayData\";\r\nimport { DrawOrderData } from \"./DrawOrderData\";\r\nimport { EventData } from \"./EventData\";\r\nimport { AnimationTemplet } from \"../AnimationTemplet\";\r\nimport { BoneSlot } from \"./BoneSlot\";\r\nimport { SkinData } from \"./SkinData\";\r\nimport { SkinSlotDisplayData } from \"./SkinSlotDisplayData\";\r\nimport { SlotData } from \"./SlotData\";\r\nimport { Transform } from \"./Transform\";\r\nimport { IkConstraintData } from \"./IkConstraintData\";\r\nimport { Texture } from \"../../resource/Texture\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { IAniLib } from \"../AniLibPack\";\r\nimport { Skeleton } from \"./Skeleton\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nexport class Templet extends AnimationTemplet {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._graphicsCache = [];\r\n        this.srcBoneMatrixArr = [];\r\n        this.ikArr = [];\r\n        this.tfArr = [];\r\n        this.pathArr = [];\r\n        this.boneSlotDic = {};\r\n        this.bindBoneBoneSlotDic = {};\r\n        this.boneSlotArray = [];\r\n        this.skinDataArray = [];\r\n        this.skinDic = {};\r\n        this.subTextureDic = {};\r\n        this.isParseFail = false;\r\n        this.drawOrderAniArr = [];\r\n        this.eventAniArr = [];\r\n        this.attachmentNames = null;\r\n        this.deformAniArr = [];\r\n        this.skinSlotDisplayDataArr = [];\r\n        this._isParseAudio = false;\r\n        this._isDestroyed = false;\r\n        this._rate = 30;\r\n        this.isParserComplete = false;\r\n        this.aniSectionDic = {};\r\n        this._textureDic = {};\r\n        this.mBoneArr = [];\r\n    }\r\n    loadAni(url) {\r\n        this._skBufferUrl = url;\r\n        ILaya.loader.load(url, Handler.create(this, this.onComplete), null, ILaya.Loader.BUFFER);\r\n    }\r\n    onComplete(content = null) {\r\n        if (this._isDestroyed) {\r\n            this.destroy();\r\n            return;\r\n        }\r\n        var tSkBuffer = ILaya.Loader.getRes(this._skBufferUrl);\r\n        if (!tSkBuffer) {\r\n            this.event(Event.ERROR, \"load failed:\" + this._skBufferUrl);\r\n            return;\r\n        }\r\n        this._path = this._skBufferUrl.slice(0, this._skBufferUrl.lastIndexOf(\"/\")) + \"/\";\r\n        this.parseData(null, tSkBuffer);\r\n    }\r\n    parseData(texture, skeletonData, playbackRate = 30) {\r\n        if (!this._path) {\r\n            var s1 = (this._relativeUrl || this.url);\r\n            if (s1) {\r\n                var p1 = s1.lastIndexOf('/');\r\n                if (p1 > 0) {\r\n                    this._path = s1.slice(0, p1) + \"/\";\r\n                }\r\n                else {\r\n                    this._path = '';\r\n                }\r\n            }\r\n        }\r\n        this._mainTexture = texture;\r\n        this._rate = playbackRate;\r\n        this.parse(skeletonData);\r\n    }\r\n    buildArmature(aniMode = 0) {\r\n        return new Skeleton(this, aniMode);\r\n    }\r\n    parse(data) {\r\n        super.parse(data);\r\n        this.event(Event.LOADED, this);\r\n        if (this._aniVersion === Templet.LAYA_ANIMATION_VISION) {\r\n            this._isParseAudio = true;\r\n        }\r\n        else if (this._aniVersion != Templet.LAYA_ANIMATION_160_VISION) {\r\n            console.log(\"[Error] 版本不一致，请使用IDE版本配套的重新导出\" + this._aniVersion + \"->\" + Templet.LAYA_ANIMATION_VISION);\r\n        }\r\n        if (this._mainTexture) {\r\n            this._parsePublicExtData();\r\n        }\r\n        else {\r\n            this._parseTexturePath();\r\n        }\r\n    }\r\n    _parseTexturePath() {\r\n        if (this._isDestroyed) {\r\n            this.destroy();\r\n            return;\r\n        }\r\n        var i = 0;\r\n        this._loadList = [];\r\n        var tByte = new Byte(this.getPublicExtData());\r\n        var tX = 0, tY = 0, tWidth = 0, tHeight = 0;\r\n        var tFrameX = 0, tFrameY = 0, tFrameWidth = 0, tFrameHeight = 0;\r\n        var tTempleData = 0;\r\n        var tTextureLen = tByte.getInt32();\r\n        var tTextureName = tByte.readUTFString();\r\n        var tTextureNameArr = tTextureName.split(\"\\n\");\r\n        var tSrcTexturePath;\r\n        for (i = 0; i < tTextureLen; i++) {\r\n            tSrcTexturePath = this._path + tTextureNameArr[i * 2];\r\n            tTextureName = tTextureNameArr[i * 2 + 1];\r\n            tX = tByte.getFloat32();\r\n            tY = tByte.getFloat32();\r\n            tWidth = tByte.getFloat32();\r\n            tHeight = tByte.getFloat32();\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameX = isNaN(tTempleData) ? 0 : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameY = isNaN(tTempleData) ? 0 : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameWidth = isNaN(tTempleData) ? tWidth : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameHeight = isNaN(tTempleData) ? tHeight : tTempleData;\r\n            if (this._loadList.indexOf(tSrcTexturePath) == -1) {\r\n                this._loadList.push(tSrcTexturePath);\r\n            }\r\n        }\r\n        ILaya.loader.load(this._loadList, Handler.create(this, this._textureComplete));\r\n    }\r\n    _textureComplete() {\r\n        var tTextureName;\r\n        for (var i = 0, n = this._loadList.length; i < n; i++) {\r\n            tTextureName = this._loadList[i];\r\n            this._textureDic[tTextureName] = ILaya.Loader.getRes(tTextureName);\r\n        }\r\n        this._parsePublicExtData();\r\n    }\r\n    _parsePublicExtData() {\r\n        var i = 0, j = 0, k = 0, l = 0, n = 0;\r\n        for (i = 0, n = this.getAnimationCount(); i < n; i++) {\r\n            this._graphicsCache.push([]);\r\n        }\r\n        var isSpine;\r\n        isSpine = this._aniClassName != \"Dragon\";\r\n        var tByte = new Byte(this.getPublicExtData());\r\n        var tX = 0, tY = 0, tWidth = 0, tHeight = 0;\r\n        var tFrameX = 0, tFrameY = 0, tFrameWidth = 0, tFrameHeight = 0;\r\n        var tTempleData = 0;\r\n        var tTextureLen = tByte.getInt32();\r\n        var tTextureName = tByte.readUTFString();\r\n        var tTextureNameArr = tTextureName.split(\"\\n\");\r\n        var tTexture;\r\n        var tSrcTexturePath;\r\n        for (i = 0; i < tTextureLen; i++) {\r\n            tTexture = this._mainTexture;\r\n            tSrcTexturePath = this._path + tTextureNameArr[i * 2];\r\n            tTextureName = tTextureNameArr[i * 2 + 1];\r\n            if (this._mainTexture == null) {\r\n                tTexture = this._textureDic[tSrcTexturePath];\r\n            }\r\n            if (!tTexture) {\r\n                this.event(Event.ERROR, this);\r\n                this.isParseFail = true;\r\n                return;\r\n            }\r\n            tX = tByte.getFloat32();\r\n            tY = tByte.getFloat32();\r\n            tWidth = tByte.getFloat32();\r\n            tHeight = tByte.getFloat32();\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameX = isNaN(tTempleData) ? 0 : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameY = isNaN(tTempleData) ? 0 : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameWidth = isNaN(tTempleData) ? tWidth : tTempleData;\r\n            tTempleData = tByte.getFloat32();\r\n            tFrameHeight = isNaN(tTempleData) ? tHeight : tTempleData;\r\n            this.subTextureDic[tTextureName] = Texture.create(tTexture, tX, tY, tWidth, tHeight, -tFrameX, -tFrameY, tFrameWidth, tFrameHeight);\r\n        }\r\n        this._mainTexture = tTexture;\r\n        var tAniCount = tByte.getUint16();\r\n        var tSectionArr;\r\n        for (i = 0; i < tAniCount; i++) {\r\n            tSectionArr = [];\r\n            tSectionArr.push(tByte.getUint16());\r\n            tSectionArr.push(tByte.getUint16());\r\n            tSectionArr.push(tByte.getUint16());\r\n            tSectionArr.push(tByte.getUint16());\r\n            this.aniSectionDic[i] = tSectionArr;\r\n        }\r\n        var tBone;\r\n        var tParentBone;\r\n        var tName;\r\n        var tParentName;\r\n        var tBoneLen = tByte.getInt16();\r\n        var tBoneDic = {};\r\n        var tRootBone;\r\n        for (i = 0; i < tBoneLen; i++) {\r\n            tBone = new Bone();\r\n            if (i == 0) {\r\n                tRootBone = tBone;\r\n            }\r\n            else {\r\n                tBone.root = tRootBone;\r\n            }\r\n            tBone.d = isSpine ? -1 : 1;\r\n            tName = tByte.readUTFString();\r\n            tParentName = tByte.readUTFString();\r\n            tBone.length = tByte.getFloat32();\r\n            if (tByte.getByte() == 1) {\r\n                tBone.inheritRotation = false;\r\n            }\r\n            if (tByte.getByte() == 1) {\r\n                tBone.inheritScale = false;\r\n            }\r\n            tBone.name = tName;\r\n            if (tParentName) {\r\n                tParentBone = tBoneDic[tParentName];\r\n                if (tParentBone) {\r\n                    tParentBone.addChild(tBone);\r\n                }\r\n                else {\r\n                    this.mRootBone = tBone;\r\n                }\r\n            }\r\n            tBoneDic[tName] = tBone;\r\n            this.mBoneArr.push(tBone);\r\n        }\r\n        this.tMatrixDataLen = tByte.getUint16();\r\n        var tLen = tByte.getUint16();\r\n        var boneLength = Math.floor(tLen / this.tMatrixDataLen);\r\n        var tResultTransform;\r\n        var tMatrixArray = this.srcBoneMatrixArr;\r\n        for (i = 0; i < boneLength; i++) {\r\n            tResultTransform = new Transform();\r\n            tResultTransform.scX = tByte.getFloat32();\r\n            tResultTransform.skX = tByte.getFloat32();\r\n            tResultTransform.skY = tByte.getFloat32();\r\n            tResultTransform.scY = tByte.getFloat32();\r\n            tResultTransform.x = tByte.getFloat32();\r\n            tResultTransform.y = tByte.getFloat32();\r\n            if (this.tMatrixDataLen === 8) {\r\n                tResultTransform.skewX = tByte.getFloat32();\r\n                tResultTransform.skewY = tByte.getFloat32();\r\n            }\r\n            tMatrixArray.push(tResultTransform);\r\n            tBone = this.mBoneArr[i];\r\n            tBone.transform = tResultTransform;\r\n        }\r\n        var tIkConstraintData;\r\n        var tIkLen = tByte.getUint16();\r\n        var tIkBoneLen;\r\n        for (i = 0; i < tIkLen; i++) {\r\n            tIkConstraintData = new IkConstraintData();\r\n            tIkBoneLen = tByte.getUint16();\r\n            for (j = 0; j < tIkBoneLen; j++) {\r\n                tIkConstraintData.boneNames.push(tByte.readUTFString());\r\n                tIkConstraintData.boneIndexs.push(tByte.getInt16());\r\n            }\r\n            tIkConstraintData.name = tByte.readUTFString();\r\n            tIkConstraintData.targetBoneName = tByte.readUTFString();\r\n            tIkConstraintData.targetBoneIndex = tByte.getInt16();\r\n            tIkConstraintData.bendDirection = tByte.getFloat32();\r\n            tIkConstraintData.mix = tByte.getFloat32();\r\n            tIkConstraintData.isSpine = isSpine;\r\n            this.ikArr.push(tIkConstraintData);\r\n        }\r\n        var tTfConstraintData;\r\n        var tTfLen = tByte.getUint16();\r\n        var tTfBoneLen;\r\n        for (i = 0; i < tTfLen; i++) {\r\n            tTfConstraintData = new TfConstraintData();\r\n            tTfBoneLen = tByte.getUint16();\r\n            for (j = 0; j < tTfBoneLen; j++) {\r\n                tTfConstraintData.boneIndexs.push(tByte.getInt16());\r\n            }\r\n            tTfConstraintData.name = tByte.getUTFString();\r\n            tTfConstraintData.targetIndex = tByte.getInt16();\r\n            tTfConstraintData.rotateMix = tByte.getFloat32();\r\n            tTfConstraintData.translateMix = tByte.getFloat32();\r\n            tTfConstraintData.scaleMix = tByte.getFloat32();\r\n            tTfConstraintData.shearMix = tByte.getFloat32();\r\n            tTfConstraintData.offsetRotation = tByte.getFloat32();\r\n            tTfConstraintData.offsetX = tByte.getFloat32();\r\n            tTfConstraintData.offsetY = tByte.getFloat32();\r\n            tTfConstraintData.offsetScaleX = tByte.getFloat32();\r\n            tTfConstraintData.offsetScaleY = tByte.getFloat32();\r\n            tTfConstraintData.offsetShearY = tByte.getFloat32();\r\n            this.tfArr.push(tTfConstraintData);\r\n        }\r\n        var tPathConstraintData;\r\n        var tPathLen = tByte.getUint16();\r\n        var tPathBoneLen;\r\n        for (i = 0; i < tPathLen; i++) {\r\n            tPathConstraintData = new PathConstraintData();\r\n            tPathConstraintData.name = tByte.readUTFString();\r\n            tPathBoneLen = tByte.getUint16();\r\n            for (j = 0; j < tPathBoneLen; j++) {\r\n                tPathConstraintData.bones.push(tByte.getInt16());\r\n            }\r\n            tPathConstraintData.target = tByte.readUTFString();\r\n            tPathConstraintData.positionMode = tByte.readUTFString();\r\n            tPathConstraintData.spacingMode = tByte.readUTFString();\r\n            tPathConstraintData.rotateMode = tByte.readUTFString();\r\n            tPathConstraintData.offsetRotation = tByte.getFloat32();\r\n            tPathConstraintData.position = tByte.getFloat32();\r\n            tPathConstraintData.spacing = tByte.getFloat32();\r\n            tPathConstraintData.rotateMix = tByte.getFloat32();\r\n            tPathConstraintData.translateMix = tByte.getFloat32();\r\n            this.pathArr.push(tPathConstraintData);\r\n        }\r\n        var tDeformSlotLen;\r\n        var tDeformSlotDisplayLen;\r\n        var tDSlotIndex;\r\n        var tDAttachment;\r\n        var tDeformTimeLen;\r\n        var tDTime;\r\n        var tDeformVecticesLen;\r\n        var tDeformAniData;\r\n        var tDeformSlotData;\r\n        var tDeformSlotDisplayData;\r\n        var tDeformVectices;\r\n        var tDeformAniLen = tByte.getInt16();\r\n        for (i = 0; i < tDeformAniLen; i++) {\r\n            var tDeformSkinLen = tByte.getUint8();\r\n            var tSkinDic = {};\r\n            this.deformAniArr.push(tSkinDic);\r\n            for (var f = 0; f < tDeformSkinLen; f++) {\r\n                tDeformAniData = new DeformAniData();\r\n                tDeformAniData.skinName = tByte.getUTFString();\r\n                tSkinDic[tDeformAniData.skinName] = tDeformAniData;\r\n                tDeformSlotLen = tByte.getInt16();\r\n                for (j = 0; j < tDeformSlotLen; j++) {\r\n                    tDeformSlotData = new DeformSlotData();\r\n                    tDeformAniData.deformSlotDataList.push(tDeformSlotData);\r\n                    tDeformSlotDisplayLen = tByte.getInt16();\r\n                    for (k = 0; k < tDeformSlotDisplayLen; k++) {\r\n                        tDeformSlotDisplayData = new DeformSlotDisplayData();\r\n                        tDeformSlotData.deformSlotDisplayList.push(tDeformSlotDisplayData);\r\n                        tDeformSlotDisplayData.slotIndex = tDSlotIndex = tByte.getInt16();\r\n                        tDeformSlotDisplayData.attachment = tDAttachment = tByte.getUTFString();\r\n                        tDeformTimeLen = tByte.getInt16();\r\n                        for (l = 0; l < tDeformTimeLen; l++) {\r\n                            if (tByte.getByte() == 1) {\r\n                                tDeformSlotDisplayData.tweenKeyList.push(true);\r\n                            }\r\n                            else {\r\n                                tDeformSlotDisplayData.tweenKeyList.push(false);\r\n                            }\r\n                            tDTime = tByte.getFloat32();\r\n                            tDeformSlotDisplayData.timeList.push(tDTime);\r\n                            tDeformVectices = [];\r\n                            tDeformSlotDisplayData.vectices.push(tDeformVectices);\r\n                            tDeformVecticesLen = tByte.getInt16();\r\n                            for (n = 0; n < tDeformVecticesLen; n++) {\r\n                                tDeformVectices.push(tByte.getFloat32());\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var tDrawOrderArr;\r\n        var tDrawOrderAniLen = tByte.getInt16();\r\n        var tDrawOrderLen;\r\n        var tDrawOrderData;\r\n        var tDoLen;\r\n        for (i = 0; i < tDrawOrderAniLen; i++) {\r\n            tDrawOrderLen = tByte.getInt16();\r\n            tDrawOrderArr = [];\r\n            for (j = 0; j < tDrawOrderLen; j++) {\r\n                tDrawOrderData = new DrawOrderData();\r\n                tDrawOrderData.time = tByte.getFloat32();\r\n                tDoLen = tByte.getInt16();\r\n                for (k = 0; k < tDoLen; k++) {\r\n                    tDrawOrderData.drawOrder.push(tByte.getInt16());\r\n                }\r\n                tDrawOrderArr.push(tDrawOrderData);\r\n            }\r\n            this.drawOrderAniArr.push(tDrawOrderArr);\r\n        }\r\n        var tEventArr;\r\n        var tEventAniLen = tByte.getInt16();\r\n        var tEventLen;\r\n        var tEventData;\r\n        for (i = 0; i < tEventAniLen; i++) {\r\n            tEventLen = tByte.getInt16();\r\n            tEventArr = [];\r\n            for (j = 0; j < tEventLen; j++) {\r\n                tEventData = new EventData();\r\n                tEventData.name = tByte.getUTFString();\r\n                if (this._isParseAudio)\r\n                    tEventData.audioValue = tByte.getUTFString();\r\n                tEventData.intValue = tByte.getInt32();\r\n                tEventData.floatValue = tByte.getFloat32();\r\n                tEventData.stringValue = tByte.getUTFString();\r\n                tEventData.time = tByte.getFloat32();\r\n                tEventArr.push(tEventData);\r\n            }\r\n            this.eventAniArr.push(tEventArr);\r\n        }\r\n        var tAttachmentLen = tByte.getInt16();\r\n        if (tAttachmentLen > 0) {\r\n            this.attachmentNames = [];\r\n            for (i = 0; i < tAttachmentLen; i++) {\r\n                this.attachmentNames.push(tByte.getUTFString());\r\n            }\r\n        }\r\n        var tBoneSlotLen = tByte.getInt16();\r\n        var tDBBoneSlot;\r\n        var tDBBoneSlotArr;\r\n        for (i = 0; i < tBoneSlotLen; i++) {\r\n            tDBBoneSlot = new BoneSlot();\r\n            tDBBoneSlot.name = tByte.readUTFString();\r\n            tDBBoneSlot.parent = tByte.readUTFString();\r\n            tDBBoneSlot.attachmentName = tByte.readUTFString();\r\n            tDBBoneSlot.srcDisplayIndex = tDBBoneSlot.displayIndex = tByte.getInt16();\r\n            tDBBoneSlot.templet = this;\r\n            this.boneSlotDic[tDBBoneSlot.name] = tDBBoneSlot;\r\n            tDBBoneSlotArr = this.bindBoneBoneSlotDic[tDBBoneSlot.parent];\r\n            if (tDBBoneSlotArr == null) {\r\n                this.bindBoneBoneSlotDic[tDBBoneSlot.parent] = tDBBoneSlotArr = [];\r\n            }\r\n            tDBBoneSlotArr.push(tDBBoneSlot);\r\n            this.boneSlotArray.push(tDBBoneSlot);\r\n        }\r\n        var tNameString = tByte.readUTFString();\r\n        var tNameArray = tNameString.split(\"\\n\");\r\n        var tNameStartIndex = 0;\r\n        var tSkinDataLen = tByte.getUint8();\r\n        var tSkinData, tSlotData, tDisplayData;\r\n        var tSlotDataLen, tDisplayDataLen;\r\n        var tUvLen, tWeightLen, tTriangleLen, tVerticeLen, tLengthLen;\r\n        for (i = 0; i < tSkinDataLen; i++) {\r\n            tSkinData = new SkinData();\r\n            tSkinData.name = tNameArray[tNameStartIndex++];\r\n            tSlotDataLen = tByte.getUint8();\r\n            for (j = 0; j < tSlotDataLen; j++) {\r\n                tSlotData = new SlotData();\r\n                tSlotData.name = tNameArray[tNameStartIndex++];\r\n                tDBBoneSlot = this.boneSlotDic[tSlotData.name];\r\n                tDisplayDataLen = tByte.getUint8();\r\n                for (k = 0; k < tDisplayDataLen; k++) {\r\n                    tDisplayData = new SkinSlotDisplayData();\r\n                    this.skinSlotDisplayDataArr.push(tDisplayData);\r\n                    tDisplayData.name = tNameArray[tNameStartIndex++];\r\n                    tDisplayData.attachmentName = tNameArray[tNameStartIndex++];\r\n                    tDisplayData.transform = new Transform();\r\n                    tDisplayData.transform.scX = tByte.getFloat32();\r\n                    tDisplayData.transform.skX = tByte.getFloat32();\r\n                    tDisplayData.transform.skY = tByte.getFloat32();\r\n                    tDisplayData.transform.scY = tByte.getFloat32();\r\n                    tDisplayData.transform.x = tByte.getFloat32();\r\n                    tDisplayData.transform.y = tByte.getFloat32();\r\n                    tSlotData.displayArr.push(tDisplayData);\r\n                    tDisplayData.width = tByte.getFloat32();\r\n                    tDisplayData.height = tByte.getFloat32();\r\n                    tDisplayData.type = tByte.getUint8();\r\n                    tDisplayData.verLen = tByte.getUint16();\r\n                    tBoneLen = tByte.getUint16();\r\n                    if (tBoneLen > 0) {\r\n                        tDisplayData.bones = [];\r\n                        for (l = 0; l < tBoneLen; l++) {\r\n                            var tBoneId = tByte.getUint16();\r\n                            tDisplayData.bones.push(tBoneId);\r\n                        }\r\n                    }\r\n                    tUvLen = tByte.getUint16();\r\n                    if (tUvLen > 0) {\r\n                        tDisplayData.uvs = [];\r\n                        for (l = 0; l < tUvLen; l++) {\r\n                            tDisplayData.uvs.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n                    tWeightLen = tByte.getUint16();\r\n                    if (tWeightLen > 0) {\r\n                        tDisplayData.weights = [];\r\n                        for (l = 0; l < tWeightLen; l++) {\r\n                            tDisplayData.weights.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n                    tTriangleLen = tByte.getUint16();\r\n                    if (tTriangleLen > 0) {\r\n                        tDisplayData.triangles = [];\r\n                        for (l = 0; l < tTriangleLen; l++) {\r\n                            tDisplayData.triangles.push(tByte.getUint16());\r\n                        }\r\n                    }\r\n                    tVerticeLen = tByte.getUint16();\r\n                    if (tVerticeLen > 0) {\r\n                        tDisplayData.vertices = [];\r\n                        for (l = 0; l < tVerticeLen; l++) {\r\n                            tDisplayData.vertices.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n                    tLengthLen = tByte.getUint16();\r\n                    if (tLengthLen > 0) {\r\n                        tDisplayData.lengths = [];\r\n                        for (l = 0; l < tLengthLen; l++) {\r\n                            tDisplayData.lengths.push(tByte.getFloat32());\r\n                        }\r\n                    }\r\n                }\r\n                tSkinData.slotArr.push(tSlotData);\r\n            }\r\n            this.skinDic[tSkinData.name] = tSkinData;\r\n            this.skinDataArray.push(tSkinData);\r\n        }\r\n        var tReverse = tByte.getUint8();\r\n        if (tReverse == 1) {\r\n            this.yReverseMatrix = new Matrix(1, 0, 0, -1, 0, 0);\r\n            if (tRootBone) {\r\n                tRootBone.setTempMatrix(this.yReverseMatrix);\r\n            }\r\n        }\r\n        else {\r\n            if (tRootBone) {\r\n                tRootBone.setTempMatrix(new Matrix());\r\n            }\r\n        }\r\n        this.showSkinByIndex(this.boneSlotDic, 0);\r\n        this.isParserComplete = true;\r\n        this.event(Event.COMPLETE, this);\r\n    }\r\n    getTexture(name) {\r\n        var tTexture = this.subTextureDic[name];\r\n        if (!tTexture) {\r\n            tTexture = this.subTextureDic[name.substr(0, name.length - 1)];\r\n        }\r\n        if (tTexture == null) {\r\n            return this._mainTexture;\r\n        }\r\n        return tTexture;\r\n    }\r\n    showSkinByIndex(boneSlotDic, skinIndex, freshDisplayIndex = true) {\r\n        if (skinIndex < 0 && skinIndex >= this.skinDataArray.length)\r\n            return false;\r\n        var i, n;\r\n        var tBoneSlot;\r\n        var tSlotData;\r\n        var tSkinData = this.skinDataArray[skinIndex];\r\n        if (tSkinData) {\r\n            for (i = 0, n = tSkinData.slotArr.length; i < n; i++) {\r\n                tSlotData = tSkinData.slotArr[i];\r\n                if (tSlotData) {\r\n                    tBoneSlot = boneSlotDic[tSlotData.name];\r\n                    if (tBoneSlot) {\r\n                        tBoneSlot.showSlotData(tSlotData, freshDisplayIndex);\r\n                        if (freshDisplayIndex && tBoneSlot.attachmentName != \"undefined\" && tBoneSlot.attachmentName != \"null\") {\r\n                            tBoneSlot.showDisplayByName(tBoneSlot.attachmentName);\r\n                        }\r\n                        else {\r\n                            tBoneSlot.showDisplayByIndex(tBoneSlot.displayIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getSkinIndexByName(skinName) {\r\n        var tSkinData;\r\n        for (var i = 0, n = this.skinDataArray.length; i < n; i++) {\r\n            tSkinData = this.skinDataArray[i];\r\n            if (tSkinData.name == skinName) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    getGrahicsDataWithCache(aniIndex, frameIndex) {\r\n        if (this._graphicsCache[aniIndex] && this._graphicsCache[aniIndex][frameIndex]) {\r\n            return this._graphicsCache[aniIndex][frameIndex];\r\n        }\r\n        return null;\r\n    }\r\n    _setCreateURL(url) {\r\n        this._skBufferUrl = this._relativeUrl = url;\r\n        super._setCreateURL(url);\r\n    }\r\n    setGrahicsDataWithCache(aniIndex, frameIndex, graphics) {\r\n        this._graphicsCache[aniIndex][frameIndex] = graphics;\r\n    }\r\n    deleteAniData(aniIndex) {\r\n        if (this._anis[aniIndex]) {\r\n            var tAniDataO = this._anis[aniIndex];\r\n            tAniDataO.bone3DMap = null;\r\n            tAniDataO.nodes = null;\r\n        }\r\n    }\r\n    destroy() {\r\n        this._isDestroyed = true;\r\n        var tTexture;\r\n        for (tTexture in this.subTextureDic) {\r\n            if (tTexture) {\r\n                this.subTextureDic[tTexture].destroy();\r\n            }\r\n        }\r\n        for (tTexture in this._textureDic) {\r\n            if (tTexture) {\r\n                this._textureDic[tTexture].destroy();\r\n            }\r\n        }\r\n        var tSkinSlotDisplayData;\r\n        for (var i = 0, n = this.skinSlotDisplayDataArr.length; i < n; i++) {\r\n            tSkinSlotDisplayData = this.skinSlotDisplayDataArr[i];\r\n            tSkinSlotDisplayData.destory();\r\n        }\r\n        this.skinSlotDisplayDataArr.length = 0;\r\n        if (this._relativeUrl) {\r\n            delete Templet.TEMPLET_DICTIONARY[this._relativeUrl];\r\n        }\r\n        super.destroy();\r\n        ILaya.loader.clearRes(this._skBufferUrl);\r\n    }\r\n    getAniNameByIndex(index) {\r\n        var tAni = this.getAnimation(index);\r\n        if (tAni)\r\n            return tAni.name;\r\n        return null;\r\n    }\r\n    get rate() {\r\n        return this._rate;\r\n    }\r\n    set rate(v) {\r\n        this._rate = v;\r\n    }\r\n}\r\nTemplet.LAYA_ANIMATION_160_VISION = \"LAYAANIMATION:1.6.0\";\r\nTemplet.LAYA_ANIMATION_VISION = \"LAYAANIMATION:1.7.0\";\r\nIAniLib.Templet = Templet;\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Bone.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/TfConstraintData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/PathConstraintData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/DeformAniData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/DeformSlotData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/DeformSlotDisplayData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/DrawOrderData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/EventData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/AnimationContent.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/AnimationTemplet.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/BoneSlot.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/SkinData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/SkinSlotDisplayData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/SlotData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Transform.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/IkConstraintData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Texture.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Matrix.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Byte.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Graphics.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/AniLibPack.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Skeleton.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Templet.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Bone } from \"./Bone\";\r\nimport { AnimationTemplet } from \"../AnimationTemplet\";\r\nimport { SkinSlotDisplayData } from \"./SkinSlotDisplayData\";\r\nimport { Texture } from \"../../resource/Texture\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Graphics } from \"../../display/Graphics\";\r\nimport { Skeleton } from \"./Skeleton\";\r\nexport declare class Templet extends AnimationTemplet {\r\n    static LAYA_ANIMATION_160_VISION: string;\r\n    static LAYA_ANIMATION_VISION: string;\r\n    static TEMPLET_DICTIONARY: any;\r\n    private _mainTexture;\r\n    private _graphicsCache;\r\n    srcBoneMatrixArr: any[];\r\n    ikArr: any[];\r\n    tfArr: any[];\r\n    pathArr: any[];\r\n    boneSlotDic: any;\r\n    bindBoneBoneSlotDic: any;\r\n    boneSlotArray: any[];\r\n    skinDataArray: any[];\r\n    skinDic: any;\r\n    subTextureDic: any;\r\n    isParseFail: boolean;\r\n    yReverseMatrix: Matrix;\r\n    drawOrderAniArr: any[];\r\n    eventAniArr: any[];\r\n    attachmentNames: any[];\r\n    deformAniArr: any[];\r\n    skinSlotDisplayDataArr: SkinSlotDisplayData[];\r\n    private _isParseAudio;\r\n    private _isDestroyed;\r\n    private _rate;\r\n    isParserComplete: boolean;\r\n    aniSectionDic: any;\r\n    private _skBufferUrl;\r\n    private _textureDic;\r\n    private _loadList;\r\n    private _path;\r\n    private _relativeUrl;\r\n    tMatrixDataLen: number;\r\n    mRootBone: Bone;\r\n    mBoneArr: Bone[];\r\n    loadAni(url: string): void;\r\n    private onComplete;\r\n    parseData(texture: Texture, skeletonData: ArrayBuffer, playbackRate?: number): void;\r\n    buildArmature(aniMode?: number): Skeleton;\r\n    parse(data: ArrayBuffer): void;\r\n    private _parseTexturePath;\r\n    private _textureComplete;\r\n    private _parsePublicExtData;\r\n    getTexture(name: string): Texture;\r\n    showSkinByIndex(boneSlotDic: any, skinIndex: number, freshDisplayIndex?: boolean): boolean;\r\n    getSkinIndexByName(skinName: string): number;\r\n    getGrahicsDataWithCache(aniIndex: number, frameIndex: number): Graphics;\r\n    _setCreateURL(url: string): void;\r\n    setGrahicsDataWithCache(aniIndex: number, frameIndex: number, graphics: Graphics): void;\r\n    deleteAniData(aniIndex: number): void;\r\n    destroy(): void;\r\n    getAniNameByIndex(index: number): string;\r\n    rate: number;\r\n}\r\n"
  }
}

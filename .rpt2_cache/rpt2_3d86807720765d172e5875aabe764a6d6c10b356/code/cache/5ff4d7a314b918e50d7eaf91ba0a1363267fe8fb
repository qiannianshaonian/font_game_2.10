{
  "code": "import { Transform } from \"./Transform\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nexport class Bone {\r\n    constructor() {\r\n        this.length = 10;\r\n        this.resultTransform = new Transform();\r\n        this.resultMatrix = new Matrix();\r\n        this.inheritScale = true;\r\n        this.inheritRotation = true;\r\n        this.d = -1;\r\n        this._children = [];\r\n    }\r\n    setTempMatrix(matrix) {\r\n        this._tempMatrix = matrix;\r\n        var i = 0, n = 0;\r\n        var tBone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.setTempMatrix(this._tempMatrix);\r\n        }\r\n    }\r\n    update(pMatrix = null) {\r\n        this.rotation = this.transform.skX;\r\n        var tResultMatrix;\r\n        if (pMatrix) {\r\n            tResultMatrix = this.resultTransform.getMatrix();\r\n            Matrix.mul(tResultMatrix, pMatrix, this.resultMatrix);\r\n            this.resultRotation = this.rotation;\r\n        }\r\n        else {\r\n            this.resultRotation = this.rotation + this.parentBone.resultRotation;\r\n            if (this.parentBone) {\r\n                if (this.inheritRotation && this.inheritScale) {\r\n                    tResultMatrix = this.resultTransform.getMatrix();\r\n                    Matrix.mul(tResultMatrix, this.parentBone.resultMatrix, this.resultMatrix);\r\n                }\r\n                else {\r\n                    var parent = this.parentBone;\r\n                    var tAngle;\r\n                    var cos;\r\n                    var sin;\r\n                    var tParentMatrix = this.parentBone.resultMatrix;\r\n                    tResultMatrix = this.resultTransform.getMatrix();\r\n                    var worldX = tParentMatrix.a * tResultMatrix.tx + tParentMatrix.c * tResultMatrix.ty + tParentMatrix.tx;\r\n                    var worldY = tParentMatrix.b * tResultMatrix.tx + tParentMatrix.d * tResultMatrix.ty + tParentMatrix.ty;\r\n                    var tTestMatrix = new Matrix();\r\n                    if (this.inheritRotation) {\r\n                        tAngle = Math.atan2(parent.resultMatrix.b, parent.resultMatrix.a);\r\n                        cos = Math.cos(tAngle), sin = Math.sin(tAngle);\r\n                        tTestMatrix.setTo(cos, sin, -sin, cos, 0, 0);\r\n                        Matrix.mul(this._tempMatrix, tTestMatrix, Matrix.TEMP);\r\n                        Matrix.TEMP.copyTo(tTestMatrix);\r\n                        tResultMatrix = this.resultTransform.getMatrix();\r\n                        Matrix.mul(tResultMatrix, tTestMatrix, this.resultMatrix);\r\n                        if (this.resultTransform.scX * this.resultTransform.scY < 0) {\r\n                            this.resultMatrix.rotate(Math.PI * 0.5);\r\n                        }\r\n                        this.resultMatrix.tx = worldX;\r\n                        this.resultMatrix.ty = worldY;\r\n                    }\r\n                    else if (this.inheritScale) {\r\n                        tResultMatrix = this.resultTransform.getMatrix();\r\n                        Matrix.TEMP.identity();\r\n                        Matrix.TEMP.d = this.d;\r\n                        Matrix.mul(tResultMatrix, Matrix.TEMP, this.resultMatrix);\r\n                        this.resultMatrix.tx = worldX;\r\n                        this.resultMatrix.ty = worldY;\r\n                    }\r\n                    else {\r\n                        tResultMatrix = this.resultTransform.getMatrix();\r\n                        Matrix.TEMP.identity();\r\n                        Matrix.TEMP.d = this.d;\r\n                        Matrix.mul(tResultMatrix, Matrix.TEMP, this.resultMatrix);\r\n                        this.resultMatrix.tx = worldX;\r\n                        this.resultMatrix.ty = worldY;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                tResultMatrix = this.resultTransform.getMatrix();\r\n                tResultMatrix.copyTo(this.resultMatrix);\r\n            }\r\n        }\r\n        var i = 0, n = 0;\r\n        var tBone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.update();\r\n        }\r\n    }\r\n    updateChild() {\r\n        var i = 0, n = 0;\r\n        var tBone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.update();\r\n        }\r\n    }\r\n    setRotation(rd) {\r\n        if (this._sprite) {\r\n            this._sprite.rotation = rd * 180 / Math.PI;\r\n        }\r\n    }\r\n    updateDraw(x, y) {\r\n        if (!Bone.ShowBones || Bone.ShowBones[this.name]) {\r\n            if (this._sprite) {\r\n                this._sprite.x = x + this.resultMatrix.tx;\r\n                this._sprite.y = y + this.resultMatrix.ty;\r\n            }\r\n            else {\r\n                this._sprite = new Sprite();\r\n                this._sprite.graphics.drawCircle(0, 0, 5, \"#ff0000\");\r\n                this._sprite.graphics.drawLine(0, 0, this.length, 0, \"#00ff00\");\r\n                this._sprite.graphics.fillText(this.name, 0, 0, \"20px Arial\", \"#00ff00\", \"center\");\r\n                ILaya.stage.addChild(this._sprite);\r\n                this._sprite.x = x + this.resultMatrix.tx;\r\n                this._sprite.y = y + this.resultMatrix.ty;\r\n            }\r\n        }\r\n        var i = 0, n = 0;\r\n        var tBone;\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            tBone = this._children[i];\r\n            tBone.updateDraw(x, y);\r\n        }\r\n    }\r\n    addChild(bone) {\r\n        this._children.push(bone);\r\n        bone.parentBone = this;\r\n    }\r\n    findBone(boneName) {\r\n        if (this.name == boneName) {\r\n            return this;\r\n        }\r\n        else {\r\n            var i, n;\r\n            var tBone;\r\n            var tResult;\r\n            for (i = 0, n = this._children.length; i < n; i++) {\r\n                tBone = this._children[i];\r\n                tResult = tBone.findBone(boneName);\r\n                if (tResult) {\r\n                    return tResult;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    localToWorld(local) {\r\n        var localX = local[0];\r\n        var localY = local[1];\r\n        local[0] = localX * this.resultMatrix.a + localY * this.resultMatrix.c + this.resultMatrix.tx;\r\n        local[1] = localX * this.resultMatrix.b + localY * this.resultMatrix.d + this.resultMatrix.ty;\r\n    }\r\n}\r\nBone.ShowBones = {};\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Transform.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Matrix.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Bone.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Transform } from \"./Transform\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nexport declare class Bone {\r\n    static ShowBones: any;\r\n    name: string;\r\n    root: Bone;\r\n    parentBone: Bone;\r\n    length: number;\r\n    transform: Transform;\r\n    resultTransform: Transform;\r\n    resultMatrix: Matrix;\r\n    inheritScale: boolean;\r\n    inheritRotation: boolean;\r\n    rotation: number;\r\n    resultRotation: number;\r\n    d: number;\r\n    private _tempMatrix;\r\n    private _children;\r\n    private _sprite;\r\n    constructor();\r\n    setTempMatrix(matrix: Matrix): void;\r\n    update(pMatrix?: Matrix | null): void;\r\n    updateChild(): void;\r\n    setRotation(rd: number): void;\r\n    updateDraw(x: number, y: number): void;\r\n    addChild(bone: Bone): void;\r\n    findBone(boneName: string): Bone | null;\r\n    localToWorld(local: number[]): void;\r\n}\r\n"
  }
}

{
  "code": "import { Event } from \"../events/Event\";\r\nimport { AudioSound } from \"./h5audio/AudioSound\";\r\nimport { WebAudioSound } from \"./webaudio/WebAudioSound\";\r\nimport { URL } from \"../net/URL\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class SoundManager {\r\n    static __init__() {\r\n        var win = ILaya.Browser.window;\r\n        var supportWebAudio = win[\"AudioContext\"] || win[\"webkitAudioContext\"] || win[\"mozAudioContext\"] ? true : false;\r\n        if (supportWebAudio)\r\n            WebAudioSound.initWebAudio();\r\n        SoundManager._soundClass = supportWebAudio ? WebAudioSound : AudioSound;\r\n        AudioSound._initMusicAudio();\r\n        SoundManager._musicClass = AudioSound;\r\n        return supportWebAudio;\r\n    }\r\n    static addChannel(channel) {\r\n        if (SoundManager._channels.indexOf(channel) >= 0)\r\n            return;\r\n        SoundManager._channels.push(channel);\r\n    }\r\n    static removeChannel(channel) {\r\n        var i;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            if (SoundManager._channels[i] == channel) {\r\n                SoundManager._channels.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    static disposeSoundLater(url) {\r\n        SoundManager._lastSoundUsedTimeDic[url] = ILaya.Browser.now();\r\n        if (!SoundManager._isCheckingDispose) {\r\n            SoundManager._isCheckingDispose = true;\r\n            ILaya.timer.loop(5000, null, SoundManager._checkDisposeSound);\r\n        }\r\n    }\r\n    static _checkDisposeSound() {\r\n        var key;\r\n        var tTime = ILaya.Browser.now();\r\n        var hasCheck = false;\r\n        for (key in SoundManager._lastSoundUsedTimeDic) {\r\n            if (tTime - SoundManager._lastSoundUsedTimeDic[key] > 30000) {\r\n                delete SoundManager._lastSoundUsedTimeDic[key];\r\n                SoundManager.disposeSoundIfNotUsed(key);\r\n            }\r\n            else {\r\n                hasCheck = true;\r\n            }\r\n        }\r\n        if (!hasCheck) {\r\n            SoundManager._isCheckingDispose = false;\r\n            ILaya.timer.clear(null, SoundManager._checkDisposeSound);\r\n        }\r\n    }\r\n    static disposeSoundIfNotUsed(url) {\r\n        var i;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            if (SoundManager._channels[i].url == url) {\r\n                return;\r\n            }\r\n        }\r\n        SoundManager.destroySound(url);\r\n    }\r\n    static set autoStopMusic(v) {\r\n        ILaya.stage.off(Event.BLUR, null, SoundManager._stageOnBlur);\r\n        ILaya.stage.off(Event.FOCUS, null, SoundManager._stageOnFocus);\r\n        ILaya.stage.off(Event.VISIBILITY_CHANGE, null, SoundManager._visibilityChange);\r\n        SoundManager._autoStopMusic = v;\r\n        if (v) {\r\n            ILaya.stage.on(Event.BLUR, null, SoundManager._stageOnBlur);\r\n            ILaya.stage.on(Event.FOCUS, null, SoundManager._stageOnFocus);\r\n            ILaya.stage.on(Event.VISIBILITY_CHANGE, null, SoundManager._visibilityChange);\r\n        }\r\n    }\r\n    static get autoStopMusic() {\r\n        return SoundManager._autoStopMusic;\r\n    }\r\n    static _visibilityChange() {\r\n        if (ILaya.stage.isVisibility) {\r\n            SoundManager._stageOnFocus();\r\n        }\r\n        else {\r\n            SoundManager._stageOnBlur();\r\n        }\r\n    }\r\n    static _stageOnBlur() {\r\n        SoundManager._isActive = false;\r\n        if (SoundManager._musicChannel) {\r\n            if (!SoundManager._musicChannel.isStopped) {\r\n                SoundManager._blurPaused = true;\r\n                SoundManager._musicChannel.pause();\r\n            }\r\n        }\r\n        SoundManager.stopAllSound();\r\n        ILaya.stage.once(Event.MOUSE_DOWN, null, SoundManager._stageOnFocus);\r\n    }\r\n    static _recoverWebAudio() {\r\n        if (WebAudioSound.ctx && WebAudioSound.ctx.state != \"running\" && WebAudioSound.ctx.resume)\r\n            WebAudioSound.ctx.resume();\r\n    }\r\n    static _stageOnFocus() {\r\n        SoundManager._isActive = true;\r\n        SoundManager._recoverWebAudio();\r\n        ILaya.stage.off(Event.MOUSE_DOWN, null, SoundManager._stageOnFocus);\r\n        if (SoundManager._blurPaused) {\r\n            if (SoundManager._musicChannel && SoundManager._musicChannel.isStopped) {\r\n                SoundManager._blurPaused = false;\r\n                SoundManager._musicChannel.resume();\r\n            }\r\n        }\r\n    }\r\n    static set muted(value) {\r\n        if (value == SoundManager._muted)\r\n            return;\r\n        if (value) {\r\n            SoundManager.stopAllSound();\r\n        }\r\n        SoundManager.musicMuted = value;\r\n        SoundManager._muted = value;\r\n    }\r\n    static get muted() {\r\n        return SoundManager._muted;\r\n    }\r\n    static set soundMuted(value) {\r\n        SoundManager._soundMuted = value;\r\n    }\r\n    static get soundMuted() {\r\n        return SoundManager._soundMuted;\r\n    }\r\n    static set musicMuted(value) {\r\n        if (value == SoundManager._musicMuted)\r\n            return;\r\n        if (value) {\r\n            if (SoundManager._bgMusic) {\r\n                if (SoundManager._musicChannel && !SoundManager._musicChannel.isStopped) {\r\n                    if (ILaya.Render.isConchApp) {\r\n                        if (SoundManager._musicChannel._audio)\r\n                            SoundManager._musicChannel._audio.muted = true;\r\n                        ;\r\n                    }\r\n                    else {\r\n                        SoundManager._musicChannel.pause();\r\n                    }\r\n                }\r\n                else {\r\n                    SoundManager._musicChannel = null;\r\n                }\r\n            }\r\n            else {\r\n                SoundManager._musicChannel = null;\r\n            }\r\n            SoundManager._musicMuted = value;\r\n        }\r\n        else {\r\n            SoundManager._musicMuted = value;\r\n            if (SoundManager._bgMusic) {\r\n                if (SoundManager._musicChannel) {\r\n                    if (ILaya.Render.isConchApp) {\r\n                        if (SoundManager._musicChannel._audio)\r\n                            SoundManager._musicChannel._audio.muted = false;\r\n                        ;\r\n                    }\r\n                    else {\r\n                        SoundManager._musicChannel.resume();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static get musicMuted() {\r\n        return SoundManager._musicMuted;\r\n    }\r\n    static get useAudioMusic() {\r\n        return SoundManager._useAudioMusic;\r\n    }\r\n    static set useAudioMusic(value) {\r\n        SoundManager._useAudioMusic = value;\r\n        if (value) {\r\n            SoundManager._musicClass = AudioSound;\r\n        }\r\n        else {\r\n            SoundManager._musicClass = null;\r\n        }\r\n    }\r\n    static playSound(url, loops = 1, complete = null, soundClass = null, startTime = 0) {\r\n        if (!SoundManager._isActive || !url)\r\n            return null;\r\n        if (SoundManager._muted)\r\n            return null;\r\n        SoundManager._recoverWebAudio();\r\n        url = URL.formatURL(url);\r\n        if (url == SoundManager._bgMusic) {\r\n            if (SoundManager._musicMuted)\r\n                return null;\r\n        }\r\n        else {\r\n            if (ILaya.Render.isConchApp) {\r\n                var ext = Utils.getFileExtension(url);\r\n                if (ext != \"wav\" && ext != \"ogg\") {\r\n                    alert(\"The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document.\");\r\n                    return null;\r\n                }\r\n            }\r\n            if (SoundManager._soundMuted)\r\n                return null;\r\n        }\r\n        var tSound;\r\n        if (!ILaya.Browser.onBDMiniGame && !ILaya.Browser.onMiniGame && !ILaya.Browser.onKGMiniGame && !ILaya.Browser.onQGMiniGame && !ILaya.Browser.onVVMiniGame && !ILaya.Browser.onAlipayMiniGame && !ILaya.Browser.onQQMiniGame && !ILaya.Browser.onBLMiniGame && !ILaya.Browser.onTTMiniGame && !ILaya.Browser.onHWMiniGame && !ILaya.Browser.onTBMiniGame) {\r\n            tSound = ILaya.loader.getRes(url);\r\n        }\r\n        if (!soundClass)\r\n            soundClass = SoundManager._soundClass;\r\n        if (!tSound) {\r\n            tSound = new soundClass();\r\n            tSound.load(url);\r\n            if (!ILaya.Browser.onBDMiniGame && !ILaya.Browser.onMiniGame && !ILaya.Browser.onKGMiniGame && !ILaya.Browser.onQGMiniGame && !ILaya.Browser.onVVMiniGame && !ILaya.Browser.onAlipayMiniGame && !ILaya.Browser.onQQMiniGame && !ILaya.Browser.onBLMiniGame && !ILaya.Browser.onTTMiniGame && !ILaya.Browser.onHWMiniGame && !ILaya.Browser.onTBMiniGame) {\r\n                ILaya.Loader.cacheRes(url, tSound);\r\n            }\r\n        }\r\n        var channel;\r\n        channel = tSound.play(startTime, loops);\r\n        if (!channel)\r\n            return null;\r\n        channel.url = url;\r\n        channel.volume = (url == SoundManager._bgMusic) ? SoundManager.musicVolume : SoundManager.soundVolume;\r\n        channel.completeHandler = complete;\r\n        return channel;\r\n    }\r\n    static destroySound(url) {\r\n        var tSound = ILaya.loader.getRes(url);\r\n        if (tSound) {\r\n            ILaya.Loader.clearRes(url);\r\n            tSound.dispose();\r\n        }\r\n    }\r\n    static playMusic(url, loops = 0, complete = null, startTime = 0) {\r\n        url = URL.formatURL(url);\r\n        SoundManager._bgMusic = url;\r\n        if (SoundManager._musicChannel)\r\n            SoundManager._musicChannel.stop();\r\n        return SoundManager._musicChannel = SoundManager.playSound(url, loops, complete, SoundManager._musicClass, startTime);\r\n    }\r\n    static stopSound(url) {\r\n        url = URL.formatURL(url);\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            if (channel.url == url) {\r\n                channel.stop();\r\n            }\r\n        }\r\n    }\r\n    static stopAll() {\r\n        SoundManager._bgMusic = null;\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            channel.stop();\r\n        }\r\n    }\r\n    static stopAllSound() {\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            if (channel.url != SoundManager._bgMusic) {\r\n                channel.stop();\r\n            }\r\n        }\r\n    }\r\n    static stopMusic() {\r\n        if (SoundManager._musicChannel)\r\n            SoundManager._musicChannel.stop();\r\n        SoundManager._bgMusic = null;\r\n    }\r\n    static setSoundVolume(volume, url = null) {\r\n        if (url) {\r\n            url = URL.formatURL(url);\r\n            SoundManager._setVolume(url, volume);\r\n        }\r\n        else {\r\n            SoundManager.soundVolume = volume;\r\n            var i;\r\n            var channel;\r\n            for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n                channel = SoundManager._channels[i];\r\n                if (channel.url != SoundManager._bgMusic) {\r\n                    channel.volume = volume;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static setMusicVolume(volume) {\r\n        SoundManager.musicVolume = volume;\r\n        SoundManager._setVolume(SoundManager._bgMusic, volume);\r\n    }\r\n    static _setVolume(url, volume) {\r\n        url = URL.formatURL(url);\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            if (channel.url == url) {\r\n                channel.volume = volume;\r\n            }\r\n        }\r\n    }\r\n}\r\nSoundManager.musicVolume = 1;\r\nSoundManager.soundVolume = 1;\r\nSoundManager.playbackRate = 1;\r\nSoundManager._useAudioMusic = true;\r\nSoundManager._muted = false;\r\nSoundManager._soundMuted = false;\r\nSoundManager._musicMuted = false;\r\nSoundManager._bgMusic = null;\r\nSoundManager._musicChannel = null;\r\nSoundManager._channels = [];\r\nSoundManager._blurPaused = false;\r\nSoundManager._isActive = true;\r\nSoundManager._lastSoundUsedTimeDic = {};\r\nSoundManager._isCheckingDispose = false;\r\nSoundManager.autoReleaseSound = true;\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/media/SoundChannel.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/media/h5audio/AudioSound.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/media/webaudio/WebAudioSound.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/net/URL.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Utils.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/media/Sound.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Stage.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/net/LoaderManager.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Timer.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/media/SoundManager.d.ts",
    "writeByteOrderMark": false,
    "text": "import { SoundChannel } from \"./SoundChannel\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class SoundManager {\r\n    static musicVolume: number;\r\n    static soundVolume: number;\r\n    static playbackRate: number;\r\n    private static _useAudioMusic;\r\n    private static _muted;\r\n    private static _soundMuted;\r\n    private static _musicMuted;\r\n    static _bgMusic: string;\r\n    private static _musicChannel;\r\n    private static _channels;\r\n    private static _autoStopMusic;\r\n    private static _blurPaused;\r\n    private static _isActive;\r\n    static _soundClass: new () => any;\r\n    static _musicClass: new () => any;\r\n    private static _lastSoundUsedTimeDic;\r\n    private static _isCheckingDispose;\r\n    static __init__(): boolean;\r\n    static autoReleaseSound: boolean;\r\n    static addChannel(channel: SoundChannel): void;\r\n    static removeChannel(channel: SoundChannel): void;\r\n    static disposeSoundLater(url: string): void;\r\n    private static _checkDisposeSound;\r\n    static disposeSoundIfNotUsed(url: string): void;\r\n    static autoStopMusic: boolean;\r\n    private static _visibilityChange;\r\n    private static _stageOnBlur;\r\n    private static _recoverWebAudio;\r\n    private static _stageOnFocus;\r\n    static muted: boolean;\r\n    static soundMuted: boolean;\r\n    static musicMuted: boolean;\r\n    static useAudioMusic: boolean;\r\n    static playSound(url: string, loops?: number, complete?: Handler, soundClass?: new () => any, startTime?: number): SoundChannel;\r\n    static destroySound(url: string): void;\r\n    static playMusic(url: string, loops?: number, complete?: Handler, startTime?: number): SoundChannel;\r\n    static stopSound(url: string): void;\r\n    static stopAll(): void;\r\n    static stopAllSound(): void;\r\n    static stopMusic(): void;\r\n    static setSoundVolume(volume: number, url?: string): void;\r\n    static setMusicVolume(volume: number): void;\r\n    private static _setVolume;\r\n}\r\n"
  }
}

{
  "code": "import { Point } from \"./Point\";\r\nexport class Bezier {\r\n    constructor() {\r\n        this._controlPoints = [new Point(), new Point(), new Point()];\r\n        this._calFun = this.getPoint2;\r\n    }\r\n    _switchPoint(x, y) {\r\n        var tPoint = this._controlPoints.shift();\r\n        tPoint.setTo(x, y);\r\n        this._controlPoints.push(tPoint);\r\n    }\r\n    getPoint2(t, rst) {\r\n        var p1 = this._controlPoints[0];\r\n        var p2 = this._controlPoints[1];\r\n        var p3 = this._controlPoints[2];\r\n        var lineX = Math.pow((1 - t), 2) * p1.x + 2 * t * (1 - t) * p2.x + Math.pow(t, 2) * p3.x;\r\n        var lineY = Math.pow((1 - t), 2) * p1.y + 2 * t * (1 - t) * p2.y + Math.pow(t, 2) * p3.y;\r\n        rst.push(lineX, lineY);\r\n    }\r\n    getPoint3(t, rst) {\r\n        var p1 = this._controlPoints[0];\r\n        var p2 = this._controlPoints[1];\r\n        var p3 = this._controlPoints[2];\r\n        var p4 = this._controlPoints[3];\r\n        var lineX = Math.pow((1 - t), 3) * p1.x + 3 * p2.x * t * (1 - t) * (1 - t) + 3 * p3.x * t * t * (1 - t) + p4.x * Math.pow(t, 3);\r\n        var lineY = Math.pow((1 - t), 3) * p1.y + 3 * p2.y * t * (1 - t) * (1 - t) + 3 * p3.y * t * t * (1 - t) + p4.y * Math.pow(t, 3);\r\n        rst.push(lineX, lineY);\r\n    }\r\n    insertPoints(count, rst) {\r\n        var i;\r\n        count = count > 0 ? count : 5;\r\n        var dLen;\r\n        dLen = 1 / count;\r\n        for (i = 0; i <= 1; i += dLen) {\r\n            this._calFun(i, rst);\r\n        }\r\n    }\r\n    getBezierPoints(pList, inSertCount = 5, count = 2) {\r\n        var i, len;\r\n        len = pList.length;\r\n        if (len < (count + 1) * 2)\r\n            return [];\r\n        var rst = [];\r\n        switch (count) {\r\n            case 2:\r\n                this._calFun = this.getPoint2;\r\n                break;\r\n            case 3:\r\n                this._calFun = this.getPoint3;\r\n                break;\r\n            default:\r\n                return [];\r\n        }\r\n        while (this._controlPoints.length <= count) {\r\n            this._controlPoints.push(Point.create());\r\n        }\r\n        for (i = 0; i < count * 2; i += 2) {\r\n            this._switchPoint(pList[i], pList[i + 1]);\r\n        }\r\n        for (i = count * 2; i < len; i += 2) {\r\n            this._switchPoint(pList[i], pList[i + 1]);\r\n            if ((i / 2) % count == 0)\r\n                this.insertPoints(inSertCount, rst);\r\n        }\r\n        return rst;\r\n    }\r\n}\r\nBezier.I = new Bezier();\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Point.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Bezier.d.ts",
    "writeByteOrderMark": false,
    "text": "export declare class Bezier {\r\n    static I: Bezier;\r\n    private _controlPoints;\r\n    private _calFun;\r\n    private _switchPoint;\r\n    getPoint2(t: number, rst: any[]): void;\r\n    getPoint3(t: number, rst: any[]): void;\r\n    insertPoints(count: number, rst: any[]): void;\r\n    getBezierPoints(pList: any[], inSertCount?: number, count?: number): any[];\r\n}\r\n"
  }
}

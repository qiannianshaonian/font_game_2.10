{
  "code": "import { ILaya } from \"./../../ILaya\";\r\nimport { Config } from \"./../../Config\";\r\nimport { LayaGL } from \"../layagl/LayaGL\";\r\nimport { Context } from \"../resource/Context\";\r\nimport { WebGL } from \"../webgl/WebGL\";\r\nimport { WebGLContext } from \"../webgl/WebGLContext\";\r\nimport { BlendMode } from \"../webgl/canvas/BlendMode\";\r\nimport { Shader2D } from \"../webgl/shader/d2/Shader2D\";\r\nimport { ShaderDefines2D } from \"../webgl/shader/d2/ShaderDefines2D\";\r\nimport { Value2D } from \"../webgl/shader/d2/value/Value2D\";\r\nimport { Buffer2D } from \"../webgl/utils/Buffer2D\";\r\nimport { SubmitBase } from \"../webgl/submit/SubmitBase\";\r\nimport { LayaGPU } from \"../webgl/LayaGPU\";\r\nimport { Browser } from \"../utils/Browser\";\r\nexport class Render {\r\n    constructor(width, height, mainCanv) {\r\n        this._timeId = 0;\r\n        Render._mainCanvas = mainCanv;\r\n        let source = Render._mainCanvas.source;\r\n        source.id = \"layaCanvas\";\r\n        source.width = width;\r\n        source.height = height;\r\n        if (Render.isConchApp) {\r\n            document.body.appendChild(source);\r\n        }\r\n        this.initRender(Render._mainCanvas, width, height);\r\n        window.requestAnimationFrame(loop);\r\n        function loop(stamp) {\r\n            ILaya.stage._loop();\r\n            window.requestAnimationFrame(loop);\r\n        }\r\n        ILaya.stage.on(\"visibilitychange\", this, this._onVisibilitychange);\r\n    }\r\n    _onVisibilitychange() {\r\n        if (!ILaya.stage.isVisibility) {\r\n            this._timeId = window.setInterval(this._enterFrame, 1000);\r\n        }\r\n        else if (this._timeId != 0) {\r\n            window.clearInterval(this._timeId);\r\n        }\r\n    }\r\n    initRender(canvas, w, h) {\r\n        function getWebGLContext(canvas) {\r\n            var gl;\r\n            var names = [\"webgl2\", \"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n            if (!Config.useWebGL2 || Browser.onBDMiniGame) {\r\n                names.shift();\r\n            }\r\n            for (var i = 0; i < names.length; i++) {\r\n                try {\r\n                    gl = canvas.getContext(names[i], { stencil: Config.isStencil, alpha: Config.isAlpha, antialias: Config.isAntialias, premultipliedAlpha: Config.premultipliedAlpha, preserveDrawingBuffer: Config.preserveDrawingBuffer });\r\n                }\r\n                catch (e) {\r\n                }\r\n                if (gl) {\r\n                    (names[i] === 'webgl2') && (WebGL._isWebGL2 = true);\r\n                    new LayaGL();\r\n                    return gl;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        var gl = LayaGL.instance = WebGLContext.mainContext = getWebGLContext(Render._mainCanvas.source);\r\n        if (!gl)\r\n            return false;\r\n        LayaGL.instance = gl;\r\n        LayaGL.layaGPUInstance = new LayaGPU(gl, WebGL._isWebGL2);\r\n        canvas.size(w, h);\r\n        Context.__init__();\r\n        SubmitBase.__init__();\r\n        var ctx = new Context();\r\n        ctx.isMain = true;\r\n        Render._context = ctx;\r\n        canvas._setContext(ctx);\r\n        ShaderDefines2D.__init__();\r\n        Value2D.__init__();\r\n        Shader2D.__init__();\r\n        Buffer2D.__int__(gl);\r\n        BlendMode._init_(gl);\r\n        return true;\r\n    }\r\n    _enterFrame(e = null) {\r\n        ILaya.stage._loop();\r\n    }\r\n    static get context() {\r\n        return Render._context;\r\n    }\r\n    static get canvas() {\r\n        return Render._mainCanvas.source;\r\n    }\r\n}\r\nRender.supportWebGLPlusAnimation = false;\r\nRender.supportWebGLPlusRendering = false;\r\nRender.isConchApp = false;\r\n{\r\n    Render.isConchApp = (window.conch != null);\r\n    if (Render.isConchApp) {\r\n        Render.supportWebGLPlusRendering = false;\r\n    }\r\n    else if (window.qq != null && window.qq.webglPlus != null) {\r\n        Render.supportWebGLPlusRendering = false;\r\n    }\r\n}\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/Config.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/layagl/LayaGL.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Context.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/HTMLCanvas.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/WebGL.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/WebGLContext.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/canvas/BlendMode.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/shader/d2/Shader2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/shader/d2/ShaderDefines2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/shader/d2/value/Value2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/utils/Buffer2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/submit/SubmitBase.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/LayaGPU.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Browser.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/renders/Render.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Context } from \"../resource/Context\";\r\nimport { HTMLCanvas } from \"../resource/HTMLCanvas\";\r\nexport declare class Render {\r\n    static _context: Context;\r\n    static _mainCanvas: HTMLCanvas;\r\n    static supportWebGLPlusAnimation: boolean;\r\n    static supportWebGLPlusRendering: boolean;\r\n    static isConchApp: boolean;\r\n    static is3DMode: boolean;\r\n    constructor(width: number, height: number, mainCanv: HTMLCanvas);\r\n    private _timeId;\r\n    private _onVisibilitychange;\r\n    initRender(canvas: HTMLCanvas, w: number, h: number): boolean;\r\n    private _enterFrame;\r\n    static readonly context: Context;\r\n    static readonly canvas: any;\r\n}\r\n"
  }
}

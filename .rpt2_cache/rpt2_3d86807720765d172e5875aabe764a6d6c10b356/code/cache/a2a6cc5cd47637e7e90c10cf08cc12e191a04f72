{
  "code": "import { AnimationBase } from \"./AnimationBase\";\r\nimport { MathUtil } from \"../maths/MathUtil\";\r\nimport { Ease } from \"../utils/Ease\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class FrameAnimation extends AnimationBase {\r\n    constructor() {\r\n        super();\r\n        if (FrameAnimation._sortIndexFun === undefined) {\r\n            FrameAnimation._sortIndexFun = MathUtil.sortByKey(\"index\", false, true);\r\n        }\r\n    }\r\n    static _sortIndexFun(objpre, objnext) {\r\n        return objpre.index - objnext.index;\r\n    }\r\n    _setUp(targetDic, animationData) {\r\n        this._targetDic = targetDic;\r\n        this._animationData = animationData;\r\n        this.interval = 1000 / animationData.frameRate;\r\n        if (animationData.parsed) {\r\n            this._count = animationData.count;\r\n            this._labels = animationData.labels;\r\n            this._usedFrames = animationData.animationNewFrames;\r\n        }\r\n        else {\r\n            this._usedFrames = [];\r\n            this._calculateDatas();\r\n            animationData.parsed = true;\r\n            animationData.labels = this._labels;\r\n            animationData.count = this._count;\r\n            animationData.animationNewFrames = this._usedFrames;\r\n        }\r\n    }\r\n    clear() {\r\n        super.clear();\r\n        this._targetDic = null;\r\n        this._animationData = null;\r\n        return this;\r\n    }\r\n    _displayToIndex(value) {\r\n        if (!this._animationData)\r\n            return;\r\n        if (value < 0)\r\n            value = 0;\r\n        if (value > this._count)\r\n            value = this._count;\r\n        var nodes = this._animationData.nodes, i, len = nodes.length;\r\n        for (i = 0; i < len; i++) {\r\n            this._displayNodeToFrame(nodes[i], value);\r\n        }\r\n    }\r\n    _displayNodeToFrame(node, frame, targetDic = null) {\r\n        if (!targetDic)\r\n            targetDic = this._targetDic;\r\n        var target = targetDic[node.target];\r\n        if (!target) {\r\n            return;\r\n        }\r\n        var frames = node.frames, key, propFrames, value;\r\n        var keys = node.keys, i, len = keys.length;\r\n        for (i = 0; i < len; i++) {\r\n            key = keys[i];\r\n            propFrames = frames[key];\r\n            if (propFrames.length > frame) {\r\n                value = propFrames[frame];\r\n            }\r\n            else {\r\n                value = propFrames[propFrames.length - 1];\r\n            }\r\n            target[key] = value;\r\n        }\r\n        var funkeys = node.funkeys;\r\n        len = funkeys.length;\r\n        var funFrames;\r\n        if (len == 0)\r\n            return;\r\n        for (i = 0; i < len; i++) {\r\n            key = funkeys[i];\r\n            funFrames = frames[key];\r\n            if (funFrames[frame] !== undefined) {\r\n                target[key] && target[key].apply(target, funFrames[frame]);\r\n            }\r\n        }\r\n    }\r\n    _calculateDatas() {\r\n        if (!this._animationData)\r\n            return;\r\n        var nodes = this._animationData.nodes, i, len = nodes.length, tNode;\r\n        this._count = 0;\r\n        for (i = 0; i < len; i++) {\r\n            tNode = nodes[i];\r\n            this._calculateKeyFrames(tNode);\r\n        }\r\n        this._count += 1;\r\n    }\r\n    _calculateKeyFrames(node) {\r\n        var keyFrames = node.keyframes, key, tKeyFrames, target = node.target;\r\n        if (!node.frames)\r\n            node.frames = {};\r\n        if (!node.keys)\r\n            node.keys = [];\r\n        else\r\n            node.keys.length = 0;\r\n        if (!node.funkeys)\r\n            node.funkeys = [];\r\n        else\r\n            node.funkeys.length = 0;\r\n        if (!node.initValues)\r\n            node.initValues = {};\r\n        for (key in keyFrames) {\r\n            var isFun = key.indexOf(\"()\") != -1;\r\n            tKeyFrames = keyFrames[key];\r\n            if (isFun)\r\n                key = key.substr(0, key.length - 2);\r\n            if (!node.frames[key]) {\r\n                node.frames[key] = [];\r\n            }\r\n            if (!isFun) {\r\n                if (this._targetDic && this._targetDic[target]) {\r\n                    node.initValues[key] = this._targetDic[target][key];\r\n                }\r\n                tKeyFrames.sort(FrameAnimation._sortIndexFun);\r\n                node.keys.push(key);\r\n                this._calculateNodePropFrames(tKeyFrames, node.frames[key], key, target);\r\n            }\r\n            else {\r\n                node.funkeys.push(key);\r\n                var map = node.frames[key];\r\n                for (var i = 0; i < tKeyFrames.length; i++) {\r\n                    var temp = tKeyFrames[i];\r\n                    map[temp.index] = temp.value;\r\n                    if (temp.index > this._count)\r\n                        this._count = temp.index;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    resetNodes() {\r\n        if (!this._targetDic)\r\n            return;\r\n        if (!this._animationData)\r\n            return;\r\n        var nodes = this._animationData.nodes, i, len = nodes.length;\r\n        var tNode;\r\n        var initValues;\r\n        for (i = 0; i < len; i++) {\r\n            tNode = nodes[i];\r\n            initValues = tNode.initValues;\r\n            if (!initValues)\r\n                continue;\r\n            var target = this._targetDic[tNode.target];\r\n            if (!target)\r\n                continue;\r\n            var key;\r\n            for (key in initValues) {\r\n                target[key] = initValues[key];\r\n            }\r\n        }\r\n    }\r\n    _calculateNodePropFrames(keyframes, frames, key, target) {\r\n        var i, len = keyframes.length - 1;\r\n        frames.length = keyframes[len].index + 1;\r\n        for (i = 0; i < len; i++) {\r\n            this._dealKeyFrame(keyframes[i]);\r\n            this._calculateFrameValues(keyframes[i], keyframes[i + 1], frames);\r\n        }\r\n        if (len == 0) {\r\n            frames[0] = keyframes[0].value;\r\n            if (this._usedFrames)\r\n                this._usedFrames[keyframes[0].index] = true;\r\n        }\r\n        this._dealKeyFrame(keyframes[i]);\r\n    }\r\n    _dealKeyFrame(keyFrame) {\r\n        if (keyFrame.label && keyFrame.label != \"\")\r\n            this.addLabel(keyFrame.label, keyFrame.index);\r\n    }\r\n    _calculateFrameValues(startFrame, endFrame, result) {\r\n        var i, easeFun;\r\n        var start = startFrame.index, end = endFrame.index;\r\n        var startValue = startFrame.value;\r\n        var dValue = endFrame.value - startFrame.value;\r\n        var dLen = end - start;\r\n        var frames = this._usedFrames;\r\n        if (end > this._count)\r\n            this._count = end;\r\n        if (startFrame.tween) {\r\n            easeFun = Ease[startFrame.tweenMethod];\r\n            if (easeFun == null)\r\n                easeFun = Ease.linearNone;\r\n            for (i = start; i < end; i++) {\r\n                result[i] = easeFun(i - start, startValue, dValue, dLen);\r\n                if (frames)\r\n                    frames[i] = true;\r\n            }\r\n        }\r\n        else {\r\n            for (i = start; i < end; i++) {\r\n                result[i] = startValue;\r\n            }\r\n        }\r\n        if (frames) {\r\n            frames[startFrame.index] = true;\r\n            frames[endFrame.index] = true;\r\n        }\r\n        result[endFrame.index] = endFrame.value;\r\n    }\r\n}\r\nClassUtils.regClass(\"laya.display.FrameAnimation\", FrameAnimation);\r\nClassUtils.regClass(\"Laya.FrameAnimation\", FrameAnimation);\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/AnimationBase.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/MathUtil.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Ease.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/FrameAnimation.d.ts",
    "writeByteOrderMark": false,
    "text": "import { AnimationBase } from \"./AnimationBase\";\r\nexport declare class FrameAnimation extends AnimationBase {\r\n    private static _sortIndexFun;\r\n    _targetDic: any;\r\n    _animationData: any;\r\n    protected _usedFrames: any[];\r\n    constructor();\r\n    _setUp(targetDic: any, animationData: any): void;\r\n    clear(): AnimationBase;\r\n    protected _displayToIndex(value: number): void;\r\n    protected _displayNodeToFrame(node: any, frame: number, targetDic?: any): void;\r\n    private _calculateDatas;\r\n    protected _calculateKeyFrames(node: any): void;\r\n    resetNodes(): void;\r\n    private _calculateNodePropFrames;\r\n    private _dealKeyFrame;\r\n    private _calculateFrameValues;\r\n}\r\n"
  }
}

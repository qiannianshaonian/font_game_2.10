{
  "code": "import { Const } from \"../Const\";\r\nimport { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Pool } from \"../utils/Pool\";\r\nimport { Stat } from \"../utils/Stat\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class Node extends EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this._bits = 0;\r\n        this._children = Node.ARRAY_EMPTY;\r\n        this._extUIChild = Node.ARRAY_EMPTY;\r\n        this._parent = null;\r\n        this.name = \"\";\r\n        this.destroyed = false;\r\n        this.createGLBuffer();\r\n    }\r\n    createGLBuffer() {\r\n    }\r\n    _setBit(type, value) {\r\n        if (type === Const.DISPLAY) {\r\n            var preValue = this._getBit(type);\r\n            if (preValue != value)\r\n                this._updateDisplayedInstage();\r\n        }\r\n        if (value)\r\n            this._bits |= type;\r\n        else\r\n            this._bits &= ~type;\r\n    }\r\n    _getBit(type) {\r\n        return (this._bits & type) != 0;\r\n    }\r\n    _setUpNoticeChain() {\r\n        if (this._getBit(Const.DISPLAY))\r\n            this._setBitUp(Const.DISPLAY);\r\n    }\r\n    _setBitUp(type) {\r\n        var ele = this;\r\n        ele._setBit(type, true);\r\n        ele = ele._parent;\r\n        while (ele) {\r\n            if (ele._getBit(type))\r\n                return;\r\n            ele._setBit(type, true);\r\n            ele = ele._parent;\r\n        }\r\n    }\r\n    on(type, caller, listener, args = null) {\r\n        if (type === Event.DISPLAY || type === Event.UNDISPLAY) {\r\n            if (!this._getBit(Const.DISPLAY))\r\n                this._setBitUp(Const.DISPLAY);\r\n        }\r\n        return this._createListener(type, caller, listener, args, false);\r\n    }\r\n    once(type, caller, listener, args = null) {\r\n        if (type === Event.DISPLAY || type === Event.UNDISPLAY) {\r\n            if (!this._getBit(Const.DISPLAY))\r\n                this._setBitUp(Const.DISPLAY);\r\n        }\r\n        return this._createListener(type, caller, listener, args, true);\r\n    }\r\n    destroy(destroyChild = true) {\r\n        this.destroyed = true;\r\n        this._destroyAllComponent();\r\n        this._parent && this._parent.removeChild(this);\r\n        if (this._children) {\r\n            if (destroyChild)\r\n                this.destroyChildren();\r\n            else\r\n                this.removeChildren();\r\n        }\r\n        this.onDestroy();\r\n        this._children = null;\r\n        this.offAll();\r\n    }\r\n    onDestroy() {\r\n    }\r\n    destroyChildren() {\r\n        if (this._children) {\r\n            for (var i = 0, n = this._children.length; i < n; i++) {\r\n                this._children[0].destroy(true);\r\n            }\r\n        }\r\n    }\r\n    addChild(node) {\r\n        if (!node || this.destroyed || node === this)\r\n            return node;\r\n        if (node._zOrder)\r\n            this._setBit(Const.HAS_ZORDER, true);\r\n        if (node._parent === this) {\r\n            var index = this.getChildIndex(node);\r\n            if (index !== this._children.length - 1) {\r\n                this._children.splice(index, 1);\r\n                this._children.push(node);\r\n                this._childChanged();\r\n            }\r\n        }\r\n        else {\r\n            node._parent && node._parent.removeChild(node);\r\n            this._children === Node.ARRAY_EMPTY && (this._children = []);\r\n            this._children.push(node);\r\n            node._setParent(this);\r\n            this._childChanged();\r\n        }\r\n        return node;\r\n    }\r\n    addInputChild(node) {\r\n        if (this._extUIChild == Node.ARRAY_EMPTY) {\r\n            this._extUIChild = [node];\r\n        }\r\n        else {\r\n            if (this._extUIChild.indexOf(node) >= 0) {\r\n                return null;\r\n            }\r\n            this._extUIChild.push(node);\r\n        }\r\n        return null;\r\n    }\r\n    removeInputChild(node) {\r\n        var idx = this._extUIChild.indexOf(node);\r\n        if (idx >= 0) {\r\n            this._extUIChild.splice(idx, 1);\r\n        }\r\n    }\r\n    addChildren(...args) {\r\n        var i = 0, n = args.length;\r\n        while (i < n) {\r\n            this.addChild(args[i++]);\r\n        }\r\n    }\r\n    addChildAt(node, index) {\r\n        if (!node || this.destroyed || node === this)\r\n            return node;\r\n        if (node._zOrder)\r\n            this._setBit(Const.HAS_ZORDER, true);\r\n        if (index >= 0 && index <= this._children.length) {\r\n            if (node._parent === this) {\r\n                var oldIndex = this.getChildIndex(node);\r\n                this._children.splice(oldIndex, 1);\r\n                this._children.splice(index, 0, node);\r\n                this._childChanged();\r\n            }\r\n            else {\r\n                node._parent && node._parent.removeChild(node);\r\n                this._children === Node.ARRAY_EMPTY && (this._children = []);\r\n                this._children.splice(index, 0, node);\r\n                node._setParent(this);\r\n            }\r\n            return node;\r\n        }\r\n        else {\r\n            throw new Error(\"appendChildAt:The index is out of bounds\");\r\n        }\r\n    }\r\n    getChildIndex(node) {\r\n        return this._children.indexOf(node);\r\n    }\r\n    getChildByName(name) {\r\n        var nodes = this._children;\r\n        if (nodes) {\r\n            for (var i = 0, n = nodes.length; i < n; i++) {\r\n                var node = nodes[i];\r\n                if (node.name === name)\r\n                    return node;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getChildAt(index) {\r\n        return this._children[index] || null;\r\n    }\r\n    setChildIndex(node, index) {\r\n        var childs = this._children;\r\n        if (index < 0 || index >= childs.length) {\r\n            throw new Error(\"setChildIndex:The index is out of bounds.\");\r\n        }\r\n        var oldIndex = this.getChildIndex(node);\r\n        if (oldIndex < 0)\r\n            throw new Error(\"setChildIndex:node is must child of this object.\");\r\n        childs.splice(oldIndex, 1);\r\n        childs.splice(index, 0, node);\r\n        this._childChanged();\r\n        return node;\r\n    }\r\n    _childChanged(child = null) {\r\n    }\r\n    removeChild(node) {\r\n        if (!this._children)\r\n            return node;\r\n        var index = this._children.indexOf(node);\r\n        return this.removeChildAt(index);\r\n    }\r\n    removeSelf() {\r\n        this._parent && this._parent.removeChild(this);\r\n        return this;\r\n    }\r\n    removeChildByName(name) {\r\n        var node = this.getChildByName(name);\r\n        node && this.removeChild(node);\r\n        return node;\r\n    }\r\n    removeChildAt(index) {\r\n        var node = this.getChildAt(index);\r\n        if (node) {\r\n            this._children.splice(index, 1);\r\n            node._setParent(null);\r\n        }\r\n        return node;\r\n    }\r\n    removeChildren(beginIndex = 0, endIndex = 0x7fffffff) {\r\n        if (this._children && this._children.length > 0) {\r\n            var childs = this._children;\r\n            if (beginIndex === 0 && endIndex >= childs.length - 1) {\r\n                var arr = childs;\r\n                this._children = Node.ARRAY_EMPTY;\r\n            }\r\n            else {\r\n                arr = childs.splice(beginIndex, endIndex - beginIndex + 1);\r\n            }\r\n            for (var i = 0, n = arr.length; i < n; i++) {\r\n                arr[i]._setParent(null);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    replaceChild(newNode, oldNode) {\r\n        var index = this._children.indexOf(oldNode);\r\n        if (index > -1) {\r\n            this._children.splice(index, 1, newNode);\r\n            oldNode._setParent(null);\r\n            newNode._setParent(this);\r\n            return newNode;\r\n        }\r\n        return null;\r\n    }\r\n    get numChildren() {\r\n        return this._children.length;\r\n    }\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n    _setParent(value) {\r\n        if (this._parent !== value) {\r\n            if (value) {\r\n                this._parent = value;\r\n                this._onAdded();\r\n                this.event(Event.ADDED);\r\n                if (this._getBit(Const.DISPLAY)) {\r\n                    this._setUpNoticeChain();\r\n                    value.displayedInStage && this._displayChild(this, true);\r\n                }\r\n                value._childChanged(this);\r\n            }\r\n            else {\r\n                this._onRemoved();\r\n                this.event(Event.REMOVED);\r\n                this._parent._childChanged();\r\n                if (this._getBit(Const.DISPLAY))\r\n                    this._displayChild(this, false);\r\n                this._parent = value;\r\n            }\r\n        }\r\n    }\r\n    get displayedInStage() {\r\n        if (this._getBit(Const.DISPLAY))\r\n            return this._getBit(Const.DISPLAYED_INSTAGE);\r\n        this._setBitUp(Const.DISPLAY);\r\n        return this._getBit(Const.DISPLAYED_INSTAGE);\r\n    }\r\n    _updateDisplayedInstage() {\r\n        var ele;\r\n        ele = this;\r\n        var stage = ILaya.stage;\r\n        var displayedInStage = false;\r\n        while (ele) {\r\n            if (ele._getBit(Const.DISPLAY)) {\r\n                displayedInStage = ele._getBit(Const.DISPLAYED_INSTAGE);\r\n                break;\r\n            }\r\n            if (ele === stage || ele._getBit(Const.DISPLAYED_INSTAGE)) {\r\n                displayedInStage = true;\r\n                break;\r\n            }\r\n            ele = ele._parent;\r\n        }\r\n        this._setBit(Const.DISPLAYED_INSTAGE, displayedInStage);\r\n    }\r\n    _setDisplay(value) {\r\n        if (this._getBit(Const.DISPLAYED_INSTAGE) !== value) {\r\n            this._setBit(Const.DISPLAYED_INSTAGE, value);\r\n            if (value)\r\n                this.event(Event.DISPLAY);\r\n            else\r\n                this.event(Event.UNDISPLAY);\r\n        }\r\n    }\r\n    _displayChild(node, display) {\r\n        var childs = node._children;\r\n        if (childs) {\r\n            for (var i = 0, n = childs.length; i < n; i++) {\r\n                var child = childs[i];\r\n                if (!child._getBit(Const.DISPLAY))\r\n                    continue;\r\n                if (child._children.length > 0) {\r\n                    this._displayChild(child, display);\r\n                }\r\n                else {\r\n                    child._setDisplay(display);\r\n                }\r\n            }\r\n        }\r\n        node._setDisplay(display);\r\n    }\r\n    contains(node) {\r\n        if (node === this)\r\n            return true;\r\n        while (node) {\r\n            if (node._parent === this)\r\n                return true;\r\n            node = node._parent;\r\n        }\r\n        return false;\r\n    }\r\n    timerLoop(delay, caller, method, args = null, coverBefore = true, jumpFrame = false) {\r\n        var timer = this.scene ? this.scene.timer : ILaya.timer;\r\n        timer.loop(delay, caller, method, args, coverBefore, jumpFrame);\r\n    }\r\n    timerOnce(delay, caller, method, args = null, coverBefore = true) {\r\n        var timer = this.scene ? this.scene.timer : ILaya.timer;\r\n        timer._create(false, false, delay, caller, method, args, coverBefore);\r\n    }\r\n    frameLoop(delay, caller, method, args = null, coverBefore = true) {\r\n        var timer = this.scene ? this.scene.timer : ILaya.timer;\r\n        timer._create(true, true, delay, caller, method, args, coverBefore);\r\n    }\r\n    frameOnce(delay, caller, method, args = null, coverBefore = true) {\r\n        var timer = this.scene ? this.scene.timer : ILaya.timer;\r\n        timer._create(true, false, delay, caller, method, args, coverBefore);\r\n    }\r\n    clearTimer(caller, method) {\r\n        var timer = this.scene ? this.scene.timer : ILaya.timer;\r\n        timer.clear(caller, method);\r\n    }\r\n    callLater(method, args = null) {\r\n        var timer = this.scene ? this.scene.timer : ILaya.timer;\r\n        timer.callLater(this, method, args);\r\n    }\r\n    runCallLater(method) {\r\n        var timer = this.scene ? this.scene.timer : ILaya.timer;\r\n        timer.runCallLater(this, method);\r\n    }\r\n    get scene() {\r\n        return this._scene;\r\n    }\r\n    get active() {\r\n        return !this._getBit(Const.NOT_READY) && !this._getBit(Const.NOT_ACTIVE);\r\n    }\r\n    set active(value) {\r\n        value = !!value;\r\n        if (!this._getBit(Const.NOT_ACTIVE) !== value) {\r\n            if (this._activeChangeScripts && this._activeChangeScripts.length !== 0) {\r\n                if (value)\r\n                    throw \"Node: can't set the main inActive node active in hierarchy,if the operate is in main inActive node or it's children script's onDisable Event.\";\r\n                else\r\n                    throw \"Node: can't set the main active node inActive in hierarchy,if the operate is in main active node or it's children script's onEnable Event.\";\r\n            }\r\n            else {\r\n                this._setBit(Const.NOT_ACTIVE, !value);\r\n                if (this._parent) {\r\n                    if (this._parent.activeInHierarchy) {\r\n                        if (value)\r\n                            this._processActive();\r\n                        else\r\n                            this._processInActive();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    get activeInHierarchy() {\r\n        return this._getBit(Const.ACTIVE_INHIERARCHY);\r\n    }\r\n    _onActive() {\r\n        Stat.spriteCount++;\r\n    }\r\n    _onInActive() {\r\n        Stat.spriteCount--;\r\n    }\r\n    _onActiveInScene() {\r\n    }\r\n    _onInActiveInScene() {\r\n    }\r\n    _parse(data, spriteMap) {\r\n    }\r\n    _setBelongScene(scene) {\r\n        if (!this._scene) {\r\n            this._scene = scene;\r\n            this._onActiveInScene();\r\n            for (var i = 0, n = this._children.length; i < n; i++)\r\n                this._children[i]._setBelongScene(scene);\r\n        }\r\n    }\r\n    _setUnBelongScene() {\r\n        if (this._scene !== this) {\r\n            this._onInActiveInScene();\r\n            this._scene = null;\r\n            for (var i = 0, n = this._children.length; i < n; i++)\r\n                this._children[i]._setUnBelongScene();\r\n        }\r\n    }\r\n    onAwake() {\r\n    }\r\n    onEnable() {\r\n    }\r\n    _processActive() {\r\n        (this._activeChangeScripts) || (this._activeChangeScripts = []);\r\n        this._activeHierarchy(this._activeChangeScripts);\r\n        this._activeScripts();\r\n    }\r\n    _activeHierarchy(activeChangeScripts) {\r\n        this._setBit(Const.ACTIVE_INHIERARCHY, true);\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                if (comp._isScript())\r\n                    (comp._enabled) && (activeChangeScripts.push(comp));\r\n                else\r\n                    comp._setActive(true);\r\n            }\r\n        }\r\n        this._onActive();\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            var child = this._children[i];\r\n            (!child._getBit(Const.NOT_ACTIVE) && !child._getBit(Const.NOT_READY)) && (child._activeHierarchy(activeChangeScripts));\r\n        }\r\n        if (!this._getBit(Const.AWAKED)) {\r\n            this._setBit(Const.AWAKED, true);\r\n            this.onAwake();\r\n        }\r\n        this.onEnable();\r\n    }\r\n    _activeScripts() {\r\n        for (var i = 0, n = this._activeChangeScripts.length; i < n; i++) {\r\n            var comp = this._activeChangeScripts[i];\r\n            if (!comp._awaked) {\r\n                comp._awaked = true;\r\n                comp._onAwake();\r\n            }\r\n            comp._onEnable();\r\n        }\r\n        this._activeChangeScripts.length = 0;\r\n    }\r\n    _processInActive() {\r\n        (this._activeChangeScripts) || (this._activeChangeScripts = []);\r\n        this._inActiveHierarchy(this._activeChangeScripts);\r\n        this._inActiveScripts();\r\n    }\r\n    _inActiveHierarchy(activeChangeScripts) {\r\n        this._onInActive();\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                (!comp._isScript()) && comp._setActive(false);\r\n                (comp._isScript() && comp._enabled) && (activeChangeScripts.push(comp));\r\n            }\r\n        }\r\n        this._setBit(Const.ACTIVE_INHIERARCHY, false);\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            var child = this._children[i];\r\n            (child && !child._getBit(Const.NOT_ACTIVE)) && (child._inActiveHierarchy(activeChangeScripts));\r\n        }\r\n        this.onDisable();\r\n    }\r\n    _inActiveScripts() {\r\n        for (var i = 0, n = this._activeChangeScripts.length; i < n; i++)\r\n            this._activeChangeScripts[i].onDisable();\r\n        this._activeChangeScripts.length = 0;\r\n    }\r\n    onDisable() {\r\n    }\r\n    _onAdded() {\r\n        if (this._activeChangeScripts && this._activeChangeScripts.length !== 0) {\r\n            throw \"Node: can't set the main inActive node active in hierarchy,if the operate is in main inActive node or it's children script's onDisable Event.\";\r\n        }\r\n        else {\r\n            var parentScene = this._parent.scene;\r\n            parentScene && this._setBelongScene(parentScene);\r\n            (this._parent.activeInHierarchy && this.active) && this._processActive();\r\n        }\r\n    }\r\n    _onRemoved() {\r\n        if (this._activeChangeScripts && this._activeChangeScripts.length !== 0) {\r\n            throw \"Node: can't set the main active node inActive in hierarchy,if the operate is in main active node or it's children script's onEnable Event.\";\r\n        }\r\n        else {\r\n            (this._parent.activeInHierarchy && this.active) && this._processInActive();\r\n            this._parent.scene && this._setUnBelongScene();\r\n        }\r\n    }\r\n    _addComponentInstance(comp) {\r\n        this._components = this._components || [];\r\n        this._components.push(comp);\r\n        comp.owner = this;\r\n        comp._onAdded();\r\n        if (this.activeInHierarchy)\r\n            comp._setActive(true);\r\n    }\r\n    _destroyComponent(comp) {\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var item = this._components[i];\r\n                if (item === comp) {\r\n                    item._destroy();\r\n                    this._components.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _destroyAllComponent() {\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var item = this._components[i];\r\n                item && item._destroy();\r\n            }\r\n            this._components.length = 0;\r\n        }\r\n    }\r\n    _cloneTo(destObject, srcRoot, dstRoot) {\r\n        var destNode = destObject;\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var destComponent = destNode.addComponent(this._components[i].constructor);\r\n                this._components[i]._cloneTo(destComponent);\r\n            }\r\n        }\r\n    }\r\n    addComponentIntance(component) {\r\n        if (component.owner)\r\n            throw \"Node:the component has belong to other node.\";\r\n        if (component.isSingleton && this.getComponent(component.constructor))\r\n            throw \"Node:the component is singleton,can't add the second one.\";\r\n        this._addComponentInstance(component);\r\n        return component;\r\n    }\r\n    addComponent(componentType) {\r\n        var comp = Pool.createByClass(componentType);\r\n        comp._destroyed = false;\r\n        if (comp.isSingleton && this.getComponent(componentType))\r\n            throw \"无法实例\" + componentType + \"组件\" + \"，\" + componentType + \"组件已存在！\";\r\n        this._addComponentInstance(comp);\r\n        return comp;\r\n    }\r\n    getComponent(componentType) {\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                if (comp instanceof componentType)\r\n                    return comp;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getComponents(componentType) {\r\n        var arr;\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                if (comp instanceof componentType) {\r\n                    arr = arr || [];\r\n                    arr.push(comp);\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    get timer() {\r\n        return this.scene ? this.scene.timer : ILaya.timer;\r\n    }\r\n}\r\nNode.ARRAY_EMPTY = [];\r\nClassUtils.regClass(\"laya.display.Node\", Node);\r\nClassUtils.regClass(\"Laya.Node\", Node);\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/Const.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/components/Component.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/events/EventDispatcher.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Pool.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Stat.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Timer.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Node.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Component } from \"../components/Component\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Timer } from \"../utils/Timer\";\r\nexport declare class Node extends EventDispatcher {\r\n    protected static ARRAY_EMPTY: any[];\r\n    private _bits;\r\n    _children: any[];\r\n    _extUIChild: any[];\r\n    _parent: Node;\r\n    name: string;\r\n    destroyed: boolean;\r\n    _conchData: any;\r\n    constructor();\r\n    createGLBuffer(): void;\r\n    _setBit(type: number, value: boolean): void;\r\n    _getBit(type: number): boolean;\r\n    _setUpNoticeChain(): void;\r\n    _setBitUp(type: number): void;\r\n    on(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;\r\n    once(type: string, caller: any, listener: Function, args?: any[]): EventDispatcher;\r\n    destroy(destroyChild?: boolean): void;\r\n    onDestroy(): void;\r\n    destroyChildren(): void;\r\n    addChild(node: Node): Node;\r\n    addInputChild(node: Node): Node;\r\n    removeInputChild(node: Node): void;\r\n    addChildren(...args: any[]): void;\r\n    addChildAt(node: Node, index: number): Node;\r\n    getChildIndex(node: Node): number;\r\n    getChildByName(name: string): Node;\r\n    getChildAt(index: number): Node;\r\n    setChildIndex(node: Node, index: number): Node;\r\n    protected _childChanged(child?: Node): void;\r\n    removeChild(node: Node): Node;\r\n    removeSelf(): Node;\r\n    removeChildByName(name: string): Node;\r\n    removeChildAt(index: number): Node;\r\n    removeChildren(beginIndex?: number, endIndex?: number): Node;\r\n    replaceChild(newNode: Node, oldNode: Node): Node;\r\n    readonly numChildren: number;\r\n    readonly parent: Node;\r\n    protected _setParent(value: Node): void;\r\n    readonly displayedInStage: boolean;\r\n    private _updateDisplayedInstage;\r\n    _setDisplay(value: boolean): void;\r\n    private _displayChild;\r\n    contains(node: Node): boolean;\r\n    timerLoop(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean, jumpFrame?: boolean): void;\r\n    timerOnce(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;\r\n    frameLoop(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;\r\n    frameOnce(delay: number, caller: any, method: Function, args?: any[], coverBefore?: boolean): void;\r\n    clearTimer(caller: any, method: Function): void;\r\n    callLater(method: Function, args?: any[]): void;\r\n    runCallLater(method: Function): void;\r\n    private _components;\r\n    private _activeChangeScripts;\r\n    _scene: Node;\r\n    readonly scene: any;\r\n    active: boolean;\r\n    readonly activeInHierarchy: boolean;\r\n    protected _onActive(): void;\r\n    protected _onInActive(): void;\r\n    protected _onActiveInScene(): void;\r\n    protected _onInActiveInScene(): void;\r\n    _parse(data: any, spriteMap: any): void;\r\n    _setBelongScene(scene: Node): void;\r\n    _setUnBelongScene(): void;\r\n    onAwake(): void;\r\n    onEnable(): void;\r\n    _processActive(): void;\r\n    _activeHierarchy(activeChangeScripts: any[]): void;\r\n    private _activeScripts;\r\n    private _processInActive;\r\n    _inActiveHierarchy(activeChangeScripts: any[]): void;\r\n    private _inActiveScripts;\r\n    onDisable(): void;\r\n    protected _onAdded(): void;\r\n    protected _onRemoved(): void;\r\n    _addComponentInstance(comp: Component): void;\r\n    _destroyComponent(comp: Component): void;\r\n    _destroyAllComponent(): void;\r\n    _cloneTo(destObject: any, srcRoot: Node, dstRoot: Node): void;\r\n    addComponentIntance(component: Component): any;\r\n    addComponent(componentType: typeof Component): any;\r\n    getComponent(componentType: typeof Component): any;\r\n    getComponents(componentType: typeof Component): any[];\r\n    readonly timer: Timer;\r\n}\r\n"
  }
}

{
  "code": "import { Event as LayaEvent } from \"../../events/Event\";\r\nimport { SoundChannel } from \"../SoundChannel\";\r\nimport { Browser } from \"../../utils/Browser\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nexport class AudioSoundChannel extends SoundChannel {\r\n    constructor(audio) {\r\n        super();\r\n        this._audio = null;\r\n        this._onEnd = this.__onEnd.bind(this);\r\n        this._resumePlay = this.__resumePlay.bind(this);\r\n        audio.addEventListener(\"ended\", this._onEnd);\r\n        this._audio = audio;\r\n    }\r\n    __onEnd(evt) {\r\n        if (this.loops == 1) {\r\n            if (this.completeHandler) {\r\n                ILaya.systemTimer.once(10, this, this.__runComplete, [this.completeHandler], false);\r\n                this.completeHandler = null;\r\n            }\r\n            this.stop();\r\n            this.event(LayaEvent.COMPLETE);\r\n            return;\r\n        }\r\n        if (this.loops > 0) {\r\n            this.loops--;\r\n        }\r\n        this.startTime = 0;\r\n        this.play();\r\n    }\r\n    __resumePlay() {\r\n        if (this._audio)\r\n            this._audio.removeEventListener(\"canplay\", this._resumePlay);\r\n        if (this.isStopped)\r\n            return;\r\n        try {\r\n            this._audio.currentTime = this.startTime;\r\n            Browser.container.appendChild(this._audio);\r\n            this._audio.play();\r\n        }\r\n        catch (e) {\r\n            this.event(LayaEvent.ERROR);\r\n        }\r\n    }\r\n    play() {\r\n        this.isStopped = false;\r\n        try {\r\n            this._audio.playbackRate = ILaya.SoundManager.playbackRate;\r\n            this._audio.currentTime = this.startTime;\r\n        }\r\n        catch (e) {\r\n            this._audio.addEventListener(\"canplay\", this._resumePlay);\r\n            return;\r\n        }\r\n        ILaya.SoundManager.addChannel(this);\r\n        Browser.container.appendChild(this._audio);\r\n        if (\"play\" in this._audio)\r\n            this._audio.play();\r\n    }\r\n    get position() {\r\n        if (!this._audio)\r\n            return 0;\r\n        return this._audio.currentTime;\r\n    }\r\n    get duration() {\r\n        if (!this._audio)\r\n            return 0;\r\n        return this._audio.duration;\r\n    }\r\n    stop() {\r\n        super.stop();\r\n        this.isStopped = true;\r\n        ILaya.SoundManager.removeChannel(this);\r\n        this.completeHandler = null;\r\n        if (!this._audio)\r\n            return;\r\n        if (\"pause\" in this._audio)\r\n            if (ILaya.Render.isConchApp) {\r\n                this._audio.stop();\r\n            }\r\n        this._audio.pause();\r\n        this._audio.removeEventListener(\"ended\", this._onEnd);\r\n        this._audio.removeEventListener(\"canplay\", this._resumePlay);\r\n        if (!ILaya.Browser.onIE) {\r\n            if (this._audio != ILaya.AudioSound._musicAudio) {\r\n                ILaya.Pool.recover(\"audio:\" + this.url, this._audio);\r\n            }\r\n        }\r\n        Browser.removeElement(this._audio);\r\n        this._audio = null;\r\n        if (ILaya.SoundManager.autoReleaseSound)\r\n            ILaya.SoundManager.disposeSoundLater(this.url);\r\n    }\r\n    pause() {\r\n        this.isStopped = true;\r\n        ILaya.SoundManager.removeChannel(this);\r\n        if (\"pause\" in this._audio)\r\n            this._audio.pause();\r\n        if (ILaya.SoundManager.autoReleaseSound)\r\n            ILaya.SoundManager.disposeSoundLater(this.url);\r\n    }\r\n    resume() {\r\n        var audio = this._audio;\r\n        if (!audio)\r\n            return;\r\n        this.isStopped = false;\r\n        if (audio.readyState == 0) {\r\n            audio.src = this.url;\r\n            audio.addEventListener(\"canplay\", this._resumePlay);\r\n            audio.load();\r\n        }\r\n        ILaya.SoundManager.addChannel(this);\r\n        if (\"play\" in audio) {\r\n            audio.play();\r\n        }\r\n    }\r\n    set volume(v) {\r\n        if (!this._audio)\r\n            return;\r\n        this._audio.volume = v;\r\n    }\r\n    get volume() {\r\n        if (!this._audio)\r\n            return 1;\r\n        return this._audio.volume;\r\n    }\r\n}\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/media/SoundChannel.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/renders/Render.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Browser.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/media/h5audio/AudioSoundChannel.d.ts",
    "writeByteOrderMark": false,
    "text": "import { SoundChannel } from \"../SoundChannel\";\r\nexport declare class AudioSoundChannel extends SoundChannel {\r\n    private _audio;\r\n    private _onEnd;\r\n    private _resumePlay;\r\n    constructor(audio: HTMLAudioElement);\r\n    private __onEnd;\r\n    private __resumePlay;\r\n    play(): void;\r\n    readonly position: number;\r\n    readonly duration: number;\r\n    stop(): void;\r\n    pause(): void;\r\n    resume(): void;\r\n    volume: number;\r\n}\r\n"
  }
}

{
  "code": "import { UVTools } from \"./UVTools\";\r\nimport { SkinMeshForGraphic } from \"./canvasmesh/SkinMeshForGraphic\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nexport class BoneSlot {\r\n    constructor() {\r\n        this.srcDisplayIndex = -1;\r\n        this.type = \"src\";\r\n        this.displayIndex = -1;\r\n        this.originalIndex = -1;\r\n        this._replaceDic = {};\r\n    }\r\n    showSlotData(slotData, freshIndex = true) {\r\n        this.currSlotData = slotData;\r\n        if (freshIndex)\r\n            this.displayIndex = this.srcDisplayIndex;\r\n        this.currDisplayData = null;\r\n        this.currTexture = null;\r\n    }\r\n    showDisplayByName(name) {\r\n        if (this.currSlotData) {\r\n            this.showDisplayByIndex(this.currSlotData.getDisplayByName(name));\r\n        }\r\n    }\r\n    replaceDisplayByName(tarName, newName) {\r\n        if (!this.currSlotData)\r\n            return;\r\n        var preIndex;\r\n        preIndex = this.currSlotData.getDisplayByName(tarName);\r\n        var newIndex;\r\n        newIndex = this.currSlotData.getDisplayByName(newName);\r\n        this.replaceDisplayByIndex(preIndex, newIndex);\r\n    }\r\n    replaceDisplayByIndex(tarIndex, newIndex) {\r\n        if (!this.currSlotData)\r\n            return;\r\n        this._replaceDic[tarIndex] = newIndex;\r\n        if (this.originalIndex == tarIndex) {\r\n            this.showDisplayByIndex(tarIndex);\r\n        }\r\n    }\r\n    showDisplayByIndex(index) {\r\n        this.originalIndex = index;\r\n        if (this._replaceDic[index] != null)\r\n            index = this._replaceDic[index];\r\n        if (this.currSlotData && index > -1 && index < this.currSlotData.displayArr.length) {\r\n            this.displayIndex = index;\r\n            this.currDisplayData = this.currSlotData.displayArr[index];\r\n            if (this.currDisplayData) {\r\n                var tName = this.currDisplayData.name;\r\n                this.currTexture = this.templet.getTexture(tName);\r\n                if (this.currTexture && this.currDisplayData.type == 0 && this.currDisplayData.uvs) {\r\n                    this.currTexture = this.currDisplayData.createTexture(this.currTexture);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.displayIndex = -1;\r\n            this.currDisplayData = null;\r\n            this.currTexture = null;\r\n        }\r\n    }\r\n    replaceSkin(_texture) {\r\n        this._diyTexture = _texture;\r\n        if (this._curDiyUV)\r\n            this._curDiyUV.length = 0;\r\n        if (this.currDisplayData && this._diyTexture == this.currDisplayData.texture) {\r\n            this._diyTexture = null;\r\n        }\r\n    }\r\n    setParentMatrix(parentMatrix) {\r\n        this._parentMatrix = parentMatrix;\r\n    }\r\n    static createSkinMesh() {\r\n        return new SkinMeshForGraphic();\r\n    }\r\n    static isSameArr(arrA, arrB) {\r\n        if (arrA.length != arrB.length)\r\n            return false;\r\n        var i, len;\r\n        len = arrA.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (arrA[i] != arrB[i])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    getSaveVerticle(tArr) {\r\n        if (BoneSlot.useSameMatrixAndVerticle && this._preGraphicVerticle && BoneSlot.isSameArr(tArr, this._preGraphicVerticle)) {\r\n            tArr = this._preGraphicVerticle;\r\n        }\r\n        else {\r\n            tArr = ILaya.Utils.copyArray([], tArr);\r\n            this._preGraphicVerticle = tArr;\r\n        }\r\n        return tArr;\r\n    }\r\n    static isSameMatrix(mtA, mtB) {\r\n        return mtA.a == mtB.a && mtA.b == mtB.b && mtA.c == mtB.c && mtA.d == mtB.d && Math.abs(mtA.tx - mtB.tx) < 0.00001 && Math.abs(mtA.ty - mtB.ty) < 0.00001;\r\n    }\r\n    getSaveMatrix(tResultMatrix) {\r\n        if (BoneSlot.useSameMatrixAndVerticle && this._preGraphicMatrix && BoneSlot.isSameMatrix(tResultMatrix, this._preGraphicMatrix)) {\r\n            tResultMatrix = this._preGraphicMatrix;\r\n        }\r\n        else {\r\n            var newMatrix = tResultMatrix.clone();\r\n            tResultMatrix = newMatrix;\r\n            this._preGraphicMatrix = tResultMatrix;\r\n        }\r\n        return tResultMatrix;\r\n    }\r\n    draw(graphics, boneMatrixArray, noUseSave = false, alpha = 1) {\r\n        if ((this._diyTexture == null && this.currTexture == null) || this.currDisplayData == null) {\r\n            if (!(this.currDisplayData && this.currDisplayData.type == 3)) {\r\n                return;\r\n            }\r\n        }\r\n        var tTexture = this.currTexture;\r\n        if (this._diyTexture)\r\n            tTexture = this._diyTexture;\r\n        var tSkinSprite;\r\n        switch (this.currDisplayData.type) {\r\n            case 0:\r\n                if (graphics) {\r\n                    var tCurrentMatrix = this.getDisplayMatrix();\r\n                    if (this._parentMatrix) {\r\n                        var tRotateKey = false;\r\n                        if (tCurrentMatrix) {\r\n                            Matrix.mul(tCurrentMatrix, this._parentMatrix, Matrix.TEMP);\r\n                            var tResultMatrix;\r\n                            if (noUseSave) {\r\n                                if (this._resultMatrix == null)\r\n                                    this._resultMatrix = new Matrix();\r\n                                tResultMatrix = this._resultMatrix;\r\n                            }\r\n                            else {\r\n                                tResultMatrix = BoneSlot._tempResultMatrix;\r\n                            }\r\n                            if (this._diyTexture && this.currDisplayData.uvs) {\r\n                                var tTestMatrix = BoneSlot._tempMatrix;\r\n                                tTestMatrix.identity();\r\n                                if (this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]) {\r\n                                    tTestMatrix.d = -1;\r\n                                }\r\n                                if (this.currDisplayData.uvs[0] > this.currDisplayData.uvs[4]\r\n                                    && this.currDisplayData.uvs[1] > this.currDisplayData.uvs[5]) {\r\n                                    tRotateKey = true;\r\n                                    tTestMatrix.rotate(-Math.PI / 2);\r\n                                }\r\n                                Matrix.mul(tTestMatrix, Matrix.TEMP, tResultMatrix);\r\n                            }\r\n                            else {\r\n                                Matrix.TEMP.copyTo(tResultMatrix);\r\n                            }\r\n                            if (!noUseSave) {\r\n                                tResultMatrix = this.getSaveMatrix(tResultMatrix);\r\n                            }\r\n                            tResultMatrix._checkTransform();\r\n                            if (tRotateKey) {\r\n                                graphics.drawTexture(tTexture, -this.currDisplayData.height / 2, -this.currDisplayData.width / 2, this.currDisplayData.height, this.currDisplayData.width, tResultMatrix, alpha);\r\n                            }\r\n                            else {\r\n                                graphics.drawTexture(tTexture, -this.currDisplayData.width / 2, -this.currDisplayData.height / 2, this.currDisplayData.width, this.currDisplayData.height, tResultMatrix, alpha);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case 1:\r\n                if (noUseSave) {\r\n                    if (this._skinSprite == null) {\r\n                        this._skinSprite = BoneSlot.createSkinMesh();\r\n                    }\r\n                    tSkinSprite = this._skinSprite;\r\n                }\r\n                else {\r\n                    tSkinSprite = BoneSlot.createSkinMesh();\r\n                }\r\n                if (tSkinSprite == null) {\r\n                    return;\r\n                }\r\n                var tIBArray;\r\n                if (this.currDisplayData.bones == null) {\r\n                    var tVertices = this.currDisplayData.weights;\r\n                    if (this.deformData) {\r\n                        tVertices = this.deformData;\r\n                    }\r\n                    var tUVs;\r\n                    if (this._diyTexture) {\r\n                        if (!this._curDiyUV) {\r\n                            this._curDiyUV = [];\r\n                        }\r\n                        if (this._curDiyUV.length == 0) {\r\n                            this._curDiyUV = UVTools.getRelativeUV(this.currTexture.uv, this.currDisplayData.uvs, this._curDiyUV);\r\n                            this._curDiyUV = UVTools.getAbsoluteUV(this._diyTexture.uv, this._curDiyUV, this._curDiyUV);\r\n                        }\r\n                        tUVs = this._curDiyUV;\r\n                    }\r\n                    else {\r\n                        tUVs = this.currDisplayData.uvs;\r\n                    }\r\n                    this._mVerticleArr = tVertices;\r\n                    var tTriangleNum = this.currDisplayData.triangles.length / 3;\r\n                    tIBArray = this.currDisplayData.triangles;\r\n                    if (this.deformData) {\r\n                        if (!noUseSave) {\r\n                            this._mVerticleArr = this.getSaveVerticle(this._mVerticleArr);\r\n                        }\r\n                    }\r\n                    tSkinSprite.init2(tTexture, tIBArray, this._mVerticleArr, tUVs);\r\n                    var tCurrentMatrix2 = this.getDisplayMatrix();\r\n                    if (this._parentMatrix) {\r\n                        if (tCurrentMatrix2) {\r\n                            Matrix.mul(tCurrentMatrix2, this._parentMatrix, Matrix.TEMP);\r\n                            var tResultMatrix2;\r\n                            if (noUseSave) {\r\n                                if (this._resultMatrix == null)\r\n                                    this._resultMatrix = new Matrix();\r\n                                tResultMatrix2 = this._resultMatrix;\r\n                            }\r\n                            else {\r\n                                tResultMatrix2 = BoneSlot._tempResultMatrix;\r\n                            }\r\n                            Matrix.TEMP.copyTo(tResultMatrix2);\r\n                            if (!noUseSave) {\r\n                                tResultMatrix2 = this.getSaveMatrix(tResultMatrix2);\r\n                            }\r\n                            tSkinSprite.transform = tResultMatrix2;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.skinMesh(boneMatrixArray, tSkinSprite);\r\n                }\r\n                graphics.drawSkin(tSkinSprite, alpha);\r\n                break;\r\n            case 2:\r\n                if (noUseSave) {\r\n                    if (this._skinSprite == null) {\r\n                        this._skinSprite = BoneSlot.createSkinMesh();\r\n                    }\r\n                    tSkinSprite = this._skinSprite;\r\n                }\r\n                else {\r\n                    tSkinSprite = BoneSlot.createSkinMesh();\r\n                }\r\n                if (tSkinSprite == null) {\r\n                    return;\r\n                }\r\n                this.skinMesh(boneMatrixArray, tSkinSprite);\r\n                graphics.drawSkin(tSkinSprite, alpha);\r\n                break;\r\n            case 3:\r\n                break;\r\n        }\r\n    }\r\n    skinMesh(boneMatrixArray, skinSprite) {\r\n        var tTexture = this.currTexture;\r\n        var tBones = this.currDisplayData.bones;\r\n        var tUvs;\r\n        if (this._diyTexture) {\r\n            tTexture = this._diyTexture;\r\n            if (!this._curDiyUV) {\r\n                this._curDiyUV = [];\r\n            }\r\n            if (this._curDiyUV.length == 0) {\r\n                this._curDiyUV = UVTools.getRelativeUV(this.currTexture.uv, this.currDisplayData.uvs, this._curDiyUV);\r\n                this._curDiyUV = UVTools.getAbsoluteUV(this._diyTexture.uv, this._curDiyUV, this._curDiyUV);\r\n            }\r\n            tUvs = this._curDiyUV;\r\n        }\r\n        else {\r\n            tUvs = this.currDisplayData.uvs;\r\n        }\r\n        var tWeights = this.currDisplayData.weights;\r\n        var tTriangles = this.currDisplayData.triangles;\r\n        var tIBArray;\r\n        var tRx = 0;\r\n        var tRy = 0;\r\n        var nn = 0;\r\n        var tMatrix;\r\n        var tX;\r\n        var tY;\r\n        var tB = 0;\r\n        var tWeight = 0;\r\n        var tVertices;\r\n        var i = 0, j = 0, n = 0;\r\n        var tRed = 1;\r\n        var tGreed = 1;\r\n        var tBlue = 1;\r\n        BoneSlot._tempVerticleArr.length = 0;\r\n        tVertices = BoneSlot._tempVerticleArr;\r\n        if (this.deformData && this.deformData.length > 0) {\r\n            var f = 0;\r\n            for (i = 0, n = tBones.length; i < n;) {\r\n                nn = tBones[i++] + i;\r\n                tRx = 0, tRy = 0;\r\n                for (; i < nn; i++) {\r\n                    tMatrix = boneMatrixArray[tBones[i]];\r\n                    tX = tWeights[tB] + this.deformData[f++];\r\n                    tY = tWeights[tB + 1] + this.deformData[f++];\r\n                    tWeight = tWeights[tB + 2];\r\n                    tRx += (tX * tMatrix.a + tY * tMatrix.c + tMatrix.tx) * tWeight;\r\n                    tRy += (tX * tMatrix.b + tY * tMatrix.d + tMatrix.ty) * tWeight;\r\n                    tB += 3;\r\n                }\r\n                tVertices.push(tRx, tRy);\r\n            }\r\n        }\r\n        else {\r\n            for (i = 0, n = tBones.length; i < n;) {\r\n                nn = tBones[i++] + i;\r\n                tRx = 0, tRy = 0;\r\n                for (; i < nn; i++) {\r\n                    tMatrix = boneMatrixArray[tBones[i]];\r\n                    tX = tWeights[tB];\r\n                    tY = tWeights[tB + 1];\r\n                    tWeight = tWeights[tB + 2];\r\n                    tRx += (tX * tMatrix.a + tY * tMatrix.c + tMatrix.tx) * tWeight;\r\n                    tRy += (tX * tMatrix.b + tY * tMatrix.d + tMatrix.ty) * tWeight;\r\n                    tB += 3;\r\n                }\r\n                tVertices.push(tRx, tRy);\r\n            }\r\n        }\r\n        this._mVerticleArr = tVertices;\r\n        tIBArray = tTriangles;\r\n        this._mVerticleArr = this.getSaveVerticle(this._mVerticleArr);\r\n        skinSprite.init2(tTexture, tIBArray, this._mVerticleArr, tUvs);\r\n    }\r\n    drawBonePoint(graphics) {\r\n        if (graphics && this._parentMatrix) {\r\n            graphics.drawCircle(this._parentMatrix.tx, this._parentMatrix.ty, 5, \"#ff0000\");\r\n        }\r\n    }\r\n    getDisplayMatrix() {\r\n        if (this.currDisplayData) {\r\n            return this.currDisplayData.transform.getMatrix();\r\n        }\r\n        return null;\r\n    }\r\n    getMatrix() {\r\n        return this._resultMatrix;\r\n    }\r\n    copy() {\r\n        var tBoneSlot = new BoneSlot();\r\n        tBoneSlot.type = \"copy\";\r\n        tBoneSlot.name = this.name;\r\n        tBoneSlot.attachmentName = this.attachmentName;\r\n        tBoneSlot.srcDisplayIndex = this.srcDisplayIndex;\r\n        tBoneSlot.parent = this.parent;\r\n        tBoneSlot.displayIndex = this.displayIndex;\r\n        tBoneSlot.templet = this.templet;\r\n        tBoneSlot.currSlotData = this.currSlotData;\r\n        tBoneSlot.currTexture = this.currTexture;\r\n        tBoneSlot.currDisplayData = this.currDisplayData;\r\n        return tBoneSlot;\r\n    }\r\n}\r\nBoneSlot._tempMatrix = new Matrix();\r\nBoneSlot._tempResultMatrix = new Matrix();\r\nBoneSlot.useSameMatrixAndVerticle = true;\r\nBoneSlot._tempVerticleArr = [];\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/Templet.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/SlotData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/SkinSlotDisplayData.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/UVTools.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/canvasmesh/SkinMeshForGraphic.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/GraphicsAni.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Matrix.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Graphics.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Texture.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/ani/bone/BoneSlot.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Templet } from \"./Templet\";\r\nimport { SlotData } from \"./SlotData\";\r\nimport { SkinSlotDisplayData } from \"./SkinSlotDisplayData\";\r\nimport { GraphicsAni } from \"../GraphicsAni\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Graphics } from \"../../display/Graphics\";\r\nimport { Texture } from \"../../resource/Texture\";\r\nexport declare class BoneSlot {\r\n    name: string;\r\n    parent: string;\r\n    attachmentName: string;\r\n    srcDisplayIndex: number;\r\n    type: string;\r\n    templet: Templet;\r\n    currSlotData: SlotData;\r\n    currTexture: Texture | null;\r\n    currDisplayData: SkinSlotDisplayData | null;\r\n    displayIndex: number;\r\n    originalIndex: number;\r\n    private _diyTexture;\r\n    private _parentMatrix;\r\n    private _resultMatrix;\r\n    private _replaceDic;\r\n    private _curDiyUV;\r\n    private _skinSprite;\r\n    deformData: any[];\r\n    showSlotData(slotData: SlotData, freshIndex?: boolean): void;\r\n    showDisplayByName(name: string): void;\r\n    replaceDisplayByName(tarName: string, newName: string): void;\r\n    replaceDisplayByIndex(tarIndex: number, newIndex: number): void;\r\n    showDisplayByIndex(index: number): void;\r\n    replaceSkin(_texture: Texture): void;\r\n    setParentMatrix(parentMatrix: Matrix): void;\r\n    private _mVerticleArr;\r\n    private static _tempMatrix;\r\n    static createSkinMesh(): any;\r\n    private static isSameArr;\r\n    private static _tempResultMatrix;\r\n    private _preGraphicVerticle;\r\n    private getSaveVerticle;\r\n    static isSameMatrix(mtA: Matrix, mtB: Matrix): boolean;\r\n    private _preGraphicMatrix;\r\n    private static useSameMatrixAndVerticle;\r\n    private getSaveMatrix;\r\n    draw(graphics: GraphicsAni, boneMatrixArray: any[], noUseSave?: boolean, alpha?: number): void;\r\n    private static _tempVerticleArr;\r\n    private skinMesh;\r\n    drawBonePoint(graphics: Graphics): void;\r\n    private getDisplayMatrix;\r\n    getMatrix(): Matrix;\r\n    copy(): BoneSlot;\r\n}\r\n"
  }
}

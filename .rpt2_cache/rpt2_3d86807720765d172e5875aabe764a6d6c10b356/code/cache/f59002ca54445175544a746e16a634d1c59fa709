{
  "code": "export class Ease {\r\n    static linearNone(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    static linearIn(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    static linearInOut(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    static linearOut(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    static bounceIn(t, b, c, d) {\r\n        return c - Ease.bounceOut(d - t, 0, c, d) + b;\r\n    }\r\n    static bounceInOut(t, b, c, d) {\r\n        if (t < d * 0.5)\r\n            return Ease.bounceIn(t * 2, 0, c, d) * .5 + b;\r\n        else\r\n            return Ease.bounceOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\r\n    }\r\n    static bounceOut(t, b, c, d) {\r\n        if ((t /= d) < (1 / 2.75))\r\n            return c * (7.5625 * t * t) + b;\r\n        else if (t < (2 / 2.75))\r\n            return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\r\n        else if (t < (2.5 / 2.75))\r\n            return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\r\n        else\r\n            return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\r\n    }\r\n    static backIn(t, b, c, d, s = 1.70158) {\r\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n    }\r\n    static backInOut(t, b, c, d, s = 1.70158) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\r\n        return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\r\n    }\r\n    static backOut(t, b, c, d, s = 1.70158) {\r\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n    }\r\n    static elasticIn(t, b, c, d, a = 0, p = 0) {\r\n        var s;\r\n        if (t == 0)\r\n            return b;\r\n        if ((t /= d) == 1)\r\n            return b + c;\r\n        if (!p)\r\n            p = d * .3;\r\n        if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else\r\n            s = p / Ease.PI2 * Math.asin(c / a);\r\n        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p)) + b;\r\n    }\r\n    static elasticInOut(t, b, c, d, a = 0, p = 0) {\r\n        var s;\r\n        if (t == 0)\r\n            return b;\r\n        if ((t /= d * 0.5) == 2)\r\n            return b + c;\r\n        if (!p)\r\n            p = d * (.3 * 1.5);\r\n        if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else\r\n            s = p / Ease.PI2 * Math.asin(c / a);\r\n        if (t < 1)\r\n            return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p)) + b;\r\n        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p) * .5 + c + b;\r\n    }\r\n    static elasticOut(t, b, c, d, a = 0, p = 0) {\r\n        var s;\r\n        if (t == 0)\r\n            return b;\r\n        if ((t /= d) == 1)\r\n            return b + c;\r\n        if (!p)\r\n            p = d * .3;\r\n        if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else\r\n            s = p / Ease.PI2 * Math.asin(c / a);\r\n        return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * Ease.PI2 / p) + c + b);\r\n    }\r\n    static strongIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t * t * t + b;\r\n    }\r\n    static strongInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t * t * t + b;\r\n        return c * 0.5 * ((t -= 2) * t * t * t * t + 2) + b;\r\n    }\r\n    static strongOut(t, b, c, d) {\r\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    }\r\n    static sineInOut(t, b, c, d) {\r\n        return -c * 0.5 * (Math.cos(Math.PI * t / d) - 1) + b;\r\n    }\r\n    static sineIn(t, b, c, d) {\r\n        return -c * Math.cos(t / d * Ease.HALF_PI) + c + b;\r\n    }\r\n    static sineOut(t, b, c, d) {\r\n        return c * Math.sin(t / d * Ease.HALF_PI) + b;\r\n    }\r\n    static quintIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t * t * t + b;\r\n    }\r\n    static quintInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t * t * t + b;\r\n        return c * 0.5 * ((t -= 2) * t * t * t * t + 2) + b;\r\n    }\r\n    static quintOut(t, b, c, d) {\r\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    }\r\n    static quartIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t * t + b;\r\n    }\r\n    static quartInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t * t + b;\r\n        return -c * 0.5 * ((t -= 2) * t * t * t - 2) + b;\r\n    }\r\n    static quartOut(t, b, c, d) {\r\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\r\n    }\r\n    static cubicIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t + b;\r\n    }\r\n    static cubicInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t + b;\r\n        return c * 0.5 * ((t -= 2) * t * t + 2) + b;\r\n    }\r\n    static cubicOut(t, b, c, d) {\r\n        return c * ((t = t / d - 1) * t * t + 1) + b;\r\n    }\r\n    static quadIn(t, b, c, d) {\r\n        return c * (t /= d) * t + b;\r\n    }\r\n    static quadInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t + b;\r\n        return -c * 0.5 * ((--t) * (t - 2) - 1) + b;\r\n    }\r\n    static quadOut(t, b, c, d) {\r\n        return -c * (t /= d) * (t - 2) + b;\r\n    }\r\n    static expoIn(t, b, c, d) {\r\n        return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b - c * 0.001;\r\n    }\r\n    static expoInOut(t, b, c, d) {\r\n        if (t == 0)\r\n            return b;\r\n        if (t == d)\r\n            return b + c;\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * Math.pow(2, 10 * (t - 1)) + b;\r\n        return c * 0.5 * (-Math.pow(2, -10 * --t) + 2) + b;\r\n    }\r\n    static expoOut(t, b, c, d) {\r\n        return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\r\n    }\r\n    static circIn(t, b, c, d) {\r\n        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\r\n    }\r\n    static circInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return -c * 0.5 * (Math.sqrt(1 - t * t) - 1) + b;\r\n        return c * 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\r\n    }\r\n    static circOut(t, b, c, d) {\r\n        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\r\n    }\r\n}\r\nEase.HALF_PI = Math.PI * 0.5;\r\nEase.PI2 = Math.PI * 2;\r\n",
  "references": [],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Ease.d.ts",
    "writeByteOrderMark": false,
    "text": "export declare class Ease {\r\n    private static HALF_PI;\r\n    private static PI2;\r\n    static linearNone(t: number, b: number, c: number, d: number): number;\r\n    static linearIn(t: number, b: number, c: number, d: number): number;\r\n    static linearInOut(t: number, b: number, c: number, d: number): number;\r\n    static linearOut(t: number, b: number, c: number, d: number): number;\r\n    static bounceIn(t: number, b: number, c: number, d: number): number;\r\n    static bounceInOut(t: number, b: number, c: number, d: number): number;\r\n    static bounceOut(t: number, b: number, c: number, d: number): number;\r\n    static backIn(t: number, b: number, c: number, d: number, s?: number): number;\r\n    static backInOut(t: number, b: number, c: number, d: number, s?: number): number;\r\n    static backOut(t: number, b: number, c: number, d: number, s?: number): number;\r\n    static elasticIn(t: number, b: number, c: number, d: number, a?: number, p?: number): number;\r\n    static elasticInOut(t: number, b: number, c: number, d: number, a?: number, p?: number): number;\r\n    static elasticOut(t: number, b: number, c: number, d: number, a?: number, p?: number): number;\r\n    static strongIn(t: number, b: number, c: number, d: number): number;\r\n    static strongInOut(t: number, b: number, c: number, d: number): number;\r\n    static strongOut(t: number, b: number, c: number, d: number): number;\r\n    static sineInOut(t: number, b: number, c: number, d: number): number;\r\n    static sineIn(t: number, b: number, c: number, d: number): number;\r\n    static sineOut(t: number, b: number, c: number, d: number): number;\r\n    static quintIn(t: number, b: number, c: number, d: number): number;\r\n    static quintInOut(t: number, b: number, c: number, d: number): number;\r\n    static quintOut(t: number, b: number, c: number, d: number): number;\r\n    static quartIn(t: number, b: number, c: number, d: number): number;\r\n    static quartInOut(t: number, b: number, c: number, d: number): number;\r\n    static quartOut(t: number, b: number, c: number, d: number): number;\r\n    static cubicIn(t: number, b: number, c: number, d: number): number;\r\n    static cubicInOut(t: number, b: number, c: number, d: number): number;\r\n    static cubicOut(t: number, b: number, c: number, d: number): number;\r\n    static quadIn(t: number, b: number, c: number, d: number): number;\r\n    static quadInOut(t: number, b: number, c: number, d: number): number;\r\n    static quadOut(t: number, b: number, c: number, d: number): number;\r\n    static expoIn(t: number, b: number, c: number, d: number): number;\r\n    static expoInOut(t: number, b: number, c: number, d: number): number;\r\n    static expoOut(t: number, b: number, c: number, d: number): number;\r\n    static circIn(t: number, b: number, c: number, d: number): number;\r\n    static circInOut(t: number, b: number, c: number, d: number): number;\r\n    static circOut(t: number, b: number, c: number, d: number): number;\r\n}\r\n"
  }
}

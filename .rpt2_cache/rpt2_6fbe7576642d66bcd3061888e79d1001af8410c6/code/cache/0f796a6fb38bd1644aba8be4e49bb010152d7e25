{
  "code": "import { Texture2D } from \"./Texture2D\";\r\nimport { LayaGL } from \"../layagl/LayaGL\";\r\nimport { BaseTexture } from \"./BaseTexture\";\r\nimport { WebGLContext } from \"../webgl/WebGLContext\";\r\nimport { BaseShader } from \"../webgl/shader/BaseShader\";\r\nimport { RenderState2D } from \"../webgl/utils/RenderState2D\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { RenderTextureFormat, RenderTextureDepthFormat } from \"./RenderTextureFormat\";\r\nexport class RenderTexture2D extends BaseTexture {\r\n    constructor(width, height, format = RenderTextureFormat.R8G8B8, depthStencilFormat = RenderTextureDepthFormat.DEPTH_16) {\r\n        super(format, false);\r\n        this._mgrKey = 0;\r\n        this._glTextureType = LayaGL.instance.TEXTURE_2D;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._depthStencilFormat = depthStencilFormat;\r\n        this._create(width, height);\r\n        this.lock = true;\r\n    }\r\n    static get currentActive() {\r\n        return RenderTexture2D._currentActive;\r\n    }\r\n    get depthStencilFormat() {\r\n        return this._depthStencilFormat;\r\n    }\r\n    get defaulteTexture() {\r\n        return Texture2D.grayTexture;\r\n    }\r\n    getIsReady() {\r\n        return true;\r\n    }\r\n    get sourceWidth() {\r\n        return this._width;\r\n    }\r\n    get sourceHeight() {\r\n        return this._height;\r\n    }\r\n    get offsetX() {\r\n        return 0;\r\n    }\r\n    get offsetY() {\r\n        return 0;\r\n    }\r\n    _create(width, height) {\r\n        var gl = LayaGL.instance;\r\n        this._frameBuffer = gl.createFramebuffer();\r\n        WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        gl.texImage2D(this._glTextureType, 0, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, null);\r\n        this._setGPUMemory(width * height * 4);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glTexture, 0);\r\n        if (this._depthStencilFormat !== RenderTextureDepthFormat.DEPTHSTENCIL_NONE) {\r\n            this._depthStencilBuffer = gl.createRenderbuffer();\r\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthStencilBuffer);\r\n            switch (this._depthStencilFormat) {\r\n                case RenderTextureDepthFormat.DEPTH_16:\r\n                    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\r\n                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depthStencilBuffer);\r\n                    break;\r\n                case RenderTextureDepthFormat.STENCIL_8:\r\n                    gl.renderbufferStorage(gl.RENDERBUFFER, gl.STENCIL_INDEX8, width, height);\r\n                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.STENCIL_ATTACHMENT, gl.RENDERBUFFER, this._depthStencilBuffer);\r\n                    break;\r\n                case RenderTextureDepthFormat.DEPTHSTENCIL_24_8:\r\n                    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\r\n                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this._depthStencilBuffer);\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        this._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n        this._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n        this._setFilterMode(this._filterMode);\r\n        this._setAnisotropy(this._anisoLevel);\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    generateMipmap() {\r\n        if (this._isPot(this.width) && this._isPot(this.height)) {\r\n            this._mipmap = true;\r\n            LayaGL.instance.generateMipmap(this._glTextureType);\r\n            this._setFilterMode(this._filterMode);\r\n            this._setGPUMemory(this.width * this.height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            this._mipmap = false;\r\n            this._setGPUMemory(this.width * this.height * 4);\r\n        }\r\n    }\r\n    static pushRT() {\r\n        RenderTexture2D.rtStack.push({ rt: RenderTexture2D._currentActive, w: RenderState2D.width, h: RenderState2D.height });\r\n    }\r\n    static popRT() {\r\n        var gl = LayaGL.instance;\r\n        var top = RenderTexture2D.rtStack.pop();\r\n        if (top) {\r\n            if (RenderTexture2D._currentActive != top.rt) {\r\n                LayaGL.instance.bindFramebuffer(gl.FRAMEBUFFER, top.rt ? top.rt._frameBuffer : null);\r\n                RenderTexture2D._currentActive = top.rt;\r\n            }\r\n            gl.viewport(0, 0, top.w, top.h);\r\n            RenderState2D.width = top.w;\r\n            RenderState2D.height = top.h;\r\n        }\r\n    }\r\n    start() {\r\n        var gl = LayaGL.instance;\r\n        LayaGL.instance.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n        this._lastRT = RenderTexture2D._currentActive;\r\n        RenderTexture2D._currentActive = this;\r\n        this._readyed = true;\r\n        gl.viewport(0, 0, this._width, this._height);\r\n        this._lastWidth = RenderState2D.width;\r\n        this._lastHeight = RenderState2D.height;\r\n        RenderState2D.width = this._width;\r\n        RenderState2D.height = this._height;\r\n        BaseShader.activeShader = null;\r\n    }\r\n    end() {\r\n        var gl = LayaGL.instance;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        RenderTexture2D._currentActive = null;\r\n        this._readyed = true;\r\n    }\r\n    restore() {\r\n        var gl = LayaGL.instance;\r\n        if (this._lastRT != RenderTexture2D._currentActive) {\r\n            LayaGL.instance.bindFramebuffer(gl.FRAMEBUFFER, this._lastRT ? this._lastRT._frameBuffer : null);\r\n            RenderTexture2D._currentActive = this._lastRT;\r\n        }\r\n        this._readyed = true;\r\n        gl.viewport(0, 0, this._lastWidth, this._lastHeight);\r\n        RenderState2D.width = this._lastWidth;\r\n        RenderState2D.height = this._lastHeight;\r\n        BaseShader.activeShader = null;\r\n    }\r\n    clear(r = 0.0, g = 0.0, b = 0.0, a = 1.0) {\r\n        var gl = LayaGL.instance;\r\n        gl.clearColor(r, g, b, a);\r\n        var clearFlag = gl.COLOR_BUFFER_BIT;\r\n        switch (this._depthStencilFormat) {\r\n            case gl.DEPTH_COMPONENT16:\r\n                clearFlag |= gl.DEPTH_BUFFER_BIT;\r\n                break;\r\n            case gl.STENCIL_INDEX8:\r\n                clearFlag |= gl.STENCIL_BUFFER_BIT;\r\n                break;\r\n            case gl.DEPTH_STENCIL:\r\n                clearFlag |= gl.DEPTH_BUFFER_BIT;\r\n                clearFlag |= gl.STENCIL_BUFFER_BIT;\r\n                break;\r\n        }\r\n        gl.clear(clearFlag);\r\n    }\r\n    getData(x, y, width, height) {\r\n        if (ILaya.Render.isConchApp && window.conchConfig.threadMode == 2) {\r\n            throw \"native 2 thread mode use getDataAsync\";\r\n        }\r\n        var gl = LayaGL.instance;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n        var canRead = (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE);\r\n        if (!canRead) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            return null;\r\n        }\r\n        var pixels = new Uint8Array(this._width * this._height * 4);\r\n        var glFormat = this._getGLFormat();\r\n        gl.readPixels(x, y, width, height, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        return pixels;\r\n    }\r\n    getDataAsync(x, y, width, height, callBack) {\r\n        var gl = LayaGL.instance;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n        gl.readPixelsAsync(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, function (data) {\r\n            callBack(new Uint8Array(data));\r\n        });\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    recycle() {\r\n    }\r\n    _disposeResource() {\r\n        if (this._frameBuffer) {\r\n            var gl = LayaGL.instance;\r\n            gl.deleteTexture(this._glTexture);\r\n            gl.deleteFramebuffer(this._frameBuffer);\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n            this._glTexture = null;\r\n            this._frameBuffer = null;\r\n            this._depthStencilBuffer = null;\r\n            this._setGPUMemory(0);\r\n        }\r\n    }\r\n}\r\nRenderTexture2D.rtStack = [];\r\nRenderTexture2D.defuv = [0, 0, 1, 0, 1, 1, 0, 1];\r\nRenderTexture2D.flipyuv = [0, 1, 1, 1, 1, 0, 0, 0];\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Texture2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/layagl/LayaGL.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/BaseTexture.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/WebGLContext.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/shader/BaseShader.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/utils/RenderState2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/RenderTextureFormat.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/.rpt2_cache/placeholder/laya/resource/RenderTexture2D.d.ts",
    "writeByteOrderMark": false,
    "text": "import { BaseTexture } from \"./BaseTexture\";\r\nexport declare class RenderTexture2D extends BaseTexture {\r\n    private static _currentActive;\r\n    private _lastRT;\r\n    private _lastWidth;\r\n    private _lastHeight;\r\n    private static rtStack;\r\n    static defuv: any[];\r\n    static flipyuv: any[];\r\n    static readonly currentActive: RenderTexture2D;\r\n    private _frameBuffer;\r\n    private _depthStencilBuffer;\r\n    private _depthStencilFormat;\r\n    _mgrKey: number;\r\n    readonly depthStencilFormat: number;\r\n    readonly defaulteTexture: BaseTexture;\r\n    getIsReady(): boolean;\r\n    readonly sourceWidth: number;\r\n    readonly sourceHeight: number;\r\n    readonly offsetX: number;\r\n    readonly offsetY: number;\r\n    constructor(width: number, height: number, format?: number, depthStencilFormat?: number);\r\n    private _create;\r\n    generateMipmap(): void;\r\n    static pushRT(): void;\r\n    static popRT(): void;\r\n    start(): void;\r\n    end(): void;\r\n    restore(): void;\r\n    clear(r?: number, g?: number, b?: number, a?: number): void;\r\n    getData(x: number, y: number, width: number, height: number): Uint8Array;\r\n    getDataAsync(x: number, y: number, width: number, height: number, callBack: Function): void;\r\n    recycle(): void;\r\n    _disposeResource(): void;\r\n}\r\n"
  }
}

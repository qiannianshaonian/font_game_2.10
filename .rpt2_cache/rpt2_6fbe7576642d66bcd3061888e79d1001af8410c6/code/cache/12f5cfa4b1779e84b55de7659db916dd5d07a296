{
  "code": "import { Matrix } from \"../../maths/Matrix\";\r\nexport class Transform {\r\n    constructor() {\r\n        this.skX = 0;\r\n        this.skY = 0;\r\n        this.scX = 1;\r\n        this.scY = 1;\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.skewX = 0;\r\n        this.skewY = 0;\r\n    }\r\n    initData(data) {\r\n        if (data.x != undefined) {\r\n            this.x = data.x;\r\n        }\r\n        if (data.y != undefined) {\r\n            this.y = data.y;\r\n        }\r\n        if (data.skX != undefined) {\r\n            this.skX = data.skX;\r\n        }\r\n        if (data.skY != undefined) {\r\n            this.skY = data.skY;\r\n        }\r\n        if (data.scX != undefined) {\r\n            this.scX = data.scX;\r\n        }\r\n        if (data.scY != undefined) {\r\n            this.scY = data.scY;\r\n        }\r\n    }\r\n    getMatrix() {\r\n        var tMatrix;\r\n        if (this.mMatrix) {\r\n            tMatrix = this.mMatrix;\r\n        }\r\n        else {\r\n            tMatrix = this.mMatrix = new Matrix();\r\n        }\r\n        tMatrix.identity();\r\n        tMatrix.scale(this.scX, this.scY);\r\n        if (this.skewX || this.skewY) {\r\n            this.skew(tMatrix, this.skewX * Math.PI / 180, this.skewY * Math.PI / 180);\r\n        }\r\n        tMatrix.rotate(this.skX * Math.PI / 180);\r\n        tMatrix.translate(this.x, this.y);\r\n        return tMatrix;\r\n    }\r\n    skew(m, x, y) {\r\n        var sinX = Math.sin(y);\r\n        var cosX = Math.cos(y);\r\n        var sinY = Math.sin(x);\r\n        var cosY = Math.cos(x);\r\n        m.setTo(m.a * cosY - m.b * sinX, m.a * sinY + m.b * cosX, m.c * cosY - m.d * sinX, m.c * sinY + m.d * cosX, m.tx * cosY - m.ty * sinX, m.tx * sinY + m.ty * cosX);\r\n        return m;\r\n    }\r\n}\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Matrix.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/.rpt2_cache/placeholder/laya/ani/bone/Transform.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Matrix } from \"../../maths/Matrix\";\r\nexport declare class Transform {\r\n    skX: number;\r\n    skY: number;\r\n    scX: number;\r\n    scY: number;\r\n    x: number;\r\n    y: number;\r\n    skewX: number;\r\n    skewY: number;\r\n    private mMatrix;\r\n    initData(data: any): void;\r\n    getMatrix(): Matrix;\r\n    skew(m: Matrix, x: number, y: number): Matrix;\r\n}\r\n"
  }
}

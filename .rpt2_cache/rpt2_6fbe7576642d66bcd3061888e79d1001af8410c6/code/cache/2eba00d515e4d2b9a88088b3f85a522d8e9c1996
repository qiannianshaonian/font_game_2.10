{
  "code": "import { ILaya } from \"../../ILaya\";\r\nimport { LayaGL } from \"../layagl/LayaGL\";\r\nimport { WebGLContext } from \"../webgl/WebGLContext\";\r\nimport { BaseTexture } from \"./BaseTexture\";\r\nimport { TextureFormat } from \"./TextureFormat\";\r\nimport { Byte } from \"../utils/Byte\";\r\nimport { FilterMode } from \"./FilterMode\";\r\nimport { SystemUtils } from \"../webgl/SystemUtils\";\r\nimport { HalfFloatUtils } from \"../utils/HalfFloatUtils\";\r\nexport class Texture2D extends BaseTexture {\r\n    constructor(width = 0, height = 0, format = TextureFormat.R8G8B8A8, mipmap = true, canRead = false) {\r\n        super(format, mipmap);\r\n        var gl = LayaGL.instance;\r\n        this._glTextureType = gl.TEXTURE_2D;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._canRead = canRead;\r\n        this._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n        this._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n        this._setFilterMode(this._filterMode);\r\n        this._setAnisotropy(this._anisoLevel);\r\n        var compress = this._gpuCompressFormat();\r\n        if (mipmap) {\r\n            var mipCount = Math.max(Math.ceil(Math.log2(width)) + 1, Math.ceil(Math.log2(height)) + 1);\r\n            if (!compress) {\r\n                for (var i = 0; i < mipCount; i++)\r\n                    this._setPixels(null, i, Math.max(width >> i, 1), Math.max(height >> i, 1));\r\n            }\r\n            this._mipmapCount = mipCount;\r\n            this._setGPUMemory(width * height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            if (!compress)\r\n                this._setPixels(null, 0, width, height);\r\n            this._mipmapCount = 1;\r\n            this._setGPUMemory(width * height * 4);\r\n        }\r\n    }\r\n    static __init__() {\r\n        var pixels = new Uint8Array(3);\r\n        pixels[0] = 128;\r\n        pixels[1] = 128;\r\n        pixels[2] = 128;\r\n        Texture2D.grayTexture = new Texture2D(1, 1, TextureFormat.R8G8B8, false, false);\r\n        Texture2D.grayTexture.setPixels(pixels);\r\n        Texture2D.grayTexture.lock = true;\r\n        pixels[0] = 255;\r\n        pixels[1] = 255;\r\n        pixels[2] = 255;\r\n        Texture2D.whiteTexture = new Texture2D(1, 1, TextureFormat.R8G8B8, false, false);\r\n        Texture2D.whiteTexture.setPixels(pixels);\r\n        Texture2D.whiteTexture.lock = true;\r\n        pixels[0] = 0;\r\n        pixels[1] = 0;\r\n        pixels[2] = 0;\r\n        Texture2D.blackTexture = new Texture2D(1, 1, TextureFormat.R8G8B8, false, false);\r\n        Texture2D.blackTexture.setPixels(pixels);\r\n        Texture2D.blackTexture.lock = true;\r\n    }\r\n    static _parse(data, propertyParams = null, constructParams = null) {\r\n        var texture = constructParams ? new Texture2D(constructParams[0], constructParams[1], constructParams[2], constructParams[3], constructParams[4]) : new Texture2D(0, 0);\r\n        if (propertyParams) {\r\n            texture.wrapModeU = propertyParams.wrapModeU;\r\n            texture.wrapModeV = propertyParams.wrapModeV;\r\n            texture.filterMode = propertyParams.filterMode;\r\n            texture.anisoLevel = propertyParams.anisoLevel;\r\n        }\r\n        switch (texture._format) {\r\n            case TextureFormat.R8G8B8:\r\n            case TextureFormat.R8G8B8A8:\r\n                texture.loadImageSource(data);\r\n                break;\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.DXT5:\r\n            case TextureFormat.ETC1RGB:\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                texture.setCompressData(data);\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unkonwn format.\";\r\n        }\r\n        return texture;\r\n    }\r\n    static _SimpleAnimatorTextureParse(data, propertyParams = null, constructParams = null) {\r\n        var byte = new Byte(data);\r\n        var version = byte.readUTFString();\r\n        var texture;\r\n        var pixelDataArrays;\r\n        var usePixelData;\r\n        switch (version) {\r\n            case \"LAYAANIMATORTEXTURE:0000\":\r\n                var textureWidth = byte.readInt32();\r\n                var pixelDataLength = byte.readInt32();\r\n                pixelDataArrays = new Float32Array(textureWidth * textureWidth * 4);\r\n                usePixelData = new Float32Array(byte.readArrayBuffer(pixelDataLength * 4));\r\n                pixelDataArrays.set(usePixelData, 0);\r\n                var texture = new Texture2D(textureWidth, textureWidth, TextureFormat.R32G32B32A32, false, false);\r\n                texture.setPixels(pixelDataArrays, 0);\r\n                texture.filterMode = FilterMode.Point;\r\n                break;\r\n            case \"LAYACOMPRESSANIMATORTEXTURE:0000\":\r\n                var textureWidth = byte.readInt32();\r\n                var pixelDataLength = byte.readInt32();\r\n                pixelDataArrays = new Uint16Array(byte.readArrayBuffer(pixelDataLength * 2));\r\n                if (!SystemUtils.supportTextureFormat(TextureFormat.R16G16B16A16)) {\r\n                    console.log(\"The platform does not support 16-bit floating-point textures\");\r\n                    if (!SystemUtils.supportTextureFormat(TextureFormat.R32G32B32A32))\r\n                        console.error(\"The platform does not support 32-bit floating-point textures\");\r\n                    usePixelData = new Float32Array(textureWidth * textureWidth * 4);\r\n                    for (var i = 0, n = pixelDataArrays.length; i < n; i++) {\r\n                        usePixelData[i] = HalfFloatUtils.convertToNumber(pixelDataArrays[i]);\r\n                    }\r\n                    texture = new Texture2D(textureWidth, textureWidth, TextureFormat.R32G32B32A32, false, false);\r\n                    texture.setPixels(usePixelData, 0);\r\n                    texture.filterMode = FilterMode.Point;\r\n                }\r\n                else {\r\n                    usePixelData = new Uint16Array(textureWidth * textureWidth * 4);\r\n                    usePixelData.set(pixelDataArrays, 0);\r\n                    texture = new Texture2D(textureWidth, textureWidth, TextureFormat.R16G16B16A16, false, false);\r\n                    texture.setPixels(usePixelData, 0);\r\n                    texture.filterMode = FilterMode.Point;\r\n                }\r\n                break;\r\n            default:\r\n                throw \"Laya3D:unknow version.\";\r\n        }\r\n        return texture;\r\n    }\r\n    static load(url, complete) {\r\n        ILaya.loader.create(url, complete, null, ILaya.Loader.TEXTURE2D);\r\n    }\r\n    get defaulteTexture() {\r\n        return Texture2D.grayTexture;\r\n    }\r\n    _gpuCompressFormat() {\r\n        return this._format == TextureFormat.DXT1 || this._format == TextureFormat.DXT5 ||\r\n            this._format == TextureFormat.ETC1RGB ||\r\n            this._format == TextureFormat.PVRTCRGB_2BPPV || this._format == TextureFormat.PVRTCRGBA_2BPPV ||\r\n            this._format == TextureFormat.PVRTCRGB_4BPPV || this._format == TextureFormat.PVRTCRGBA_4BPPV;\r\n    }\r\n    _setPixels(pixels, miplevel, width, height) {\r\n        var gl = LayaGL.instance;\r\n        var textureType = this._glTextureType;\r\n        var glFormat = this._getGLFormat();\r\n        WebGLContext.bindTexture(gl, textureType, this._glTexture);\r\n        switch (this.format) {\r\n            case TextureFormat.R8G8B8:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n                gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 2);\r\n                gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_SHORT_5_6_5, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                if (LayaGL.layaGPUInstance._isWebGL2)\r\n                    gl.texImage2D(textureType, miplevel, gl.RGBA32F, width, height, 0, glFormat, gl.FLOAT, pixels);\r\n                else\r\n                    gl.texImage2D(textureType, miplevel, gl.RGBA, width, height, 0, glFormat, gl.FLOAT, pixels);\r\n                break;\r\n            case TextureFormat.R16G16B16A16:\r\n                if (LayaGL.layaGPUInstance._isWebGL2)\r\n                    gl.texImage2D(textureType, miplevel, gl.RGBA16F, width, height, 0, glFormat, gl.HALF_FLOAT, pixels);\r\n                else\r\n                    gl.texImage2D(textureType, miplevel, gl.RGBA, width, height, 0, glFormat, LayaGL.layaGPUInstance._oesTextureHalfFloat.HALF_FLOAT_OES, pixels);\r\n                break;\r\n            default:\r\n                gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n        }\r\n    }\r\n    _calcualatesCompressedDataSize(format, width, height) {\r\n        switch (format) {\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.ETC1RGB:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n            case TextureFormat.DXT5:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n                return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n    _pharseDDS(arrayBuffer) {\r\n        const FOURCC_DXT1 = 827611204;\r\n        const FOURCC_DXT5 = 894720068;\r\n        const DDPF_FOURCC = 0x4;\r\n        const DDSD_MIPMAPCOUNT = 0x20000;\r\n        const DDS_MAGIC = 0x20534444;\r\n        const DDS_HEADER_LENGTH = 31;\r\n        const DDS_HEADER_MAGIC = 0;\r\n        const DDS_HEADER_SIZE = 1;\r\n        const DDS_HEADER_FLAGS = 2;\r\n        const DDS_HEADER_HEIGHT = 3;\r\n        const DDS_HEADER_WIDTH = 4;\r\n        const DDS_HEADER_MIPMAPCOUNT = 7;\r\n        const DDS_HEADER_PF_FLAGS = 20;\r\n        const DDS_HEADER_PF_FOURCC = 21;\r\n        var header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\r\n        if (header[DDS_HEADER_MAGIC] != DDS_MAGIC)\r\n            throw \"Invalid magic number in DDS header\";\r\n        if (!(header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC))\r\n            throw \"Unsupported format, must contain a FourCC code\";\r\n        var compressedFormat = header[DDS_HEADER_PF_FOURCC];\r\n        switch (this._format) {\r\n            case TextureFormat.DXT1:\r\n                if (compressedFormat !== FOURCC_DXT1)\r\n                    throw \"the FourCC code is not same with texture format.\";\r\n                break;\r\n            case TextureFormat.DXT5:\r\n                if (compressedFormat !== FOURCC_DXT5)\r\n                    throw \"the FourCC code is not same with texture format.\";\r\n                break;\r\n            default:\r\n                throw \"unknown texture format.\";\r\n        }\r\n        var mipLevels = 1;\r\n        if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\r\n            mipLevels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\r\n            if (!this._mipmap)\r\n                throw \"the mipmap is not same with Texture2D.\";\r\n        }\r\n        else {\r\n            if (this._mipmap)\r\n                throw \"the mipmap is not same with Texture2D.\";\r\n        }\r\n        var width = header[DDS_HEADER_WIDTH];\r\n        var height = header[DDS_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = header[DDS_HEADER_SIZE] + 4;\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 0);\r\n    }\r\n    _pharseKTX(arrayBuffer) {\r\n        const ETC_HEADER_LENGTH = 13;\r\n        const ETC_HEADER_FORMAT = 4;\r\n        const ETC_HEADER_HEIGHT = 7;\r\n        const ETC_HEADER_WIDTH = 6;\r\n        const ETC_HEADER_MIPMAPCOUNT = 11;\r\n        const ETC_HEADER_METADATA = 12;\r\n        var id = new Uint8Array(arrayBuffer, 0, 12);\r\n        if (id[0] != 0xAB || id[1] != 0x4B || id[2] != 0x54 || id[3] != 0x58 || id[4] != 0x20 || id[5] != 0x31 || id[6] != 0x31 || id[7] != 0xBB || id[8] != 0x0D || id[9] != 0x0A || id[10] != 0x1A || id[11] != 0x0A)\r\n            throw (\"Invalid fileIdentifier in KTX header\");\r\n        var header = new Int32Array(id.buffer, id.length, ETC_HEADER_LENGTH);\r\n        var compressedFormat = header[ETC_HEADER_FORMAT];\r\n        switch (compressedFormat) {\r\n            case LayaGL.layaGPUInstance._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL:\r\n                this._format = TextureFormat.ETC1RGB;\r\n                break;\r\n            default:\r\n                throw \"unknown texture format.\";\r\n        }\r\n        var mipLevels = header[ETC_HEADER_MIPMAPCOUNT];\r\n        var width = header[ETC_HEADER_WIDTH];\r\n        var height = header[ETC_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = 64 + header[ETC_HEADER_METADATA];\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 4);\r\n    }\r\n    _pharsePVR(arrayBuffer) {\r\n        const PVR_FORMAT_2BPP_RGB = 0;\r\n        const PVR_FORMAT_2BPP_RGBA = 1;\r\n        const PVR_FORMAT_4BPP_RGB = 2;\r\n        const PVR_FORMAT_4BPP_RGBA = 3;\r\n        const PVR_MAGIC = 0x03525650;\r\n        const PVR_HEADER_LENGTH = 13;\r\n        const PVR_HEADER_MAGIC = 0;\r\n        const PVR_HEADER_FORMAT = 2;\r\n        const PVR_HEADER_HEIGHT = 6;\r\n        const PVR_HEADER_WIDTH = 7;\r\n        const PVR_HEADER_MIPMAPCOUNT = 11;\r\n        const PVR_HEADER_METADATA = 12;\r\n        var header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\r\n        if (header[PVR_HEADER_MAGIC] != PVR_MAGIC)\r\n            throw (\"Invalid magic number in PVR header\");\r\n        var compressedFormat = header[PVR_HEADER_FORMAT];\r\n        switch (compressedFormat) {\r\n            case PVR_FORMAT_2BPP_RGB:\r\n                this._format = TextureFormat.PVRTCRGB_2BPPV;\r\n                break;\r\n            case PVR_FORMAT_4BPP_RGB:\r\n                this._format = TextureFormat.PVRTCRGB_4BPPV;\r\n                break;\r\n            case PVR_FORMAT_2BPP_RGBA:\r\n                this._format = TextureFormat.PVRTCRGBA_2BPPV;\r\n                break;\r\n            case PVR_FORMAT_4BPP_RGBA:\r\n                this._format = TextureFormat.PVRTCRGBA_4BPPV;\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unknown PVR format.\";\r\n        }\r\n        var mipLevels = header[PVR_HEADER_MIPMAPCOUNT];\r\n        var width = header[PVR_HEADER_WIDTH];\r\n        var height = header[PVR_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = header[PVR_HEADER_METADATA] + 52;\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 0);\r\n    }\r\n    _upLoadCompressedTexImage2D(data, width, height, miplevelCount, dataOffset, imageSizeOffset) {\r\n        var gl = LayaGL.instance;\r\n        var textureType = this._glTextureType;\r\n        WebGLContext.bindTexture(gl, textureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        var offset = dataOffset;\r\n        for (var i = 0; i < miplevelCount; i++) {\r\n            offset += imageSizeOffset;\r\n            var mipDataSize = this._calcualatesCompressedDataSize(this._format, width, height);\r\n            var mipData = new Uint8Array(data, offset, mipDataSize);\r\n            gl.compressedTexImage2D(textureType, i, glFormat, width, height, 0, mipData);\r\n            width = Math.max(width >> 1, 1.0);\r\n            height = Math.max(height >> 1, 1.0);\r\n            offset += mipDataSize;\r\n        }\r\n        var memory = offset;\r\n        this._setGPUMemory(memory);\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    loadImageSource(source, premultiplyAlpha = false) {\r\n        var gl = LayaGL.instance;\r\n        var width = source.width;\r\n        var height = source.height;\r\n        this._width = width;\r\n        this._height = height;\r\n        if (!(this._isPot(width) && this._isPot(height)))\r\n            this._mipmap = false;\r\n        this._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n        this._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n        this._setFilterMode(this._filterMode);\r\n        WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        if (ILaya.Render.isConchApp) {\r\n            if (source.setPremultiplyAlpha) {\r\n                source.setPremultiplyAlpha(premultiplyAlpha);\r\n            }\r\n            gl.texImage2D(this._glTextureType, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n        }\r\n        else {\r\n            (premultiplyAlpha) && (gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true));\r\n            if (this.format == TextureFormat.R5G6B5)\r\n                gl.texImage2D(this._glTextureType, 0, gl.RGB, gl.RGB, gl.UNSIGNED_SHORT_5_6_5, source);\r\n            else\r\n                gl.texImage2D(this._glTextureType, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source);\r\n            (premultiplyAlpha) && (gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false));\r\n        }\r\n        if (this._mipmap) {\r\n            gl.generateMipmap(this._glTextureType);\r\n            this._setGPUMemory(width * height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            this._setGPUMemory(width * height * 4);\r\n        }\r\n        if (this._canRead) {\r\n            if (ILaya.Render.isConchApp) {\r\n                this._pixels = new Uint8Array(source._nativeObj.getImageData(0, 0, width, height));\r\n            }\r\n            else {\r\n                ILaya.Browser.canvas.size(width, height);\r\n                ILaya.Browser.canvas.clear();\r\n                ILaya.Browser.context.drawImage(source, 0, 0, width, height);\r\n                this._pixels = new Uint8Array(ILaya.Browser.context.getImageData(0, 0, width, height).data.buffer);\r\n            }\r\n        }\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    setPixels(pixels, miplevel = 0) {\r\n        if (this._gpuCompressFormat())\r\n            throw \"Texture2D:the format is GPU compression format.\";\r\n        if (!pixels)\r\n            throw \"Texture2D:pixels can't be null.\";\r\n        var width = Math.max(this._width >> miplevel, 1);\r\n        var height = Math.max(this._height >> miplevel, 1);\r\n        var pixelsCount = width * height * this._getFormatByteCount();\r\n        if (pixels.length < pixelsCount)\r\n            throw \"Texture2D:pixels length should at least \" + pixelsCount + \".\";\r\n        this._setPixels(pixels, miplevel, width, height);\r\n        if (this._canRead)\r\n            this._pixels = pixels;\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    setSubPixels(x, y, width, height, pixels, miplevel = 0) {\r\n        if (this._gpuCompressFormat())\r\n            throw \"Texture2D:the format is GPU compression format.\";\r\n        if (!pixels)\r\n            throw \"Texture2D:pixels can't be null.\";\r\n        var gl = LayaGL.instance;\r\n        var textureType = this._glTextureType;\r\n        WebGLContext.bindTexture(gl, textureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        switch (this.format) {\r\n            case TextureFormat.R8G8B8:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 2);\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.UNSIGNED_SHORT_5_6_5, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.FLOAT, pixels);\r\n                break;\r\n            default:\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n        }\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    setCompressData(data) {\r\n        switch (this._format) {\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.DXT5:\r\n                this._pharseDDS(data);\r\n                break;\r\n            case TextureFormat.ETC1RGB:\r\n                this._pharseKTX(data);\r\n                break;\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                this._pharsePVR(data);\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unkonwn format.\";\r\n        }\r\n    }\r\n    getPixels() {\r\n        if (this._canRead)\r\n            return this._pixels;\r\n        else\r\n            throw new Error(\"Texture2D: must set texture canRead is true.\");\r\n    }\r\n}\r\nTexture2D.TEXTURE2D = \"TEXTURE2D\";\r\nTexture2D.grayTexture = null;\r\nTexture2D.whiteTexture = null;\r\nTexture2D.blackTexture = null;\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/layagl/LayaGL.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/WebGLContext.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/BaseTexture.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/TextureFormat.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Byte.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/FilterMode.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/SystemUtils.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/HalfFloatUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/.rpt2_cache/placeholder/laya/resource/Texture2D.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Handler } from \"../utils/Handler\";\r\nimport { BaseTexture } from \"./BaseTexture\";\r\nimport { TextureFormat } from \"./TextureFormat\";\r\nexport declare class Texture2D extends BaseTexture {\r\n    static TEXTURE2D: string;\r\n    static grayTexture: Texture2D;\r\n    static whiteTexture: Texture2D;\r\n    static blackTexture: Texture2D;\r\n    static __init__(): void;\r\n    static _parse(data: any, propertyParams?: any, constructParams?: any[]): Texture2D;\r\n    static _SimpleAnimatorTextureParse(data: any, propertyParams?: any, constructParams?: any[]): Texture2D;\r\n    static load(url: string, complete: Handler): void;\r\n    private _canRead;\r\n    private _pixels;\r\n    readonly defaulteTexture: BaseTexture;\r\n    constructor(width?: number, height?: number, format?: TextureFormat, mipmap?: boolean, canRead?: boolean);\r\n    private _gpuCompressFormat;\r\n    private _setPixels;\r\n    private _calcualatesCompressedDataSize;\r\n    private _pharseDDS;\r\n    private _pharseKTX;\r\n    private _pharsePVR;\r\n    _upLoadCompressedTexImage2D(data: ArrayBuffer, width: number, height: number, miplevelCount: number, dataOffset: number, imageSizeOffset: number): void;\r\n    loadImageSource(source: any, premultiplyAlpha?: boolean): void;\r\n    setPixels(pixels: Uint8Array | Uint16Array | Float32Array, miplevel?: number): void;\r\n    setSubPixels(x: number, y: number, width: number, height: number, pixels: Uint8Array | Uint16Array | Float32Array, miplevel?: number): void;\r\n    setCompressData(data: ArrayBuffer): void;\r\n    getPixels(): Uint8Array | Uint16Array | Float32Array;\r\n}\r\n"
  }
}

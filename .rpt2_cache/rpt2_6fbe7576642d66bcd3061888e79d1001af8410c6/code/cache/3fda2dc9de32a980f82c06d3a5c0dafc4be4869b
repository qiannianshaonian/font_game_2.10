{
  "code": "import { IStatRender } from \"./IStatRender\";\r\nimport { Browser } from \"./Browser\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { Text } from \"../display/Text\";\r\nimport { Render } from \"../renders/Render\";\r\nimport { HTMLCanvas } from \"../resource/HTMLCanvas\";\r\nimport { Resource } from \"../resource/Resource\";\r\nimport { Stat } from \"./Stat\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class StatUI extends IStatRender {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._show = false;\r\n        this._useCanvas = false;\r\n        this._height = 100;\r\n        this._view = [];\r\n    }\r\n    show(x = 0, y = 0) {\r\n        var dt = Stat;\r\n        if (!Browser.onMiniGame && !ILaya.Render.isConchApp && !Browser.onBDMiniGame && !Browser.onKGMiniGame && !Browser.onQGMiniGame && !Browser.onQQMiniGame && !Browser.onAlipayMiniGame && !Browser.onBLMiniGame && !Browser.onTTMiniGame && !Browser.onHWMiniGame && !Browser.onTBMiniGame)\r\n            this._useCanvas = true;\r\n        this._show = true;\r\n        Stat._fpsData.length = 60;\r\n        this._view[0] = { title: \"FPS(WebGL)\", value: \"_fpsStr\", color: \"yellow\", units: \"int\" };\r\n        this._view[1] = { title: \"Sprite\", value: \"_spriteStr\", color: \"white\", units: \"int\" };\r\n        this._view[2] = { title: \"RenderBatches\", value: \"renderBatches\", color: \"white\", units: \"int\" };\r\n        this._view[3] = { title: \"SavedRenderBatches\", value: \"savedRenderBatches\", color: \"white\", units: \"int\" };\r\n        this._view[4] = { title: \"CPUMemory\", value: \"cpuMemory\", color: \"yellow\", units: \"M\" };\r\n        this._view[5] = { title: \"GPUMemory\", value: \"gpuMemory\", color: \"yellow\", units: \"M\" };\r\n        this._view[6] = { title: \"Shader\", value: \"shaderCall\", color: \"white\", units: \"int\" };\r\n        this._view[7] = { title: \"Canvas\", value: \"_canvasStr\", color: \"white\", units: \"int\" };\r\n        if (Render.is3DMode) {\r\n            this._view[0].title = \"FPS(3D)\";\r\n            this._view[8] = { title: \"TriFaces\", value: \"trianglesFaces\", color: \"white\", units: \"int\" };\r\n            this._view[9] = { title: \"FrustumCulling\", value: \"frustumCulling\", color: \"white\", units: \"int\" };\r\n            this._view[10] = { title: \"OctreeNodeCulling\", value: \"octreeNodeCulling\", color: \"white\", units: \"int\" };\r\n        }\r\n        if (this._useCanvas) {\r\n            this.createUIPre(x, y);\r\n        }\r\n        else\r\n            this.createUI(x, y);\r\n        this.enable();\r\n    }\r\n    createUIPre(x, y) {\r\n        var pixel = Browser.pixelRatio;\r\n        this._width = pixel * 180;\r\n        this._vx = pixel * 120;\r\n        this._height = pixel * (this._view.length * 12 + 3 * pixel) + 4;\r\n        StatUI._fontSize = 12 * pixel;\r\n        for (var i = 0; i < this._view.length; i++) {\r\n            this._view[i].x = 4;\r\n            this._view[i].y = i * StatUI._fontSize + 2 * pixel;\r\n        }\r\n        if (!this._canvas) {\r\n            this._canvas = new HTMLCanvas(true);\r\n            this._canvas.size(this._width, this._height);\r\n            this._ctx = this._canvas.getContext('2d');\r\n            this._ctx.textBaseline = \"top\";\r\n            this._ctx.font = StatUI._fontSize + \"px Arial\";\r\n            this._canvas.source.style.cssText = \"pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;direction:ltr;left:\" + x + \"px;top:\" + y + \"px;width:\" + (this._width / pixel) + \"px;height:\" + (this._height / pixel) + \"px;\";\r\n        }\r\n        if (!Browser.onKGMiniGame) {\r\n            Browser.container.appendChild(this._canvas.source);\r\n        }\r\n        this._first = true;\r\n        this.loop();\r\n        this._first = false;\r\n    }\r\n    createUI(x, y) {\r\n        var stat = this._sp;\r\n        var pixel = Browser.pixelRatio;\r\n        if (!stat) {\r\n            stat = new Sprite();\r\n            this._leftText = new Text();\r\n            this._leftText.pos(5, 5);\r\n            this._leftText.color = \"#ffffff\";\r\n            stat.addChild(this._leftText);\r\n            this._txt = new Text();\r\n            this._txt.pos(130 * pixel, 5);\r\n            this._txt.color = \"#ffffff\";\r\n            stat.addChild(this._txt);\r\n            this._sp = stat;\r\n        }\r\n        stat.pos(x, y);\r\n        var text = \"\";\r\n        for (var i = 0; i < this._view.length; i++) {\r\n            var one = this._view[i];\r\n            text += one.title + \"\\n\";\r\n        }\r\n        this._leftText.text = text;\r\n        var width = pixel * 138;\r\n        var height = pixel * (this._view.length * 12 + 3 * pixel) + 4;\r\n        this._txt.fontSize = StatUI._fontSize * pixel;\r\n        this._leftText.fontSize = StatUI._fontSize * pixel;\r\n        stat.size(width, height);\r\n        stat.graphics.clear();\r\n        stat.graphics.alpha(0.5);\r\n        stat.graphics.drawRect(0, 0, width + 110, height + 30, \"#999999\");\r\n        stat.graphics.alpha(2);\r\n        this.loop();\r\n    }\r\n    enable() {\r\n        ILaya.systemTimer.frameLoop(1, this, this.loop);\r\n    }\r\n    hide() {\r\n        this._show = false;\r\n        ILaya.systemTimer.clear(this, this.loop);\r\n        if (this._canvas) {\r\n            Browser.removeElement(this._canvas.source);\r\n        }\r\n    }\r\n    set_onclick(fn) {\r\n        if (this._sp) {\r\n            this._sp.on(\"click\", this._sp, fn);\r\n        }\r\n        if (this._canvas) {\r\n            this._canvas.source.onclick = fn;\r\n            this._canvas.source.style.pointerEvents = '';\r\n        }\r\n    }\r\n    loop() {\r\n        Stat._count++;\r\n        var timer = Browser.now();\r\n        if (timer - Stat._timer < 1000)\r\n            return;\r\n        var count = Stat._count;\r\n        Stat.FPS = Math.round((count * 1000) / (timer - Stat._timer));\r\n        if (this._show) {\r\n            Stat.trianglesFaces = Math.round(Stat.trianglesFaces / count);\r\n            if (!this._useCanvas) {\r\n                Stat.renderBatches = Math.round(Stat.renderBatches / count) - 1;\r\n            }\r\n            else {\r\n                Stat.renderBatches = Math.round(Stat.renderBatches / count);\r\n            }\r\n            Stat.savedRenderBatches = Math.round(Stat.savedRenderBatches / count);\r\n            Stat.shaderCall = Math.round(Stat.shaderCall / count);\r\n            Stat.spriteRenderUseCacheCount = Math.round(Stat.spriteRenderUseCacheCount / count);\r\n            Stat.canvasNormal = Math.round(Stat.canvasNormal / count);\r\n            Stat.canvasBitmap = Math.round(Stat.canvasBitmap / count);\r\n            Stat.canvasReCache = Math.ceil(Stat.canvasReCache / count);\r\n            Stat.frustumCulling = Math.round(Stat.frustumCulling / count);\r\n            Stat.octreeNodeCulling = Math.round(Stat.octreeNodeCulling / count);\r\n            var delay = Stat.FPS > 0 ? Math.floor(1000 / Stat.FPS).toString() : \" \";\r\n            Stat._fpsStr = Stat.FPS + (Stat.renderSlow ? \" slow\" : \"\") + \" \" + delay;\r\n            Stat._spriteStr = Stat.spriteCount + (Stat.spriteRenderUseCacheCount ? (\"/\" + Stat.spriteRenderUseCacheCount) : '');\r\n            Stat._canvasStr = Stat.canvasReCache + \"/\" + Stat.canvasNormal + \"/\" + Stat.canvasBitmap;\r\n            Stat.cpuMemory = Resource.cpuMemory;\r\n            Stat.gpuMemory = Resource.gpuMemory;\r\n            if (this._useCanvas) {\r\n                this.renderInfoPre();\r\n            }\r\n            else\r\n                this.renderInfo();\r\n            Stat.clear();\r\n        }\r\n        Stat._count = 0;\r\n        Stat._timer = timer;\r\n    }\r\n    renderInfoPre() {\r\n        var i = 0;\r\n        var one;\r\n        var value;\r\n        if (this._canvas) {\r\n            var ctx = this._ctx;\r\n            ctx.clearRect(this._first ? 0 : this._vx, 0, this._width, this._height);\r\n            for (i = 0; i < this._view.length; i++) {\r\n                one = this._view[i];\r\n                if (this._first) {\r\n                    ctx.fillStyle = \"white\";\r\n                    ctx.fillText(one.title, one.x, one.y);\r\n                }\r\n                ctx.fillStyle = one.color;\r\n                value = Stat[one.value];\r\n                (one.units == \"M\") && (value = Math.floor(value / (1024 * 1024) * 100) / 100 + \" M\");\r\n                ctx.fillText(value + \"\", one.x + this._vx, one.y);\r\n            }\r\n        }\r\n    }\r\n    renderInfo() {\r\n        var text = \"\";\r\n        for (var i = 0; i < this._view.length; i++) {\r\n            var one = this._view[i];\r\n            var value = Stat[one.value];\r\n            (one.units == \"M\") && (value = Math.floor(value / (1024 * 1024) * 100) / 100 + \" M\");\r\n            (one.units == \"K\") && (value = Math.floor(value / (1024) * 100) / 100 + \" K\");\r\n            text += value + \"\\n\";\r\n        }\r\n        this._txt.text = text;\r\n    }\r\n    isCanvasRender() {\r\n        return this._useCanvas;\r\n    }\r\n    renderNotCanvas(ctx, x, y) {\r\n        this._show && this._sp && this._sp.render(ctx, 0, 0);\r\n    }\r\n}\r\nStatUI._fontSize = 12;\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/IStatRender.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Browser.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Text.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/renders/Render.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Context.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/HTMLCanvas.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Resource.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Stat.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/.rpt2_cache/placeholder/laya/utils/StatUI.d.ts",
    "writeByteOrderMark": false,
    "text": "import { IStatRender } from \"./IStatRender\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nexport declare class StatUI extends IStatRender {\r\n    private static _fontSize;\r\n    private _txt;\r\n    private _leftText;\r\n    _sp: Sprite;\r\n    _titleSp: Sprite;\r\n    _bgSp: Sprite;\r\n    _show: boolean;\r\n    _useCanvas: boolean;\r\n    private _canvas;\r\n    private _ctx;\r\n    private _first;\r\n    private _vx;\r\n    private _width;\r\n    private _height;\r\n    private _view;\r\n    show(x?: number, y?: number): void;\r\n    private createUIPre;\r\n    private createUI;\r\n    enable(): void;\r\n    hide(): void;\r\n    set_onclick(fn: (this: GlobalEventHandlers, ev: MouseEvent) => any): void;\r\n    loop(): void;\r\n    private renderInfoPre;\r\n    private renderInfo;\r\n    isCanvasRender(): boolean;\r\n    renderNotCanvas(ctx: any, x: number, y: number): void;\r\n}\r\n"
  }
}

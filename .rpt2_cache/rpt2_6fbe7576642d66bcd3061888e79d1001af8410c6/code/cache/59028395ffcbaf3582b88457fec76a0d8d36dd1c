{
  "code": "import { Matrix } from \"../../maths/Matrix\";\r\nimport { SubmitBase } from \"../submit/SubmitBase\";\r\nimport { MeshQuadTexture } from \"../utils/MeshQuadTexture\";\r\nimport { MeshTexture } from \"../utils/MeshTexture\";\r\nimport { MeshVG } from \"../utils/MeshVG\";\r\nexport class WebGLCacheAsNormalCanvas {\r\n    constructor(ctx, sp) {\r\n        this.submitStartPos = 0;\r\n        this.submitEndPos = 0;\r\n        this.touches = [];\r\n        this.submits = [];\r\n        this.sprite = null;\r\n        this.meshlist = [];\r\n        this.cachedClipInfo = new Matrix();\r\n        this.oldTx = 0;\r\n        this.oldTy = 0;\r\n        this.invMat = new Matrix();\r\n        this.context = ctx;\r\n        this.sprite = sp;\r\n        ctx._globalClipMatrix.copyTo(this.cachedClipInfo);\r\n    }\r\n    startRec() {\r\n        let context = this.context;\r\n        if (context._charSubmitCache && context._charSubmitCache._enable) {\r\n            context._charSubmitCache.enable(false, context);\r\n            context._charSubmitCache.enable(true, context);\r\n        }\r\n        context._incache = true;\r\n        this.touches.length = 0;\r\n        context.touches = this.touches;\r\n        context._globalClipMatrix.copyTo(this.cachedClipInfo);\r\n        this.submits.length = 0;\r\n        this.submitStartPos = context._submits._length;\r\n        for (var i = 0, sz = this.meshlist.length; i < sz; i++) {\r\n            var curm = this.meshlist[i];\r\n            curm.canReuse ? (curm.releaseMesh()) : (curm.destroy());\r\n        }\r\n        this.meshlist.length = 0;\r\n        this._mesh = MeshQuadTexture.getAMesh(false);\r\n        this._pathMesh = MeshVG.getAMesh(false);\r\n        this._triangleMesh = MeshTexture.getAMesh(false);\r\n        this.meshlist.push(this._mesh);\r\n        this.meshlist.push(this._pathMesh);\r\n        this.meshlist.push(this._triangleMesh);\r\n        context._curSubmit = SubmitBase.RENDERBASE;\r\n        this._oldMesh = context._mesh;\r\n        this._oldPathMesh = context._pathMesh;\r\n        this._oldTriMesh = context._triangleMesh;\r\n        this._oldMeshList = context.meshlist;\r\n        context._mesh = this._mesh;\r\n        context._pathMesh = this._pathMesh;\r\n        context._triangleMesh = this._triangleMesh;\r\n        context.meshlist = this.meshlist;\r\n        this.oldTx = context._curMat.tx;\r\n        this.oldTy = context._curMat.ty;\r\n        context._curMat.tx = 0;\r\n        context._curMat.ty = 0;\r\n        context._curMat.copyTo(this.invMat);\r\n        this.invMat.invert();\r\n    }\r\n    endRec() {\r\n        let context = this.context;\r\n        if (context._charSubmitCache && context._charSubmitCache._enable) {\r\n            context._charSubmitCache.enable(false, context);\r\n            context._charSubmitCache.enable(true, context);\r\n        }\r\n        var parsubmits = context._submits;\r\n        this.submitEndPos = parsubmits._length;\r\n        var num = this.submitEndPos - this.submitStartPos;\r\n        for (var i = 0; i < num; i++) {\r\n            this.submits.push(parsubmits[this.submitStartPos + i]);\r\n        }\r\n        parsubmits._length -= num;\r\n        context._mesh = this._oldMesh;\r\n        context._pathMesh = this._oldPathMesh;\r\n        context._triangleMesh = this._oldTriMesh;\r\n        context.meshlist = this._oldMeshList;\r\n        context._curSubmit = SubmitBase.RENDERBASE;\r\n        context._curMat.tx = this.oldTx;\r\n        context._curMat.ty = this.oldTy;\r\n        context.touches = null;\r\n        context._incache = false;\r\n    }\r\n    isCacheValid() {\r\n        var curclip = this.context._globalClipMatrix;\r\n        if (curclip.a != this.cachedClipInfo.a || curclip.b != this.cachedClipInfo.b || curclip.c != this.cachedClipInfo.c\r\n            || curclip.d != this.cachedClipInfo.d || curclip.tx != this.cachedClipInfo.tx || curclip.ty != this.cachedClipInfo.ty)\r\n            return false;\r\n        return true;\r\n    }\r\n    flushsubmit() {\r\n        var curSubmit = SubmitBase.RENDERBASE;\r\n        this.submits.forEach(function (subm) {\r\n            if (subm == SubmitBase.RENDERBASE)\r\n                return;\r\n            SubmitBase.preRender = curSubmit;\r\n            curSubmit = subm;\r\n            subm.renderSubmit();\r\n        });\r\n    }\r\n    releaseMem() {\r\n    }\r\n}\r\nWebGLCacheAsNormalCanvas.matI = new Matrix();\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/maths/Matrix.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Context.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/submit/Submit.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/submit/SubmitBase.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/utils/Mesh2D.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/utils/MeshQuadTexture.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/utils/MeshTexture.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/webgl/utils/MeshVG.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/.rpt2_cache/placeholder/laya/webgl/canvas/WebGLCacheAsNormalCanvas.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Sprite } from \"../../display/Sprite\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Context } from \"../../resource/Context\";\r\nimport { MeshQuadTexture } from \"../utils/MeshQuadTexture\";\r\nexport declare class WebGLCacheAsNormalCanvas {\r\n    submitStartPos: number;\r\n    submitEndPos: number;\r\n    context: Context;\r\n    touches: any[];\r\n    submits: any[];\r\n    sprite: Sprite | null;\r\n    _mesh: MeshQuadTexture;\r\n    private _pathMesh;\r\n    private _triangleMesh;\r\n    meshlist: any[];\r\n    private _oldMesh;\r\n    private _oldPathMesh;\r\n    private _oldTriMesh;\r\n    private _oldMeshList;\r\n    private cachedClipInfo;\r\n    private oldTx;\r\n    private oldTy;\r\n    private static matI;\r\n    invMat: Matrix;\r\n    constructor(ctx: Context, sp: Sprite);\r\n    startRec(): void;\r\n    endRec(): void;\r\n    isCacheValid(): boolean;\r\n    flushsubmit(): void;\r\n    releaseMem(): void;\r\n}\r\n"
  }
}

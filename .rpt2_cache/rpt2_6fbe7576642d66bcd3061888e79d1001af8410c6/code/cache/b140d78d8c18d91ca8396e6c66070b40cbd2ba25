{
  "code": "import { Laya } from \"../../Laya\";\r\nimport { Graphics } from \"../display/Graphics\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { Browser } from \"../utils/Browser\";\r\nimport { Physics } from \"./Physics\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class PhysicsDebugDraw extends Sprite {\r\n    constructor() {\r\n        super();\r\n        this.m_drawFlags = 99;\r\n        if (!PhysicsDebugDraw._inited) {\r\n            PhysicsDebugDraw._inited = true;\r\n            PhysicsDebugDraw.init();\r\n        }\r\n        this._camera = {};\r\n        this._camera.m_center = new PhysicsDebugDraw.box2d.b2Vec2(0, 0);\r\n        this._camera.m_extent = 25;\r\n        this._camera.m_zoom = 1;\r\n        this._camera.m_width = 1280;\r\n        this._camera.m_height = 800;\r\n        this._mG = new Graphics();\r\n        this.graphics = this._mG;\r\n        this._textSp = new Sprite();\r\n        this._textG = this._textSp.graphics;\r\n        this.addChild(this._textSp);\r\n    }\r\n    static init() {\r\n        PhysicsDebugDraw.box2d = Browser.window.box2d;\r\n        PhysicsDebugDraw.DrawString_s_color = new PhysicsDebugDraw.box2d.b2Color(0.9, 0.6, 0.6);\r\n        PhysicsDebugDraw.DrawStringWorld_s_p = new PhysicsDebugDraw.box2d.b2Vec2();\r\n        PhysicsDebugDraw.DrawStringWorld_s_cc = new PhysicsDebugDraw.box2d.b2Vec2();\r\n        PhysicsDebugDraw.DrawStringWorld_s_color = new PhysicsDebugDraw.box2d.b2Color(0.5, 0.9, 0.5);\r\n    }\r\n    render(ctx, x, y) {\r\n        this._renderToGraphic();\r\n        super.render(ctx, x, y);\r\n    }\r\n    _renderToGraphic() {\r\n        if (this.world) {\r\n            this._textG.clear();\r\n            this._mG.clear();\r\n            this._mG.save();\r\n            this._mG.scale(Physics.PIXEL_RATIO, Physics.PIXEL_RATIO);\r\n            this.lineWidth = 1 / Physics.PIXEL_RATIO;\r\n            this.world.DrawDebugData();\r\n            this._mG.restore();\r\n        }\r\n    }\r\n    SetFlags(flags) {\r\n        this.m_drawFlags = flags;\r\n    }\r\n    GetFlags() {\r\n        return this.m_drawFlags;\r\n    }\r\n    AppendFlags(flags) {\r\n        this.m_drawFlags |= flags;\r\n    }\r\n    ClearFlags(flags) {\r\n        this.m_drawFlags &= ~flags;\r\n    }\r\n    PushTransform(xf) {\r\n        this._mG.save();\r\n        this._mG.translate(xf.p.x, xf.p.y);\r\n        this._mG.rotate(xf.q.GetAngle());\r\n    }\r\n    PopTransform(xf) {\r\n        this._mG.restore();\r\n    }\r\n    DrawPolygon(vertices, vertexCount, color) {\r\n        var i, len;\r\n        len = vertices.length;\r\n        var points;\r\n        points = [];\r\n        for (i = 0; i < vertexCount; i++) {\r\n            points.push(vertices[i].x, vertices[i].y);\r\n        }\r\n        this._mG.drawPoly(0, 0, points, null, color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n    DrawSolidPolygon(vertices, vertexCount, color) {\r\n        var i, len;\r\n        len = vertices.length;\r\n        var points;\r\n        points = [];\r\n        for (i = 0; i < vertexCount; i++) {\r\n            points.push(vertices[i].x, vertices[i].y);\r\n        }\r\n        this._mG.drawPoly(0, 0, points, color.MakeStyleString(0.5), color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n    DrawCircle(center, radius, color) {\r\n        this._mG.drawCircle(center.x, center.y, radius, null, color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n    DrawSolidCircle(center, radius, axis, color) {\r\n        var cx = center.x;\r\n        var cy = center.y;\r\n        this._mG.drawCircle(cx, cy, radius, color.MakeStyleString(0.5), color.MakeStyleString(1), this.lineWidth);\r\n        this._mG.drawLine(cx, cy, (cx + axis.x * radius), (cy + axis.y * radius), color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n    DrawParticles(centers, radius, colors, count) {\r\n        if (colors !== null) {\r\n            for (var i = 0; i < count; ++i) {\r\n                var center = centers[i];\r\n                var color = colors[i];\r\n                this._mG.drawCircle(center.x, center.y, radius, color.MakeStyleString(), null, this.lineWidth);\r\n            }\r\n        }\r\n        else {\r\n            for (i = 0; i < count; ++i) {\r\n                center = centers[i];\r\n                this._mG.drawCircle(center.x, center.y, radius, \"#ffff00\", null, this.lineWidth);\r\n            }\r\n        }\r\n    }\r\n    DrawSegment(p1, p2, color) {\r\n        this._mG.drawLine(p1.x, p1.y, p2.x, p2.y, color.MakeStyleString(1), this.lineWidth);\r\n    }\r\n    DrawTransform(xf) {\r\n        this.PushTransform(xf);\r\n        this._mG.drawLine(0, 0, 1, 0, PhysicsDebugDraw.box2d.b2Color.RED.MakeStyleString(1), this.lineWidth);\r\n        this._mG.drawLine(0, 0, 0, 1, PhysicsDebugDraw.box2d.b2Color.GREEN.MakeStyleString(1), this.lineWidth);\r\n        this.PopTransform(xf);\r\n    }\r\n    DrawPoint(p, size, color) {\r\n        size *= this._camera.m_zoom;\r\n        size /= this._camera.m_extent;\r\n        var hsize = size / 2;\r\n        this._mG.drawRect(p.x - hsize, p.y - hsize, size, size, color.MakeStyleString(), null);\r\n    }\r\n    DrawString(x, y, message) {\r\n        this._textG.fillText(message, x, y, \"15px DroidSans\", PhysicsDebugDraw.DrawString_s_color.MakeStyleString(), \"left\");\r\n    }\r\n    DrawStringWorld(x, y, message) {\r\n        this.DrawString(x, y, message);\r\n    }\r\n    DrawAABB(aabb, color) {\r\n        var x = aabb.lowerBound.x;\r\n        var y = aabb.lowerBound.y;\r\n        var w = aabb.upperBound.x - aabb.lowerBound.x;\r\n        var h = aabb.upperBound.y - aabb.lowerBound.y;\r\n        this._mG.drawRect(x, y, w, h, null, color.MakeStyleString(), this.lineWidth);\r\n    }\r\n    static enable(flags = 99) {\r\n        if (!PhysicsDebugDraw.I) {\r\n            var debug = new PhysicsDebugDraw();\r\n            debug.world = Physics.I.world;\r\n            debug.world.SetDebugDraw(debug);\r\n            debug.zOrder = 1000;\r\n            debug.m_drawFlags = flags;\r\n            Laya.stage.addChild(debug);\r\n            PhysicsDebugDraw.I = debug;\r\n        }\r\n        return debug;\r\n    }\r\n}\r\nPhysicsDebugDraw._inited = false;\r\nClassUtils.regClass(\"laya.physics.PhysicsDebugDraw\", PhysicsDebugDraw);\r\nClassUtils.regClass(\"Laya.PhysicsDebugDraw\", PhysicsDebugDraw);\r\n",
  "references": [
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/Laya.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Graphics.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/resource/Context.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/Browser.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/physics/Physics.ts",
    "/Users/zonst/Documents/font_vivo/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font_vivo/font_game_2.10/.rpt2_cache/placeholder/laya/physics/PhysicsDebugDraw.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Sprite } from \"../display/Sprite\";\r\nimport { Context } from \"../resource/Context\";\r\nexport declare class PhysicsDebugDraw extends Sprite {\r\n    m_drawFlags: number;\r\n    static box2d: any;\r\n    static DrawString_s_color: any;\r\n    static DrawStringWorld_s_p: any;\r\n    static DrawStringWorld_s_cc: any;\r\n    static DrawStringWorld_s_color: any;\r\n    world: any;\r\n    private _camera;\r\n    private static _canvas;\r\n    private static _inited;\r\n    private _mG;\r\n    private _textSp;\r\n    private _textG;\r\n    static init(): void;\r\n    constructor();\r\n    render(ctx: Context, x: number, y: number): void;\r\n    private lineWidth;\r\n    private _renderToGraphic;\r\n    SetFlags(flags: number): void;\r\n    GetFlags(): number;\r\n    AppendFlags(flags: number): void;\r\n    ClearFlags(flags: any): void;\r\n    PushTransform(xf: any): void;\r\n    PopTransform(xf: any): void;\r\n    DrawPolygon(vertices: any, vertexCount: any, color: any): void;\r\n    DrawSolidPolygon(vertices: any, vertexCount: any, color: any): void;\r\n    DrawCircle(center: any, radius: any, color: any): void;\r\n    DrawSolidCircle(center: any, radius: any, axis: any, color: any): void;\r\n    DrawParticles(centers: any, radius: any, colors: any, count: any): void;\r\n    DrawSegment(p1: any, p2: any, color: any): void;\r\n    DrawTransform(xf: any): void;\r\n    DrawPoint(p: any, size: any, color: any): void;\r\n    DrawString(x: any, y: any, message: any): void;\r\n    DrawStringWorld(x: any, y: any, message: any): void;\r\n    DrawAABB(aabb: any, color: any): void;\r\n    static I: PhysicsDebugDraw;\r\n    static enable(flags?: number): PhysicsDebugDraw;\r\n}\r\n"
  }
}

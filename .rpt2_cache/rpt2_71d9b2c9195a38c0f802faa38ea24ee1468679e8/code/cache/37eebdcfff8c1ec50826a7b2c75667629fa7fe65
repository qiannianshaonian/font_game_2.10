{
  "code": "import { Pool } from \"./Pool\";\r\nimport { Const } from \"../Const\";\r\nimport { Component } from \"../components/Component\";\r\nimport { FrameAnimation } from \"../display/FrameAnimation\";\r\nimport { Node } from \"../display/Node\";\r\nimport { WeakObject } from './WeakObject';\r\nexport class SceneUtils {\r\n    static __init() {\r\n        SceneUtils._funMap = new WeakObject();\r\n    }\r\n    static getBindFun(value) {\r\n        var fun = SceneUtils._funMap.get(value);\r\n        if (fun == null) {\r\n            var temp = \"\\\"\" + value + \"\\\"\";\r\n            temp = temp.replace(/^\"\\${|}\"$/g, \"\").replace(/\\${/g, \"\\\"+\").replace(/}/g, \"+\\\"\");\r\n            var str = \"(function(data){if(data==null)return;with(data){try{\\nreturn \" + temp + \"\\n}catch(e){}}})\";\r\n            fun = window.Laya._runScript(str);\r\n            SceneUtils._funMap.set(value, fun);\r\n        }\r\n        return fun;\r\n    }\r\n    static createByData(root, uiView) {\r\n        var tInitTool = InitTool.create();\r\n        root = SceneUtils.createComp(uiView, root, root, null, tInitTool);\r\n        root._setBit(Const.NOT_READY, true);\r\n        if (\"_idMap\" in root) {\r\n            root[\"_idMap\"] = tInitTool._idMap;\r\n        }\r\n        if (uiView.animations) {\r\n            var anilist = [];\r\n            var animations = uiView.animations;\r\n            var i, len = animations.length;\r\n            var tAni;\r\n            var tAniO;\r\n            for (i = 0; i < len; i++) {\r\n                tAni = new FrameAnimation();\r\n                tAniO = animations[i];\r\n                tAni._setUp(tInitTool._idMap, tAniO);\r\n                root[tAniO.name] = tAni;\r\n                tAni._setControlNode(root);\r\n                switch (tAniO.action) {\r\n                    case 1:\r\n                        tAni.play(0, false);\r\n                        break;\r\n                    case 2:\r\n                        tAni.play(0, true);\r\n                        break;\r\n                }\r\n                anilist.push(tAni);\r\n            }\r\n            root._aniList = anilist;\r\n        }\r\n        if (root._$componentType === \"Scene\" && root._width > 0 && uiView.props.hitTestPrior == null && !root.mouseThrough)\r\n            root.hitTestPrior = true;\r\n        tInitTool.beginLoad(root);\r\n        return root;\r\n    }\r\n    static createInitTool() {\r\n        return InitTool.create();\r\n    }\r\n    static createComp(uiView, comp = null, view = null, dataMap = null, initTool = null) {\r\n        if (uiView.type == \"Scene3D\" || uiView.type == \"Sprite3D\") {\r\n            var outBatchSprits = [];\r\n            var scene3D = ILaya.Laya[\"Utils3D\"]._createSceneByJsonForMaker(uiView, outBatchSprits, initTool);\r\n            if (uiView.type == \"Sprite3D\")\r\n                ILaya.Laya[\"StaticBatchManager\"].combine(scene3D, outBatchSprits);\r\n            else\r\n                ILaya.Laya[\"StaticBatchManager\"].combine(null, outBatchSprits);\r\n            return scene3D;\r\n        }\r\n        comp = comp || SceneUtils.getCompInstance(uiView);\r\n        if (!comp) {\r\n            if (uiView.props && uiView.props.runtime)\r\n                console.warn(\"runtime not found:\" + uiView.props.runtime);\r\n            else\r\n                console.warn(\"can not create:\" + uiView.type);\r\n            return null;\r\n        }\r\n        var child = uiView.child;\r\n        if (child) {\r\n            var isList = comp[\"_$componentType\"] == \"List\";\r\n            for (var i = 0, n = child.length; i < n; i++) {\r\n                var node = child[i];\r\n                if ('itemRender' in comp && (node.props.name == \"render\" || node.props.renderType === \"render\")) {\r\n                    comp[\"itemRender\"] = node;\r\n                }\r\n                else if (node.type == \"Graphic\") {\r\n                    ILaya.ClassUtils._addGraphicsToSprite(node, comp);\r\n                }\r\n                else if (ILaya.ClassUtils._isDrawType(node.type)) {\r\n                    ILaya.ClassUtils._addGraphicToSprite(node, comp, true);\r\n                }\r\n                else {\r\n                    if (isList) {\r\n                        var arr = [];\r\n                        var tChild = SceneUtils.createComp(node, null, view, arr, initTool);\r\n                        if (arr.length)\r\n                            tChild[\"_$bindData\"] = arr;\r\n                    }\r\n                    else {\r\n                        tChild = SceneUtils.createComp(node, null, view, dataMap, initTool);\r\n                    }\r\n                    if (node.type == \"Script\") {\r\n                        if (tChild instanceof Component) {\r\n                            comp._addComponentInstance(tChild);\r\n                        }\r\n                        else {\r\n                            if (\"owner\" in tChild) {\r\n                                tChild[\"owner\"] = comp;\r\n                            }\r\n                            else if (\"target\" in tChild) {\r\n                                tChild[\"target\"] = comp;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (node.props.renderType == \"mask\" || node.props.name == \"mask\") {\r\n                        comp.mask = tChild;\r\n                    }\r\n                    else {\r\n                        tChild instanceof Node && comp.addChild(tChild);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var props = uiView.props;\r\n        for (var prop in props) {\r\n            var value = props[prop];\r\n            if (typeof (value) == 'string' && (value.indexOf(\"@node:\") >= 0 || value.indexOf(\"@Prefab:\") >= 0)) {\r\n                if (initTool) {\r\n                    initTool.addNodeRef(comp, prop, value);\r\n                }\r\n            }\r\n            else\r\n                SceneUtils.setCompValue(comp, prop, value, view, dataMap);\r\n        }\r\n        if (comp._afterInited) {\r\n            comp._afterInited();\r\n        }\r\n        if (uiView.compId && initTool && initTool._idMap) {\r\n            initTool._idMap[uiView.compId] = comp;\r\n        }\r\n        return comp;\r\n    }\r\n    static setCompValue(comp, prop, value, view = null, dataMap = null) {\r\n        if (typeof (value) == 'string' && value.indexOf(\"${\") > -1) {\r\n            SceneUtils._sheet || (SceneUtils._sheet = ILaya.ClassUtils.getClass(\"laya.data.Table\"));\r\n            if (!SceneUtils._sheet) {\r\n                console.warn(\"Can not find class Sheet\");\r\n                return;\r\n            }\r\n            if (dataMap) {\r\n                dataMap.push(comp, prop, value);\r\n            }\r\n            else if (view) {\r\n                if (value.indexOf(\"].\") == -1) {\r\n                    value = value.replace(\".\", \"[0].\");\r\n                }\r\n                var watcher = new DataWatcher(comp, prop, value);\r\n                watcher.exe(view);\r\n                var one, temp;\r\n                var str = value.replace(/\\[.*?\\]\\./g, \".\");\r\n                while ((one = SceneUtils._parseWatchData.exec(str)) != null) {\r\n                    var key1 = one[1];\r\n                    while ((temp = SceneUtils._parseKeyWord.exec(key1)) != null) {\r\n                        var key2 = temp[0];\r\n                        var arr = (view._watchMap[key2] || (view._watchMap[key2] = []));\r\n                        arr.push(watcher);\r\n                        SceneUtils._sheet.I.notifer.on(key2, view, view.changeData, [key2]);\r\n                    }\r\n                    arr = (view._watchMap[key1] || (view._watchMap[key1] = []));\r\n                    arr.push(watcher);\r\n                    SceneUtils._sheet.I.notifer.on(key1, view, view.changeData, [key1]);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        if (prop === \"var\" && view) {\r\n            view[value] = comp;\r\n        }\r\n        else {\r\n            comp[prop] = (value === \"true\" ? true : (value === \"false\" ? false : value));\r\n        }\r\n    }\r\n    static getCompInstance(json) {\r\n        if (json.type == \"UIView\") {\r\n            if (json.props && json.props.pageData) {\r\n                return SceneUtils.createByData(null, json.props.pageData);\r\n            }\r\n        }\r\n        var runtime = (json.props && json.props.runtime) || json.type;\r\n        var compClass = ILaya.ClassUtils.getClass(runtime);\r\n        if (!compClass)\r\n            throw \"Can not find class \" + runtime;\r\n        if (json.type === \"Script\" && compClass.prototype._doAwake) {\r\n            var comp = Pool.createByClass(compClass);\r\n            comp._destroyed = false;\r\n            return comp;\r\n        }\r\n        if (json.props && \"renderType\" in json.props && json.props[\"renderType\"] == \"instance\") {\r\n            if (!compClass[\"instance\"])\r\n                compClass[\"instance\"] = new compClass();\r\n            return compClass[\"instance\"];\r\n        }\r\n        return new compClass();\r\n    }\r\n}\r\nSceneUtils._parseWatchData = /\\${(.*?)}/g;\r\nSceneUtils._parseKeyWord = /[a-zA-Z_][a-zA-Z0-9_]*(?:(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)+)/g;\r\nimport { Loader } from \"../net/Loader\";\r\nimport { Handler } from \"./Handler\";\r\nimport { ILaya } from \"../../ILaya\";\r\nclass DataWatcher {\r\n    constructor(comp, prop, value) {\r\n        this.comp = comp;\r\n        this.prop = prop;\r\n        this.value = value;\r\n    }\r\n    exe(view) {\r\n        var fun = SceneUtils.getBindFun(this.value);\r\n        this.comp[this.prop] = fun.call(this, view);\r\n    }\r\n}\r\nclass InitTool {\r\n    reset() {\r\n        this._nodeRefList = null;\r\n        this._initList = null;\r\n        this._idMap = null;\r\n        this._loadList = null;\r\n        this._scene = null;\r\n    }\r\n    recover() {\r\n        this.reset();\r\n        Pool.recover(\"InitTool\", this);\r\n    }\r\n    static create() {\r\n        var tool = Pool.getItemByClass(\"InitTool\", InitTool);\r\n        tool._idMap = [];\r\n        return tool;\r\n    }\r\n    addLoadRes(url, type = null) {\r\n        if (!this._loadList)\r\n            this._loadList = [];\r\n        if (ILaya.loader.getRes(url)) {\r\n            return;\r\n        }\r\n        if (!type) {\r\n            this._loadList.push(url);\r\n        }\r\n        else {\r\n            this._loadList.push({ url: url, type: type });\r\n        }\r\n    }\r\n    addNodeRef(node, prop, referStr) {\r\n        if (!this._nodeRefList)\r\n            this._nodeRefList = [];\r\n        this._nodeRefList.push([node, prop, referStr]);\r\n        if (referStr.indexOf(\"@Prefab:\") >= 0) {\r\n            this.addLoadRes(referStr.replace(\"@Prefab:\", \"\"), Loader.PREFAB);\r\n        }\r\n    }\r\n    setNodeRef() {\r\n        if (!this._nodeRefList)\r\n            return;\r\n        if (!this._idMap) {\r\n            this._nodeRefList = null;\r\n            return;\r\n        }\r\n        var i, len;\r\n        len = this._nodeRefList.length;\r\n        var tRefInfo;\r\n        for (i = 0; i < len; i++) {\r\n            tRefInfo = this._nodeRefList[i];\r\n            tRefInfo[0][tRefInfo[1]] = this.getReferData(tRefInfo[2]);\r\n        }\r\n        this._nodeRefList = null;\r\n    }\r\n    getReferData(referStr) {\r\n        if (referStr.indexOf(\"@Prefab:\") >= 0) {\r\n            var prefab;\r\n            prefab = Loader.getRes(referStr.replace(\"@Prefab:\", \"\"));\r\n            return prefab;\r\n        }\r\n        else if (referStr.indexOf(\"@arr:\") >= 0) {\r\n            referStr = referStr.replace(\"@arr:\", \"\");\r\n            var list;\r\n            list = referStr.split(\",\");\r\n            var i, len;\r\n            var tStr;\r\n            len = list.length;\r\n            for (i = 0; i < len; i++) {\r\n                tStr = list[i];\r\n                if (tStr) {\r\n                    list[i] = this._idMap[tStr.replace(\"@node:\", \"\")];\r\n                }\r\n                else {\r\n                    list[i] = null;\r\n                }\r\n            }\r\n            return list;\r\n        }\r\n        else {\r\n            return this._idMap[referStr.replace(\"@node:\", \"\")];\r\n        }\r\n    }\r\n    addInitItem(item) {\r\n        if (!this._initList)\r\n            this._initList = [];\r\n        this._initList.push(item);\r\n    }\r\n    doInits() {\r\n        if (!this._initList)\r\n            return;\r\n        this._initList = null;\r\n    }\r\n    finish() {\r\n        this.setNodeRef();\r\n        this.doInits();\r\n        this._scene._setBit(Const.NOT_READY, false);\r\n        if (this._scene.parent && this._scene.parent.activeInHierarchy && this._scene.active)\r\n            this._scene._processActive();\r\n        this._scene.event(\"onViewCreated\");\r\n        this.recover();\r\n    }\r\n    beginLoad(scene) {\r\n        this._scene = scene;\r\n        if (!this._loadList || this._loadList.length < 1) {\r\n            this.finish();\r\n        }\r\n        else {\r\n            ILaya.loader.load(this._loadList, Handler.create(this, this.finish));\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Pool.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/Const.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/components/Component.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/FrameAnimation.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Node.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/WeakObject.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/components/Prefab.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Scene.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/net/Loader.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Handler.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/net/LoaderManager.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/SceneUtils.d.ts",
    "writeByteOrderMark": false,
    "text": "export declare class SceneUtils {\r\n    private static _funMap;\r\n    private static _parseWatchData;\r\n    private static _parseKeyWord;\r\n    static _sheet: any;\r\n    static __init(): void;\r\n    static getBindFun(value: string): Function;\r\n    static createByData(root: any, uiView: any): any;\r\n    static createInitTool(): InitTool;\r\n    static createComp(uiView: any, comp?: any, view?: any, dataMap?: any[], initTool?: InitTool): any;\r\n    private static setCompValue;\r\n    static getCompInstance(json: any): any;\r\n}\r\nimport { Scene } from \"../display/Scene\";\r\ndeclare class InitTool {\r\n    private _nodeRefList;\r\n    private _initList;\r\n    private _loadList;\r\n    _idMap: any[];\r\n    _scene: Scene;\r\n    reset(): void;\r\n    recover(): void;\r\n    static create(): InitTool;\r\n    addLoadRes(url: string, type?: string): void;\r\n    addNodeRef(node: any, prop: string, referStr: string): void;\r\n    setNodeRef(): void;\r\n    getReferData(referStr: string): any;\r\n    addInitItem(item: any): void;\r\n    doInits(): void;\r\n    finish(): void;\r\n    beginLoad(scene: Scene): void;\r\n}\r\nexport {};\r\n"
  }
}

{
  "code": "export class TfConstraint {\r\n    constructor(data, bones) {\r\n        this._temp = [];\r\n        this._data = data;\r\n        if (this._bones == null) {\r\n            this._bones = [];\r\n        }\r\n        this.target = bones[data.targetIndex];\r\n        var j, n;\r\n        for (j = 0, n = data.boneIndexs.length; j < n; j++) {\r\n            this._bones.push(bones[data.boneIndexs[j]]);\r\n        }\r\n        this.rotateMix = data.rotateMix;\r\n        this.translateMix = data.translateMix;\r\n        this.scaleMix = data.scaleMix;\r\n        this.shearMix = data.shearMix;\r\n    }\r\n    apply() {\r\n        var tTfBone;\r\n        var ta = this.target.resultMatrix.a, tb = this.target.resultMatrix.b, tc = this.target.resultMatrix.c, td = this.target.resultMatrix.d;\r\n        for (var j = 0, n = this._bones.length; j < n; j++) {\r\n            tTfBone = this._bones[j];\r\n            if (this.rotateMix > 0) {\r\n                var a = tTfBone.resultMatrix.a, b = tTfBone.resultMatrix.b, c = tTfBone.resultMatrix.c, d = tTfBone.resultMatrix.d;\r\n                var r = Math.atan2(tc, ta) - Math.atan2(c, a) + this._data.offsetRotation * Math.PI / 180;\r\n                if (r > Math.PI)\r\n                    r -= Math.PI * 2;\r\n                else if (r < -Math.PI)\r\n                    r += Math.PI * 2;\r\n                r *= this.rotateMix;\r\n                var cos = Math.cos(r), sin = Math.sin(r);\r\n                tTfBone.resultMatrix.a = cos * a - sin * c;\r\n                tTfBone.resultMatrix.b = cos * b - sin * d;\r\n                tTfBone.resultMatrix.c = sin * a + cos * c;\r\n                tTfBone.resultMatrix.d = sin * b + cos * d;\r\n            }\r\n            if (this.translateMix) {\r\n                this._temp[0] = this._data.offsetX;\r\n                this._temp[1] = this._data.offsetY;\r\n                this.target.localToWorld(this._temp);\r\n                tTfBone.resultMatrix.tx += (this._temp[0] - tTfBone.resultMatrix.tx) * this.translateMix;\r\n                tTfBone.resultMatrix.ty += (this._temp[1] - tTfBone.resultMatrix.ty) * this.translateMix;\r\n                tTfBone.updateChild();\r\n            }\r\n            if (this.scaleMix > 0) {\r\n                var bs = Math.sqrt(tTfBone.resultMatrix.a * tTfBone.resultMatrix.a + tTfBone.resultMatrix.c * tTfBone.resultMatrix.c);\r\n                var ts = Math.sqrt(ta * ta + tc * tc);\r\n                var s = bs > 0.00001 ? (bs + (ts - bs + this._data.offsetScaleX) * this.scaleMix) / bs : 0;\r\n                tTfBone.resultMatrix.a *= s;\r\n                tTfBone.resultMatrix.c *= s;\r\n                bs = Math.sqrt(tTfBone.resultMatrix.b * tTfBone.resultMatrix.b + tTfBone.resultMatrix.d * tTfBone.resultMatrix.d);\r\n                ts = Math.sqrt(tb * tb + td * td);\r\n                s = bs > 0.00001 ? (bs + (ts - bs + this._data.offsetScaleY) * this.scaleMix) / bs : 0;\r\n                tTfBone.resultMatrix.b *= s;\r\n                tTfBone.resultMatrix.d *= s;\r\n            }\r\n            if (this.shearMix > 0) {\r\n                b = tTfBone.resultMatrix.b, d = tTfBone.resultMatrix.d;\r\n                var by = Math.atan2(d, b);\r\n                r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(tTfBone.resultMatrix.c, tTfBone.resultMatrix.a));\r\n                if (r > Math.PI)\r\n                    r -= Math.PI * 2;\r\n                else if (r < -Math.PI)\r\n                    r += Math.PI * 2;\r\n                r = by + (r + this._data.offsetShearY * Math.PI / 180) * this.shearMix;\r\n                s = Math.sqrt(b * b + d * d);\r\n                tTfBone.resultMatrix.b = Math.cos(r) * s;\r\n                tTfBone.resultMatrix.d = Math.sin(r) * s;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/bone/TfConstraintData.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/bone/Bone.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/bone/TfConstraint.d.ts",
    "writeByteOrderMark": false,
    "text": "import { TfConstraintData } from \"./TfConstraintData\";\r\nimport { Bone } from \"./Bone\";\r\nexport declare class TfConstraint {\r\n    private _data;\r\n    private _bones;\r\n    target: Bone;\r\n    rotateMix: number;\r\n    translateMix: number;\r\n    scaleMix: number;\r\n    shearMix: number;\r\n    private _temp;\r\n    constructor(data: TfConstraintData, bones: Bone[]);\r\n    apply(): void;\r\n}\r\n"
  }
}

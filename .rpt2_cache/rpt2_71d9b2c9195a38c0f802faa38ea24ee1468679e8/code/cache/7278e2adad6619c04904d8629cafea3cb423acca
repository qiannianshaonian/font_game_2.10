{
  "code": "import { IPhysics } from \"./IPhysics\";\r\nimport { Laya } from \"../../Laya\";\r\nimport { ColliderBase } from \"./ColliderBase\";\r\nimport { Component } from \"../components/Component\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class RigidBody extends Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._type = \"dynamic\";\r\n        this._allowSleep = true;\r\n        this._angularVelocity = 0;\r\n        this._angularDamping = 0;\r\n        this._linearVelocity = { x: 0, y: 0 };\r\n        this._linearDamping = 0;\r\n        this._bullet = false;\r\n        this._allowRotation = true;\r\n        this._gravityScale = 1;\r\n        this.group = 0;\r\n        this.category = 1;\r\n        this.mask = -1;\r\n        this.label = \"RigidBody\";\r\n    }\r\n    _createBody() {\r\n        if (this._body || !this.owner)\r\n            return;\r\n        var sp = this.owner;\r\n        var box2d = window.box2d;\r\n        var def = new box2d.b2BodyDef();\r\n        var point = sp.localToGlobal(Point.TEMP.setTo(0, 0), false, IPhysics.Physics.I.worldRoot);\r\n        def.position.Set(point.x / IPhysics.Physics.PIXEL_RATIO, point.y / IPhysics.Physics.PIXEL_RATIO);\r\n        def.angle = Utils.toRadian(sp.rotation);\r\n        def.allowSleep = this._allowSleep;\r\n        def.angularDamping = this._angularDamping;\r\n        def.angularVelocity = this._angularVelocity;\r\n        def.bullet = this._bullet;\r\n        def.fixedRotation = !this._allowRotation;\r\n        def.gravityScale = this._gravityScale;\r\n        def.linearDamping = this._linearDamping;\r\n        var obj = this._linearVelocity;\r\n        if (obj && obj.x != 0 || obj.y != 0) {\r\n            def.linearVelocity = new box2d.b2Vec2(obj.x, obj.y);\r\n        }\r\n        def.type = box2d.b2BodyType[\"b2_\" + this._type + \"Body\"];\r\n        this._body = IPhysics.Physics.I._createBody(def);\r\n        this.resetCollider(false);\r\n    }\r\n    _onAwake() {\r\n        this._createBody();\r\n    }\r\n    _onEnable() {\r\n        var _$this = this;\r\n        this._createBody();\r\n        Laya.physicsTimer.frameLoop(1, this, this._sysPhysicToNode);\r\n        var sp = this.owner;\r\n        if (this.accessGetSetFunc(sp, \"x\", \"set\") && !sp._changeByRigidBody) {\r\n            sp._changeByRigidBody = true;\r\n            function setX(value) {\r\n                _$this.accessGetSetFunc(sp, \"x\", \"set\")(value);\r\n                _$this._sysPosToPhysic();\r\n            }\r\n            this._overSet(sp, \"x\", setX);\r\n            function setY(value) {\r\n                _$this.accessGetSetFunc(sp, \"y\", \"set\")(value);\r\n                _$this._sysPosToPhysic();\r\n            }\r\n            ;\r\n            this._overSet(sp, \"y\", setY);\r\n            function setRotation(value) {\r\n                _$this.accessGetSetFunc(sp, \"rotation\", \"set\")(value);\r\n                _$this._sysNodeToPhysic();\r\n            }\r\n            ;\r\n            this._overSet(sp, \"rotation\", setRotation);\r\n            function setScaleX(value) {\r\n                _$this.accessGetSetFunc(sp, \"scaleX\", \"set\")(value);\r\n                _$this.resetCollider(true);\r\n            }\r\n            ;\r\n            this._overSet(sp, \"scaleX\", setScaleX);\r\n            function setScaleY(value) {\r\n                _$this.accessGetSetFunc(sp, \"scaleY\", \"set\")(value);\r\n                _$this.resetCollider(true);\r\n            }\r\n            ;\r\n            this._overSet(sp, \"scaleY\", setScaleY);\r\n        }\r\n    }\r\n    accessGetSetFunc(obj, prop, accessor) {\r\n        if ([\"get\", \"set\"].indexOf(accessor) === -1) {\r\n            return;\r\n        }\r\n        let privateProp = `_$${accessor}_${prop}`;\r\n        if (obj[privateProp]) {\r\n            return obj[privateProp];\r\n        }\r\n        let ObjConstructor = obj.constructor;\r\n        let des;\r\n        while (ObjConstructor) {\r\n            des = Object.getOwnPropertyDescriptor(ObjConstructor.prototype, prop);\r\n            if (des && des[accessor]) {\r\n                obj[privateProp] = des[accessor].bind(obj);\r\n                break;\r\n            }\r\n            ObjConstructor = Object.getPrototypeOf(ObjConstructor);\r\n        }\r\n        return obj[privateProp];\r\n    }\r\n    resetCollider(resetShape) {\r\n        var comps = this.owner.getComponents(ColliderBase);\r\n        if (comps) {\r\n            for (var i = 0, n = comps.length; i < n; i++) {\r\n                var collider = comps[i];\r\n                collider.rigidBody = this;\r\n                if (resetShape)\r\n                    collider.resetShape();\r\n                else\r\n                    collider.refresh();\r\n            }\r\n        }\r\n    }\r\n    _sysPhysicToNode() {\r\n        if (this.type != \"static\" && this._body.IsAwake()) {\r\n            var pos = this._body.GetPosition();\r\n            var ang = this._body.GetAngle();\r\n            var sp = this.owner;\r\n            this.accessGetSetFunc(sp, \"rotation\", \"set\")(Utils.toAngle(ang) - sp.parent.globalRotation);\r\n            if (ang == 0) {\r\n                var point = sp.parent.globalToLocal(Point.TEMP.setTo(pos.x * IPhysics.Physics.PIXEL_RATIO + sp.pivotX, pos.y * IPhysics.Physics.PIXEL_RATIO + sp.pivotY), false, IPhysics.Physics.I.worldRoot);\r\n                sp.parent.fromParentPoint(point);\r\n                this.accessGetSetFunc(sp, \"x\", \"set\")(point.x);\r\n                this.accessGetSetFunc(sp, \"y\", \"set\")(point.y);\r\n            }\r\n            else {\r\n                point = sp.globalToLocal(Point.TEMP.setTo(pos.x * IPhysics.Physics.PIXEL_RATIO, pos.y * IPhysics.Physics.PIXEL_RATIO), false, IPhysics.Physics.I.worldRoot);\r\n                point.x += sp.pivotX;\r\n                point.y += sp.pivotY;\r\n                point = sp.toParentPoint(point);\r\n                this.accessGetSetFunc(sp, \"x\", \"set\")(point.x);\r\n                this.accessGetSetFunc(sp, \"y\", \"set\")(point.y);\r\n            }\r\n        }\r\n    }\r\n    _sysNodeToPhysic() {\r\n        var sp = this.owner;\r\n        this._body.SetAngle(Utils.toRadian(sp.rotation));\r\n        var p = sp.localToGlobal(Point.TEMP.setTo(0, 0), false, IPhysics.Physics.I.worldRoot);\r\n        this._body.SetPositionXY(p.x / IPhysics.Physics.PIXEL_RATIO, p.y / IPhysics.Physics.PIXEL_RATIO);\r\n    }\r\n    _sysPosToPhysic() {\r\n        var sp = this.owner;\r\n        var p = sp.localToGlobal(Point.TEMP.setTo(0, 0), false, IPhysics.Physics.I.worldRoot);\r\n        this._body.SetPositionXY(p.x / IPhysics.Physics.PIXEL_RATIO, p.y / IPhysics.Physics.PIXEL_RATIO);\r\n    }\r\n    _overSet(sp, prop, getfun) {\r\n        Object.defineProperty(sp, prop, { get: this.accessGetSetFunc(sp, prop, \"get\"), set: getfun, enumerable: false, configurable: true });\r\n        ;\r\n    }\r\n    _onDisable() {\r\n        Laya.physicsTimer.clear(this, this._sysPhysicToNode);\r\n        this._body && IPhysics.Physics.I._removeBody(this._body);\r\n        this._body = null;\r\n        var owner = this.owner;\r\n        if (owner._changeByRigidBody) {\r\n            this._overSet(owner, \"x\", this.accessGetSetFunc(owner, \"x\", \"set\"));\r\n            this._overSet(owner, \"y\", this.accessGetSetFunc(owner, \"y\", \"set\"));\r\n            this._overSet(owner, \"rotation\", this.accessGetSetFunc(owner, \"rotation\", \"set\"));\r\n            this._overSet(owner, \"scaleX\", this.accessGetSetFunc(owner, \"scaleX\", \"set\"));\r\n            this._overSet(owner, \"scaleY\", this.accessGetSetFunc(owner, \"scaleY\", \"set\"));\r\n            owner._changeByRigidBody = false;\r\n        }\r\n    }\r\n    getBody() {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        return this._body;\r\n    }\r\n    _getOriBody() {\r\n        return this._body;\r\n    }\r\n    get body() {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        return this._body;\r\n    }\r\n    applyForce(position, force) {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        this._body.ApplyForce(force, position);\r\n    }\r\n    applyForceToCenter(force) {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        this._body.ApplyForceToCenter(force);\r\n    }\r\n    applyLinearImpulse(position, impulse) {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        this._body.ApplyLinearImpulse(impulse, position);\r\n    }\r\n    applyLinearImpulseToCenter(impulse) {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        this._body.ApplyLinearImpulseToCenter(impulse);\r\n    }\r\n    applyTorque(torque) {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        this._body.ApplyTorque(torque);\r\n    }\r\n    setVelocity(velocity) {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        this._body.SetLinearVelocity(velocity);\r\n    }\r\n    setAngle(value) {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        this._body.SetAngle(value);\r\n        this._body.SetAwake(true);\r\n    }\r\n    getMass() {\r\n        return this._body ? this._body.GetMass() : 0;\r\n    }\r\n    getCenter() {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        var p = this._body.GetLocalCenter();\r\n        p.x = p.x * IPhysics.Physics.PIXEL_RATIO;\r\n        p.y = p.y * IPhysics.Physics.PIXEL_RATIO;\r\n        return p;\r\n    }\r\n    getWorldCenter() {\r\n        if (!this._body)\r\n            this._onAwake();\r\n        var p = this._body.GetWorldCenter();\r\n        p.x = p.x * IPhysics.Physics.PIXEL_RATIO;\r\n        p.y = p.y * IPhysics.Physics.PIXEL_RATIO;\r\n        return p;\r\n    }\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    set type(value) {\r\n        this._type = value;\r\n        if (this._body)\r\n            this._body.SetType(window.box2d.b2BodyType[\"b2_\" + this._type + \"Body\"]);\r\n    }\r\n    get gravityScale() {\r\n        return this._gravityScale;\r\n    }\r\n    set gravityScale(value) {\r\n        this._gravityScale = value;\r\n        if (this._body)\r\n            this._body.SetGravityScale(value);\r\n    }\r\n    get allowRotation() {\r\n        return this._allowRotation;\r\n    }\r\n    set allowRotation(value) {\r\n        this._allowRotation = value;\r\n        if (this._body)\r\n            this._body.SetFixedRotation(!value);\r\n    }\r\n    get allowSleep() {\r\n        return this._allowSleep;\r\n    }\r\n    set allowSleep(value) {\r\n        this._allowSleep = value;\r\n        if (this._body)\r\n            this._body.SetSleepingAllowed(value);\r\n    }\r\n    get angularDamping() {\r\n        return this._angularDamping;\r\n    }\r\n    set angularDamping(value) {\r\n        this._angularDamping = value;\r\n        if (this._body)\r\n            this._body.SetAngularDamping(value);\r\n    }\r\n    get angularVelocity() {\r\n        if (this._body)\r\n            return this._body.GetAngularVelocity();\r\n        return this._angularVelocity;\r\n    }\r\n    set angularVelocity(value) {\r\n        this._angularVelocity = value;\r\n        if (this._body)\r\n            this._body.SetAngularVelocity(value);\r\n    }\r\n    get linearDamping() {\r\n        return this._linearDamping;\r\n    }\r\n    set linearDamping(value) {\r\n        this._linearDamping = value;\r\n        if (this._body)\r\n            this._body.SetLinearDamping(value);\r\n    }\r\n    get linearVelocity() {\r\n        if (this._body) {\r\n            var vec = this._body.GetLinearVelocity();\r\n            return { x: vec.x, y: vec.y };\r\n        }\r\n        return this._linearVelocity;\r\n    }\r\n    set linearVelocity(value) {\r\n        if (!value)\r\n            return;\r\n        if (value instanceof Array) {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n        this._linearVelocity = value;\r\n        if (this._body)\r\n            this._body.SetLinearVelocity(new window.box2d.b2Vec2(value.x, value.y));\r\n    }\r\n    get bullet() {\r\n        return this._bullet;\r\n    }\r\n    set bullet(value) {\r\n        this._bullet = value;\r\n        if (this._body)\r\n            this._body.SetBullet(value);\r\n    }\r\n}\r\nClassUtils.regClass(\"laya.physics.RigidBody\", RigidBody);\r\nClassUtils.regClass(\"Laya.RigidBody\", RigidBody);\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/physics/IPhysics.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/Laya.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/physics/ColliderBase.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/components/Component.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Sprite.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Utils.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/libs/laya/physics/RigidBody.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Component } from \"../components/Component\";\r\nexport declare class RigidBody extends Component {\r\n    protected _type: string;\r\n    protected _allowSleep: boolean;\r\n    protected _angularVelocity: number;\r\n    protected _angularDamping: number;\r\n    protected _linearVelocity: any;\r\n    protected _linearDamping: number;\r\n    protected _bullet: boolean;\r\n    protected _allowRotation: boolean;\r\n    protected _gravityScale: number;\r\n    group: number;\r\n    category: number;\r\n    mask: number;\r\n    label: string;\r\n    protected _body: any;\r\n    private _createBody;\r\n    _onAwake(): void;\r\n    _onEnable(): void;\r\n    private accessGetSetFunc;\r\n    private resetCollider;\r\n    private _sysPhysicToNode;\r\n    private _sysNodeToPhysic;\r\n    private _sysPosToPhysic;\r\n    private _overSet;\r\n    protected _onDisable(): void;\r\n    getBody(): any;\r\n    _getOriBody(): any;\r\n    readonly body: any;\r\n    applyForce(position: any, force: any): void;\r\n    applyForceToCenter(force: any): void;\r\n    applyLinearImpulse(position: any, impulse: any): void;\r\n    applyLinearImpulseToCenter(impulse: any): void;\r\n    applyTorque(torque: number): void;\r\n    setVelocity(velocity: any): void;\r\n    setAngle(value: any): void;\r\n    getMass(): number;\r\n    getCenter(): any;\r\n    getWorldCenter(): any;\r\n    type: string;\r\n    gravityScale: number;\r\n    allowRotation: boolean;\r\n    allowSleep: boolean;\r\n    angularDamping: number;\r\n    angularVelocity: number;\r\n    linearDamping: number;\r\n    linearVelocity: any;\r\n    bullet: boolean;\r\n}\r\n"
  }
}

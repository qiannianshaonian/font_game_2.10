{
  "code": "import { Const } from \"../Const\";\r\nimport { SpriteConst } from \"../display/SpriteConst\";\r\nimport { Matrix } from \"../maths/Matrix\";\r\nexport class LayaGLQuickRunner {\r\n    static __init__() {\r\n        LayaGLQuickRunner.map[SpriteConst.ALPHA | SpriteConst.TRANSFORM | SpriteConst.GRAPHICS] = LayaGLQuickRunner.alpha_transform_drawLayaGL;\r\n        LayaGLQuickRunner.map[SpriteConst.ALPHA | SpriteConst.GRAPHICS] = LayaGLQuickRunner.alpha_drawLayaGL;\r\n        LayaGLQuickRunner.map[SpriteConst.TRANSFORM | SpriteConst.GRAPHICS] = LayaGLQuickRunner.transform_drawLayaGL;\r\n        LayaGLQuickRunner.map[SpriteConst.TRANSFORM | SpriteConst.CHILDS] = LayaGLQuickRunner.transform_drawNodes;\r\n        LayaGLQuickRunner.map[SpriteConst.ALPHA | SpriteConst.TRANSFORM | SpriteConst.TEXTURE] = LayaGLQuickRunner.alpha_transform_drawTexture;\r\n        LayaGLQuickRunner.map[SpriteConst.ALPHA | SpriteConst.TEXTURE] = LayaGLQuickRunner.alpha_drawTexture;\r\n        LayaGLQuickRunner.map[SpriteConst.TRANSFORM | SpriteConst.TEXTURE] = LayaGLQuickRunner.transform_drawTexture;\r\n        LayaGLQuickRunner.map[SpriteConst.GRAPHICS | SpriteConst.CHILDS] = LayaGLQuickRunner.drawLayaGL_drawNodes;\r\n    }\r\n    static transform_drawTexture(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var tex = sprite.texture;\r\n        context.saveTransform(LayaGLQuickRunner.curMat);\r\n        context.transformByMatrix(sprite.transform, x, y);\r\n        var width = sprite._width || tex.sourceWidth;\r\n        var height = sprite._height || tex.sourceHeight;\r\n        var wRate = width / tex.sourceWidth;\r\n        var hRate = height / tex.sourceHeight;\r\n        width = tex.width * wRate;\r\n        height = tex.height * hRate;\r\n        if (width <= 0 || height <= 0)\r\n            return null;\r\n        var px = -sprite.pivotX + tex.offsetX * wRate;\r\n        var py = -sprite.pivotY + tex.offsetY * hRate;\r\n        context.drawTexture(tex, px, py, width, height);\r\n        context.restoreTransform(LayaGLQuickRunner.curMat);\r\n    }\r\n    static alpha_drawTexture(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        var tex = sprite.texture;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            context.drawTexture(tex, x - style.pivotX + tex.offsetX, y - style.pivotY + tex.offsetY, sprite._width || tex.width, sprite._height || tex.height);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    static alpha_transform_drawTexture(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        var tex = sprite.texture;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            context.saveTransform(LayaGLQuickRunner.curMat);\r\n            context.transformByMatrix(sprite.transform, x, y);\r\n            context.drawTexture(tex, -style.pivotX + tex.offsetX, -style.pivotY + tex.offsetY, sprite._width || tex.width, sprite._height || tex.height);\r\n            context.restoreTransform(LayaGLQuickRunner.curMat);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    static alpha_transform_drawLayaGL(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            context.saveTransform(LayaGLQuickRunner.curMat);\r\n            context.transformByMatrix(sprite.transform, x, y);\r\n            sprite._graphics && sprite._graphics._render(sprite, context, -style.pivotX, -style.pivotY);\r\n            context.restoreTransform(LayaGLQuickRunner.curMat);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    static alpha_drawLayaGL(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            sprite._graphics && sprite._graphics._render(sprite, context, x - style.pivotX, y - style.pivotY);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    static transform_drawLayaGL(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        context.saveTransform(LayaGLQuickRunner.curMat);\r\n        context.transformByMatrix(sprite.transform, x, y);\r\n        sprite._graphics && sprite._graphics._render(sprite, context, -style.pivotX, -style.pivotY);\r\n        context.restoreTransform(LayaGLQuickRunner.curMat);\r\n    }\r\n    static transform_drawNodes(sprite, context, x, y) {\r\n        var textLastRender = sprite._getBit(Const.DRAWCALL_OPTIMIZE) && context.drawCallOptimize(true);\r\n        var style = sprite._style;\r\n        context.saveTransform(LayaGLQuickRunner.curMat);\r\n        context.transformByMatrix(sprite.transform, x, y);\r\n        x = -style.pivotX;\r\n        y = -style.pivotY;\r\n        var childs = sprite._children, n = childs.length, ele;\r\n        if (style.viewport) {\r\n            var rect = style.viewport;\r\n            var left = rect.x;\r\n            var top = rect.y;\r\n            var right = rect.right;\r\n            var bottom = rect.bottom;\r\n            var _x, _y;\r\n            for (i = 0; i < n; ++i) {\r\n                if ((ele = childs[i])._visible && ((_x = ele._x) < right && (_x + ele.width) > left && (_y = ele._y) < bottom && (_y + ele.height) > top)) {\r\n                    ele.render(context, x, y);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < n; ++i)\r\n                (ele = childs[i])._visible && ele.render(context, x, y);\r\n        }\r\n        context.restoreTransform(LayaGLQuickRunner.curMat);\r\n        textLastRender && context.drawCallOptimize(false);\r\n    }\r\n    static drawLayaGL_drawNodes(sprite, context, x, y) {\r\n        var textLastRender = sprite._getBit(Const.DRAWCALL_OPTIMIZE) && context.drawCallOptimize(true);\r\n        var style = sprite._style;\r\n        x = x - style.pivotX;\r\n        y = y - style.pivotY;\r\n        sprite._graphics && sprite._graphics._render(sprite, context, x, y);\r\n        var childs = sprite._children, n = childs.length, ele;\r\n        if (style.viewport) {\r\n            var rect = style.viewport;\r\n            var left = rect.x;\r\n            var top = rect.y;\r\n            var right = rect.right;\r\n            var bottom = rect.bottom;\r\n            var _x, _y;\r\n            for (i = 0; i < n; ++i) {\r\n                if ((ele = childs[i])._visible && ((_x = ele._x) < right && (_x + ele.width) > left && (_y = ele._y) < bottom && (_y + ele.height) > top)) {\r\n                    ele.render(context, x, y);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < n; ++i)\r\n                (ele = childs[i])._visible && ele.render(context, x, y);\r\n        }\r\n        textLastRender && context.drawCallOptimize(false);\r\n    }\r\n}\r\nLayaGLQuickRunner.map = [];\r\nLayaGLQuickRunner.curMat = new Matrix();\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/Const.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Sprite.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/SpriteConst.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/css/SpriteStyle.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Matrix.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Rectangle.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/resource/Context.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/resource/Texture.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/renders/RenderSprite.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/libs/laya/renders/LayaGLQuickRunner.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Sprite } from \"../display/Sprite\";\r\nimport { Context } from \"../resource/Context\";\r\nimport { _RenderFunction } from \"./RenderSprite\";\r\nexport declare class LayaGLQuickRunner {\r\n    static map: _RenderFunction[];\r\n    private static curMat;\r\n    static __init__(): void;\r\n    static transform_drawTexture(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    static alpha_drawTexture(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    static alpha_transform_drawTexture(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    static alpha_transform_drawLayaGL(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    static alpha_drawLayaGL(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    static transform_drawLayaGL(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    static transform_drawNodes(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    static drawLayaGL_drawNodes(sprite: Sprite, context: Context, x: number, y: number): void;\r\n}\r\n"
  }
}

{
  "code": "import { WebAudioSoundChannel } from \"./WebAudioSoundChannel\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { EventDispatcher } from \"../../events/EventDispatcher\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nexport class WebAudioSound extends EventDispatcher {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.loaded = false;\r\n        this._disposed = false;\r\n    }\r\n    static decode() {\r\n        if (WebAudioSound.buffs.length <= 0 || WebAudioSound.isDecoding) {\r\n            return;\r\n        }\r\n        WebAudioSound.isDecoding = true;\r\n        WebAudioSound.tInfo = WebAudioSound.buffs.shift();\r\n        WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo[\"buffer\"], WebAudioSound._done, WebAudioSound._fail);\r\n    }\r\n    static _done(audioBuffer) {\r\n        WebAudioSound.e.event(\"loaded:\" + WebAudioSound.tInfo.url, audioBuffer);\r\n        WebAudioSound.isDecoding = false;\r\n        WebAudioSound.decode();\r\n    }\r\n    static _fail() {\r\n        WebAudioSound.e.event(\"err:\" + WebAudioSound.tInfo.url, null);\r\n        WebAudioSound.isDecoding = false;\r\n        WebAudioSound.decode();\r\n    }\r\n    static _playEmptySound() {\r\n        if (WebAudioSound.ctx == null) {\r\n            return;\r\n        }\r\n        var source = WebAudioSound.ctx.createBufferSource();\r\n        source.buffer = WebAudioSound._miniBuffer;\r\n        source.connect(WebAudioSound.ctx.destination);\r\n        source.start(0, 0, 0);\r\n    }\r\n    static _unlock() {\r\n        if (WebAudioSound._unlocked) {\r\n            return;\r\n        }\r\n        WebAudioSound._playEmptySound();\r\n        if (WebAudioSound.ctx.state == \"running\") {\r\n            window.document.removeEventListener(\"mousedown\", WebAudioSound._unlock, true);\r\n            window.document.removeEventListener(\"touchend\", WebAudioSound._unlock, true);\r\n            window.document.removeEventListener(\"touchstart\", WebAudioSound._unlock, true);\r\n            WebAudioSound._unlocked = true;\r\n        }\r\n    }\r\n    static initWebAudio() {\r\n        if (WebAudioSound.ctx.state != \"running\") {\r\n            WebAudioSound._unlock();\r\n            window.document.addEventListener(\"mousedown\", WebAudioSound._unlock, true);\r\n            window.document.addEventListener(\"touchend\", WebAudioSound._unlock, true);\r\n            window.document.addEventListener(\"touchstart\", WebAudioSound._unlock, true);\r\n        }\r\n    }\r\n    load(url) {\r\n        var me = this;\r\n        url = URL.formatURL(url);\r\n        this.url = url;\r\n        this.audioBuffer = WebAudioSound._dataCache[url];\r\n        if (this.audioBuffer) {\r\n            this._loaded(this.audioBuffer);\r\n            return;\r\n        }\r\n        WebAudioSound.e.on(\"loaded:\" + url, this, this._loaded);\r\n        WebAudioSound.e.on(\"err:\" + url, this, this._err);\r\n        if (WebAudioSound.__loadingSound[url]) {\r\n            return;\r\n        }\r\n        WebAudioSound.__loadingSound[url] = true;\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"GET\", url, true);\r\n        request.responseType = \"arraybuffer\";\r\n        request.onload = function () {\r\n            if (me._disposed) {\r\n                me._removeLoadEvents();\r\n                return;\r\n            }\r\n            me.data = request.response;\r\n            WebAudioSound.buffs.push({ \"buffer\": me.data, \"url\": me.url });\r\n            WebAudioSound.decode();\r\n        };\r\n        request.onerror = function (e) {\r\n            me._err();\r\n        };\r\n        request.send();\r\n    }\r\n    _err() {\r\n        this._removeLoadEvents();\r\n        WebAudioSound.__loadingSound[this.url] = false;\r\n        this.event(Event.ERROR);\r\n    }\r\n    _loaded(audioBuffer) {\r\n        this._removeLoadEvents();\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n        this.audioBuffer = audioBuffer;\r\n        WebAudioSound._dataCache[this.url] = this.audioBuffer;\r\n        this.loaded = true;\r\n        this.event(Event.COMPLETE);\r\n    }\r\n    _removeLoadEvents() {\r\n        WebAudioSound.e.off(\"loaded:\" + this.url, this, this._loaded);\r\n        WebAudioSound.e.off(\"err:\" + this.url, this, this._err);\r\n    }\r\n    __playAfterLoaded() {\r\n        if (!this.__toPlays)\r\n            return;\r\n        var i, len;\r\n        var toPlays;\r\n        toPlays = this.__toPlays;\r\n        len = toPlays.length;\r\n        var tParams;\r\n        for (i = 0; i < len; i++) {\r\n            tParams = toPlays[i];\r\n            if (tParams[2] && !tParams[2].isStopped) {\r\n                this.play(tParams[0], tParams[1], tParams[2]);\r\n            }\r\n        }\r\n        this.__toPlays.length = 0;\r\n    }\r\n    play(startTime = 0, loops = 0, channel = null) {\r\n        channel = channel ? channel : new WebAudioSoundChannel();\r\n        if (!this.audioBuffer) {\r\n            if (this.url) {\r\n                if (!this.__toPlays)\r\n                    this.__toPlays = [];\r\n                this.__toPlays.push([startTime, loops, channel]);\r\n                this.once(Event.COMPLETE, this, this.__playAfterLoaded);\r\n                this.load(this.url);\r\n            }\r\n        }\r\n        channel.url = this.url;\r\n        channel.loops = loops;\r\n        channel.audioBuffer = this.audioBuffer;\r\n        channel.startTime = startTime;\r\n        channel.play();\r\n        ILaya.SoundManager.addChannel(channel);\r\n        return channel;\r\n    }\r\n    get duration() {\r\n        if (this.audioBuffer) {\r\n            return this.audioBuffer.duration;\r\n        }\r\n        return 0;\r\n    }\r\n    dispose() {\r\n        this._disposed = true;\r\n        delete WebAudioSound._dataCache[this.url];\r\n        delete WebAudioSound.__loadingSound[this.url];\r\n        this.audioBuffer = null;\r\n        this.data = null;\r\n        this.__toPlays = [];\r\n    }\r\n}\r\nWebAudioSound._dataCache = {};\r\nWebAudioSound.webAudioEnabled = window[\"AudioContext\"] || window[\"webkitAudioContext\"] || window[\"mozAudioContext\"];\r\nWebAudioSound.ctx = WebAudioSound.webAudioEnabled ? new (window[\"AudioContext\"] || window[\"webkitAudioContext\"] || window[\"mozAudioContext\"])() : undefined;\r\nWebAudioSound.buffs = [];\r\nWebAudioSound.isDecoding = false;\r\nWebAudioSound._miniBuffer = WebAudioSound.ctx ? WebAudioSound.ctx.createBuffer(1, 1, 22050) : undefined;\r\nWebAudioSound.e = new EventDispatcher();\r\nWebAudioSound._unlocked = false;\r\nWebAudioSound.__loadingSound = {};\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/media/webaudio/WebAudioSoundChannel.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/events/EventDispatcher.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/media/SoundChannel.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/net/URL.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/libs/laya/media/webaudio/WebAudioSound.d.ts",
    "writeByteOrderMark": false,
    "text": "import { WebAudioSoundChannel } from \"./WebAudioSoundChannel\";\r\nimport { EventDispatcher } from \"../../events/EventDispatcher\";\r\nimport { SoundChannel } from \"../SoundChannel\";\r\nexport declare class WebAudioSound extends EventDispatcher {\r\n    private static _dataCache;\r\n    static webAudioEnabled: boolean;\r\n    static ctx: any;\r\n    static buffs: any[];\r\n    static isDecoding: boolean;\r\n    static _miniBuffer: any;\r\n    static e: EventDispatcher;\r\n    private static _unlocked;\r\n    static tInfo: any;\r\n    private static __loadingSound;\r\n    url: string;\r\n    loaded: boolean;\r\n    data: ArrayBuffer;\r\n    audioBuffer: any;\r\n    private __toPlays;\r\n    private _disposed;\r\n    static decode(): void;\r\n    private static _done;\r\n    private static _fail;\r\n    private static _playEmptySound;\r\n    private static _unlock;\r\n    static initWebAudio(): void;\r\n    load(url: string): void;\r\n    private _err;\r\n    private _loaded;\r\n    private _removeLoadEvents;\r\n    private __playAfterLoaded;\r\n    play(startTime?: number, loops?: number, channel?: WebAudioSoundChannel): SoundChannel;\r\n    readonly duration: number;\r\n    dispose(): void;\r\n}\r\n"
  }
}

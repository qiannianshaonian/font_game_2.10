{
  "code": "import { Matrix } from \"../maths/Matrix\";\r\nimport { Graphics } from \"../display/Graphics\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { HitArea } from \"../utils/HitArea\";\r\nexport class ClassUtils {\r\n    static regClass(className, classDef) {\r\n        ClassUtils._classMap[className] = classDef;\r\n    }\r\n    static regShortClassName(classes) {\r\n        for (var i = 0; i < classes.length; i++) {\r\n            var classDef = classes[i];\r\n            var className = classDef.name;\r\n            ClassUtils._classMap[className] = classDef;\r\n        }\r\n    }\r\n    static getRegClass(className) {\r\n        return ClassUtils._classMap[className];\r\n    }\r\n    static getClass(className) {\r\n        var classObject = ClassUtils._classMap[className] || ClassUtils._classMap['Laya.' + className] || className;\r\n        var glaya = ILaya.Laya;\r\n        if (typeof (classObject) == 'string')\r\n            return (ILaya.__classMap[classObject] || glaya[className]);\r\n        return classObject;\r\n    }\r\n    static getInstance(className) {\r\n        var compClass = ClassUtils.getClass(className);\r\n        if (compClass)\r\n            return new compClass();\r\n        else\r\n            console.warn(\"[error] Undefined class:\", className);\r\n        return null;\r\n    }\r\n    static createByJson(json, node = null, root = null, customHandler = null, instanceHandler = null) {\r\n        if (typeof (json) == 'string')\r\n            json = JSON.parse(json);\r\n        var props = json.props;\r\n        if (!node) {\r\n            node = instanceHandler ? instanceHandler.runWith(json) : ClassUtils.getInstance(props.runtime || json.type);\r\n            if (!node)\r\n                return null;\r\n        }\r\n        var child = json.child;\r\n        if (child) {\r\n            for (var i = 0, n = child.length; i < n; i++) {\r\n                var data = child[i];\r\n                if ((data.props.name === \"render\" || data.props.renderType === \"render\") && node[\"_$set_itemRender\"])\r\n                    node.itemRender = data;\r\n                else {\r\n                    if (data.type == \"Graphic\") {\r\n                        ClassUtils._addGraphicsToSprite(data, node);\r\n                    }\r\n                    else if (ClassUtils._isDrawType(data.type)) {\r\n                        ClassUtils._addGraphicToSprite(data, node, true);\r\n                    }\r\n                    else {\r\n                        var tChild = ClassUtils.createByJson(data, null, root, customHandler, instanceHandler);\r\n                        if (data.type === \"Script\") {\r\n                            if (\"owner\" in tChild) {\r\n                                tChild[\"owner\"] = node;\r\n                            }\r\n                            else if (\"target\" in tChild) {\r\n                                tChild[\"target\"] = node;\r\n                            }\r\n                        }\r\n                        else if (data.props.renderType == \"mask\") {\r\n                            node.mask = tChild;\r\n                        }\r\n                        else {\r\n                            node.addChild(tChild);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (props) {\r\n            for (var prop in props) {\r\n                var value = props[prop];\r\n                if (prop === \"var\" && root) {\r\n                    root[value] = node;\r\n                }\r\n                else if (value instanceof Array && node[prop] instanceof Function) {\r\n                    node[prop].apply(node, value);\r\n                }\r\n                else {\r\n                    node[prop] = value;\r\n                }\r\n            }\r\n        }\r\n        if (customHandler && json.customProps) {\r\n            customHandler.runWith([node, json]);\r\n        }\r\n        if (node[\"created\"])\r\n            node.created();\r\n        return node;\r\n    }\r\n    static _addGraphicsToSprite(graphicO, sprite) {\r\n        var graphics = graphicO.child;\r\n        if (!graphics || graphics.length < 1)\r\n            return;\r\n        var g = ClassUtils._getGraphicsFromSprite(graphicO, sprite);\r\n        var ox = 0;\r\n        var oy = 0;\r\n        if (graphicO.props) {\r\n            ox = ClassUtils._getObjVar(graphicO.props, \"x\", 0);\r\n            oy = ClassUtils._getObjVar(graphicO.props, \"y\", 0);\r\n        }\r\n        if (ox != 0 && oy != 0) {\r\n            g.translate(ox, oy);\r\n        }\r\n        var i, len;\r\n        len = graphics.length;\r\n        for (i = 0; i < len; i++) {\r\n            ClassUtils._addGraphicToGraphics(graphics[i], g);\r\n        }\r\n        if (ox != 0 && oy != 0) {\r\n            g.translate(-ox, -oy);\r\n        }\r\n    }\r\n    static _addGraphicToSprite(graphicO, sprite, isChild = false) {\r\n        var g = isChild ? ClassUtils._getGraphicsFromSprite(graphicO, sprite) : sprite.graphics;\r\n        ClassUtils._addGraphicToGraphics(graphicO, g);\r\n    }\r\n    static _getGraphicsFromSprite(dataO, sprite) {\r\n        if (!dataO || !dataO.props)\r\n            return sprite.graphics;\r\n        var propsName = dataO.props.renderType;\r\n        if (propsName === \"hit\" || propsName === \"unHit\") {\r\n            var hitArea = sprite._style.hitArea || (sprite.hitArea = new HitArea());\r\n            if (!hitArea[propsName]) {\r\n                hitArea[propsName] = new Graphics();\r\n            }\r\n            var g = hitArea[propsName];\r\n        }\r\n        if (!g)\r\n            g = sprite.graphics;\r\n        return g;\r\n    }\r\n    static _getTransformData(propsO) {\r\n        var m;\r\n        if (\"pivotX\" in propsO || \"pivotY\" in propsO) {\r\n            m = m || new Matrix();\r\n            m.translate(-ClassUtils._getObjVar(propsO, \"pivotX\", 0), -ClassUtils._getObjVar(propsO, \"pivotY\", 0));\r\n        }\r\n        var sx = ClassUtils._getObjVar(propsO, \"scaleX\", 1), sy = ClassUtils._getObjVar(propsO, \"scaleY\", 1);\r\n        var rotate = ClassUtils._getObjVar(propsO, \"rotation\", 0);\r\n        var skewX = ClassUtils._getObjVar(propsO, \"skewX\", 0);\r\n        var skewY = ClassUtils._getObjVar(propsO, \"skewY\", 0);\r\n        if (sx != 1 || sy != 1 || rotate != 0) {\r\n            m = m || new Matrix();\r\n            m.scale(sx, sy);\r\n            m.rotate(rotate * 0.0174532922222222);\r\n        }\r\n        return m;\r\n    }\r\n    static _addGraphicToGraphics(graphicO, graphic) {\r\n        var propsO;\r\n        propsO = graphicO.props;\r\n        if (!propsO)\r\n            return;\r\n        var drawConfig;\r\n        drawConfig = ClassUtils.DrawTypeDic[graphicO.type];\r\n        if (!drawConfig)\r\n            return;\r\n        var g = graphic;\r\n        var params = ClassUtils._getParams(propsO, drawConfig[1], drawConfig[2], drawConfig[3]);\r\n        var m = ClassUtils._tM;\r\n        if (m || ClassUtils._alpha != 1) {\r\n            g.save();\r\n            if (m)\r\n                g.transform(m);\r\n            if (ClassUtils._alpha != 1)\r\n                g.alpha(ClassUtils._alpha);\r\n        }\r\n        g[drawConfig[0]].apply(g, params);\r\n        if (m || ClassUtils._alpha != 1) {\r\n            g.restore();\r\n        }\r\n    }\r\n    static _adptLineData(params) {\r\n        params[2] = parseFloat(params[0]) + parseFloat(params[2]);\r\n        params[3] = parseFloat(params[1]) + parseFloat(params[3]);\r\n        return params;\r\n    }\r\n    static _adptTextureData(params) {\r\n        params[0] = ILaya.Loader.getRes(params[0]);\r\n        return params;\r\n    }\r\n    static _adptLinesData(params) {\r\n        params[2] = ClassUtils._getPointListByStr(params[2]);\r\n        return params;\r\n    }\r\n    static _isDrawType(type) {\r\n        if (type === \"Image\")\r\n            return false;\r\n        return type in ClassUtils.DrawTypeDic;\r\n    }\r\n    static _getParams(obj, params, xPos = 0, adptFun = null) {\r\n        var rst = ClassUtils._temParam;\r\n        rst.length = params.length;\r\n        var i, len;\r\n        len = params.length;\r\n        for (i = 0; i < len; i++) {\r\n            rst[i] = ClassUtils._getObjVar(obj, params[i][0], params[i][1]);\r\n        }\r\n        ClassUtils._alpha = ClassUtils._getObjVar(obj, \"alpha\", 1);\r\n        var m;\r\n        m = ClassUtils._getTransformData(obj);\r\n        if (m) {\r\n            if (!xPos)\r\n                xPos = 0;\r\n            m.translate(rst[xPos], rst[xPos + 1]);\r\n            rst[xPos] = rst[xPos + 1] = 0;\r\n            ClassUtils._tM = m;\r\n        }\r\n        else {\r\n            ClassUtils._tM = null;\r\n        }\r\n        if (adptFun && ClassUtils[adptFun]) {\r\n            rst = ClassUtils[adptFun](rst);\r\n        }\r\n        return rst;\r\n    }\r\n    static _getPointListByStr(str) {\r\n        var pointArr = str.split(\",\");\r\n        var i, len;\r\n        len = pointArr.length;\r\n        for (i = 0; i < len; i++) {\r\n            pointArr[i] = parseFloat(pointArr[i]);\r\n        }\r\n        return pointArr;\r\n    }\r\n    static _getObjVar(obj, key, noValue) {\r\n        if (key in obj) {\r\n            return obj[key];\r\n        }\r\n        return noValue;\r\n    }\r\n}\r\nClassUtils.DrawTypeDic = { \"Rect\": [\"drawRect\", [[\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]]], \"Circle\": [\"drawCircle\", [[\"x\", 0], [\"y\", 0], [\"radius\", 0], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]]], \"Pie\": [\"drawPie\", [[\"x\", 0], [\"y\", 0], [\"radius\", 0], [\"startAngle\", 0], [\"endAngle\", 0], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]]], \"Image\": [\"drawTexture\", [[\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0]]], \"Texture\": [\"drawTexture\", [[\"skin\", null], [\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0]], 1, \"_adptTextureData\"], \"FillTexture\": [\"fillTexture\", [[\"skin\", null], [\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0], [\"repeat\", null]], 1, \"_adptTextureData\"], \"FillText\": [\"fillText\", [[\"text\", \"\"], [\"x\", 0], [\"y\", 0], [\"font\", null], [\"color\", null], [\"textAlign\", null]], 1], \"Line\": [\"drawLine\", [[\"x\", 0], [\"y\", 0], [\"toX\", 0], [\"toY\", 0], [\"lineColor\", null], [\"lineWidth\", 0]], 0, \"_adptLineData\"], \"Lines\": [\"drawLines\", [[\"x\", 0], [\"y\", 0], [\"points\", \"\"], [\"lineColor\", null], [\"lineWidth\", 0]], 0, \"_adptLinesData\"], \"Curves\": [\"drawCurves\", [[\"x\", 0], [\"y\", 0], [\"points\", \"\"], [\"lineColor\", null], [\"lineWidth\", 0]], 0, \"_adptLinesData\"], \"Poly\": [\"drawPoly\", [[\"x\", 0], [\"y\", 0], [\"points\", \"\"], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]], 0, \"_adptLinesData\"] };\r\nClassUtils._temParam = [];\r\nClassUtils._classMap = {};\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Matrix.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Handler.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Sprite.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Node.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Graphics.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/HitArea.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/ClassUtils.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Handler } from \"./Handler\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { Node } from \"../display/Node\";\r\nexport declare class ClassUtils {\r\n    private static DrawTypeDic;\r\n    private static _temParam;\r\n    private static _classMap;\r\n    private static _tM;\r\n    private static _alpha;\r\n    static regClass(className: string, classDef: any): void;\r\n    static regShortClassName(classes: any[]): void;\r\n    static getRegClass(className: string): any;\r\n    static getClass(className: string): any;\r\n    static getInstance(className: string): any;\r\n    static createByJson(json: any, node?: any, root?: Node, customHandler?: Handler, instanceHandler?: Handler): any;\r\n    static _addGraphicsToSprite(graphicO: any, sprite: Sprite): void;\r\n    static _addGraphicToSprite(graphicO: any, sprite: Sprite, isChild?: boolean): void;\r\n    private static _getGraphicsFromSprite;\r\n    private static _getTransformData;\r\n    private static _addGraphicToGraphics;\r\n    private static _adptLineData;\r\n    private static _adptTextureData;\r\n    private static _adptLinesData;\r\n    static _isDrawType(type: string): boolean;\r\n    private static _getParams;\r\n    static _getPointListByStr(str: string): any[];\r\n    private static _getObjVar;\r\n}\r\n"
  }
}

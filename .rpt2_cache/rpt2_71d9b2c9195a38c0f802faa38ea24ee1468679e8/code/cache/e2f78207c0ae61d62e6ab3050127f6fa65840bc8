{
  "code": "import { AnimationContent } from \"./AnimationContent\";\r\nimport { AnimationNodeContent } from \"./AnimationNodeContent\";\r\nimport { KeyFramesContent } from \"./KeyFramesContent\";\r\nimport { IAniLib } from \"./AniLibPack\";\r\nimport { Byte } from \"../utils/Byte\";\r\nexport class AnimationParser01 {\r\n    static parse(templet, reader) {\r\n        var data = reader.__getBuffer();\r\n        var i, j, k, n, l, m, o;\r\n        var aniClassName = reader.readUTFString();\r\n        templet._aniClassName = aniClassName;\r\n        var strList = reader.readUTFString().split(\"\\n\");\r\n        var aniCount = reader.getUint8();\r\n        var publicDataPos = reader.getUint32();\r\n        var publicExtDataPos = reader.getUint32();\r\n        var publicData;\r\n        if (publicDataPos > 0)\r\n            publicData = data.slice(publicDataPos, publicExtDataPos);\r\n        var publicRead = new Byte(publicData);\r\n        if (publicExtDataPos > 0)\r\n            templet._publicExtData = data.slice(publicExtDataPos, data.byteLength);\r\n        templet._useParent = !!reader.getUint8();\r\n        templet._anis.length = aniCount;\r\n        for (i = 0; i < aniCount; i++) {\r\n            var ani = templet._anis[i] = new AnimationContent();\r\n            ani.nodes = [];\r\n            var name = ani.name = strList[reader.getUint16()];\r\n            templet._aniMap[name] = i;\r\n            ani.bone3DMap = {};\r\n            ani.playTime = reader.getFloat32();\r\n            var boneCount = ani.nodes.length = reader.getUint8();\r\n            ani.totalKeyframeDatasLength = 0;\r\n            for (j = 0; j < boneCount; j++) {\r\n                var node = ani.nodes[j] = new AnimationNodeContent();\r\n                node.childs = [];\r\n                var nameIndex = reader.getInt16();\r\n                if (nameIndex >= 0) {\r\n                    node.name = strList[nameIndex];\r\n                    ani.bone3DMap[node.name] = j;\r\n                }\r\n                node.keyFrame = [];\r\n                node.parentIndex = reader.getInt16();\r\n                node.parentIndex == -1 ? node.parent = null : node.parent = ani.nodes[node.parentIndex];\r\n                node.lerpType = reader.getUint8();\r\n                var keyframeParamsOffset = reader.getUint32();\r\n                publicRead.pos = keyframeParamsOffset;\r\n                var keyframeDataCount = node.keyframeWidth = publicRead.getUint16();\r\n                ani.totalKeyframeDatasLength += keyframeDataCount;\r\n                if (node.lerpType === 0 || node.lerpType === 1) {\r\n                    node.interpolationMethod = [];\r\n                    node.interpolationMethod.length = keyframeDataCount;\r\n                    for (k = 0; k < keyframeDataCount; k++)\r\n                        node.interpolationMethod[k] = IAniLib.AnimationTemplet.interpolation[publicRead.getUint8()];\r\n                }\r\n                if (node.parent != null)\r\n                    node.parent.childs.push(node);\r\n                var privateDataLen = reader.getUint16();\r\n                if (privateDataLen > 0) {\r\n                    node.extenData = data.slice(reader.pos, reader.pos + privateDataLen);\r\n                    reader.pos += privateDataLen;\r\n                }\r\n                var keyframeCount = reader.getUint16();\r\n                node.keyFrame.length = keyframeCount;\r\n                var startTime = 0;\r\n                var keyFrame;\r\n                for (k = 0, n = keyframeCount; k < n; k++) {\r\n                    keyFrame = node.keyFrame[k] = new KeyFramesContent();\r\n                    keyFrame.duration = reader.getFloat32();\r\n                    keyFrame.startTime = startTime;\r\n                    if (node.lerpType === 2) {\r\n                        keyFrame.interpolationData = [];\r\n                        var interDataLength = reader.getUint8();\r\n                        var lerpType;\r\n                        lerpType = reader.getFloat32();\r\n                        switch (lerpType) {\r\n                            case 254:\r\n                                keyFrame.interpolationData.length = keyframeDataCount;\r\n                                for (o = 0; o < keyframeDataCount; o++)\r\n                                    keyFrame.interpolationData[o] = 0;\r\n                                break;\r\n                            case 255:\r\n                                keyFrame.interpolationData.length = keyframeDataCount;\r\n                                for (o = 0; o < keyframeDataCount; o++)\r\n                                    keyFrame.interpolationData[o] = 5;\r\n                                break;\r\n                            default:\r\n                                keyFrame.interpolationData.push(lerpType);\r\n                                for (m = 1; m < interDataLength; m++) {\r\n                                    keyFrame.interpolationData.push(reader.getFloat32());\r\n                                }\r\n                        }\r\n                    }\r\n                    keyFrame.data = new Float32Array(keyframeDataCount);\r\n                    keyFrame.dData = new Float32Array(keyframeDataCount);\r\n                    keyFrame.nextData = new Float32Array(keyframeDataCount);\r\n                    for (l = 0; l < keyframeDataCount; l++) {\r\n                        keyFrame.data[l] = reader.getFloat32();\r\n                        if (keyFrame.data[l] > -0.00000001 && keyFrame.data[l] < 0.00000001)\r\n                            keyFrame.data[l] = 0;\r\n                    }\r\n                    startTime += keyFrame.duration;\r\n                }\r\n                keyFrame.startTime = ani.playTime;\r\n                node.playTime = ani.playTime;\r\n                templet._calculateKeyFrame(node, keyframeCount, keyframeDataCount);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/AnimationTemplet.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/AnimationContent.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/AnimationNodeContent.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/KeyFramesContent.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/AniLibPack.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Byte.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/libs/laya/ani/AnimationParser01.d.ts",
    "writeByteOrderMark": false,
    "text": "import { AnimationTemplet } from \"./AnimationTemplet\";\r\nimport { Byte } from \"../utils/Byte\";\r\nexport declare class AnimationParser01 {\r\n    static parse(templet: AnimationTemplet, reader: Byte): void;\r\n}\r\n"
  }
}

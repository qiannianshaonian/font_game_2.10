{
  "code": "import { Sprite } from \"./Sprite\";\r\nimport { Config } from \"./../../Config\";\r\nimport { Const } from \"../Const\";\r\nimport { Event } from \"../events/Event\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class AnimationBase extends Sprite {\r\n    constructor() {\r\n        super();\r\n        this.wrapMode = 0;\r\n        this._interval = Config.animationInterval;\r\n        this._isReverse = false;\r\n        this._frameRateChanged = false;\r\n        this._setBitUp(Const.DISPLAY);\r\n    }\r\n    play(start = 0, loop = true, name = \"\") {\r\n        this._isPlaying = true;\r\n        this._actionName = name;\r\n        this.index = (typeof (start) == 'string') ? this._getFrameByLabel(start) : start;\r\n        this.loop = loop;\r\n        this._isReverse = this.wrapMode === AnimationBase.WRAP_REVERSE;\r\n        if (this.index == 0 && this._isReverse) {\r\n            this.index = this.count - 1;\r\n        }\r\n        if (this.interval > 0)\r\n            this.timerLoop(this.interval, this, this._frameLoop, null, true, true);\r\n    }\r\n    get interval() {\r\n        return this._interval;\r\n    }\r\n    set interval(value) {\r\n        if (this._interval != value) {\r\n            this._frameRateChanged = true;\r\n            this._interval = value;\r\n            if (this._isPlaying && value > 0) {\r\n                this.timerLoop(value, this, this._frameLoop, null, true, true);\r\n            }\r\n        }\r\n    }\r\n    _getFrameByLabel(label) {\r\n        for (var i = 0; i < this._count; i++) {\r\n            var item = this._labels[i];\r\n            if (item && item.indexOf(label) > -1)\r\n                return i;\r\n        }\r\n        return 0;\r\n    }\r\n    _frameLoop() {\r\n        if (!this._controlNode || this._controlNode.destroyed) {\r\n            this.clearTimer(this, this._frameLoop);\r\n            return;\r\n        }\r\n        if (this._isReverse) {\r\n            this._index--;\r\n            if (this._index < 0) {\r\n                if (this.loop) {\r\n                    if (this.wrapMode == AnimationBase.WRAP_PINGPONG) {\r\n                        this._index = this._count > 0 ? 1 : 0;\r\n                        this._isReverse = false;\r\n                    }\r\n                    else {\r\n                        this._index = this._count - 1;\r\n                    }\r\n                    this.event(Event.COMPLETE);\r\n                }\r\n                else {\r\n                    this._index = 0;\r\n                    this.stop();\r\n                    this.event(Event.COMPLETE);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._index++;\r\n            if (this._index >= this._count) {\r\n                if (this.loop) {\r\n                    if (this.wrapMode == AnimationBase.WRAP_PINGPONG) {\r\n                        this._index = this._count - 2 >= 0 ? this._count - 2 : 0;\r\n                        this._isReverse = true;\r\n                    }\r\n                    else {\r\n                        this._index = 0;\r\n                    }\r\n                    this.event(Event.COMPLETE);\r\n                }\r\n                else {\r\n                    this._index--;\r\n                    this.stop();\r\n                    this.event(Event.COMPLETE);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this.index = this._index;\r\n    }\r\n    _setControlNode(node) {\r\n        if (this._controlNode) {\r\n            this._controlNode.off(Event.DISPLAY, this, this._resumePlay);\r\n            this._controlNode.off(Event.UNDISPLAY, this, this._resumePlay);\r\n        }\r\n        this._controlNode = node;\r\n        if (node && node != this) {\r\n            node.on(Event.DISPLAY, this, this._resumePlay);\r\n            node.on(Event.UNDISPLAY, this, this._resumePlay);\r\n        }\r\n    }\r\n    _setDisplay(value) {\r\n        super._setDisplay(value);\r\n        this._resumePlay();\r\n    }\r\n    _resumePlay() {\r\n        if (this._isPlaying) {\r\n            if (this._controlNode.displayedInStage)\r\n                this.play(this._index, this.loop, this._actionName);\r\n            else\r\n                this.clearTimer(this, this._frameLoop);\r\n        }\r\n    }\r\n    stop() {\r\n        this._isPlaying = false;\r\n        this.clearTimer(this, this._frameLoop);\r\n    }\r\n    get isPlaying() {\r\n        return this._isPlaying;\r\n    }\r\n    addLabel(label, index) {\r\n        if (!this._labels)\r\n            this._labels = {};\r\n        if (!this._labels[index])\r\n            this._labels[index] = [];\r\n        this._labels[index].push(label);\r\n    }\r\n    removeLabel(label) {\r\n        if (!label)\r\n            this._labels = null;\r\n        else if (this._labels) {\r\n            for (var name in this._labels) {\r\n                this._removeLabelFromList(this._labels[name], label);\r\n            }\r\n        }\r\n    }\r\n    _removeLabelFromList(list, label) {\r\n        if (!list)\r\n            return;\r\n        for (var i = list.length - 1; i >= 0; i--) {\r\n            if (list[i] == label) {\r\n                list.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    gotoAndStop(position) {\r\n        this.index = (typeof (position) == 'string') ? this._getFrameByLabel(position) : position;\r\n        this.stop();\r\n    }\r\n    get index() {\r\n        return this._index;\r\n    }\r\n    set index(value) {\r\n        this._index = value;\r\n        this._displayToIndex(value);\r\n        if (this._labels && this._labels[value]) {\r\n            var tArr = this._labels[value];\r\n            for (var i = 0, len = tArr.length; i < len; i++) {\r\n                this.event(Event.LABEL, tArr[i]);\r\n            }\r\n        }\r\n    }\r\n    _displayToIndex(value) {\r\n    }\r\n    get count() {\r\n        return this._count;\r\n    }\r\n    clear() {\r\n        this.stop();\r\n        this._labels = null;\r\n        return this;\r\n    }\r\n}\r\nAnimationBase.WRAP_POSITIVE = 0;\r\nAnimationBase.WRAP_REVERSE = 1;\r\nAnimationBase.WRAP_PINGPONG = 2;\r\nClassUtils.regClass(\"laya.display.AnimationBase\", AnimationBase);\r\nClassUtils.regClass(\"Laya.AnimationBase\", AnimationBase);\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/Config.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/Const.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/.rpt2_cache/placeholder/laya/display/AnimationBase.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Sprite } from \"./Sprite\";\r\nexport declare class AnimationBase extends Sprite {\r\n    static WRAP_POSITIVE: number;\r\n    static WRAP_REVERSE: number;\r\n    static WRAP_PINGPONG: number;\r\n    loop: boolean;\r\n    wrapMode: number;\r\n    protected _interval: number;\r\n    protected _index: number;\r\n    protected _count: number;\r\n    protected _isPlaying: boolean;\r\n    protected _labels: any;\r\n    protected _isReverse: boolean;\r\n    protected _frameRateChanged: boolean;\r\n    protected _actionName: string;\r\n    private _controlNode;\r\n    constructor();\r\n    play(start?: any, loop?: boolean, name?: string): void;\r\n    interval: number;\r\n    protected _getFrameByLabel(label: string): number;\r\n    protected _frameLoop(): void;\r\n    _setControlNode(node: Sprite): void;\r\n    _setDisplay(value: boolean): void;\r\n    protected _resumePlay(): void;\r\n    stop(): void;\r\n    readonly isPlaying: boolean;\r\n    addLabel(label: string, index: number): void;\r\n    removeLabel(label: string): void;\r\n    private _removeLabelFromList;\r\n    gotoAndStop(position: any): void;\r\n    index: number;\r\n    protected _displayToIndex(value: number): void;\r\n    readonly count: number;\r\n    clear(): AnimationBase;\r\n}\r\n"
  }
}

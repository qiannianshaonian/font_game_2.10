{
  "code": "import { UIComponent } from \"./UIComponent\";\r\nimport { Styles } from \"./Styles\";\r\nimport { Const } from \"../Const\";\r\nimport { Text } from \"../display/Text\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Loader } from \"../net/Loader\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { AutoBitmap } from \"./AutoBitmap\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { WeakObject } from \"../utils/WeakObject\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class Button extends UIComponent {\r\n    constructor(skin = null, label = \"\") {\r\n        super();\r\n        this._labelColors = Styles.buttonLabelColors;\r\n        this._state = 0;\r\n        this._autoSize = true;\r\n        this._stateNum = Styles.buttonStateNum;\r\n        this._stateChanged = false;\r\n        this.skin = skin;\r\n        this.label = label;\r\n    }\r\n    destroy(destroyChild = true) {\r\n        super.destroy(destroyChild);\r\n        this._bitmap && this._bitmap.destroy();\r\n        this._text && this._text.destroy(destroyChild);\r\n        this._bitmap = null;\r\n        this._text = null;\r\n        this._clickHandler = null;\r\n        this._labelColors = this._sources = this._strokeColors = null;\r\n    }\r\n    createChildren() {\r\n        this.graphics = this._bitmap = new AutoBitmap();\r\n    }\r\n    createText() {\r\n        if (!this._text) {\r\n            this._text = new Text();\r\n            this._text.overflow = Text.HIDDEN;\r\n            this._text.align = \"center\";\r\n            this._text.valign = \"middle\";\r\n            this._text.width = this._width;\r\n            this._text.height = this._height;\r\n        }\r\n    }\r\n    initialize() {\r\n        if (this._mouseState !== 1) {\r\n            this.mouseEnabled = true;\r\n            this._setBit(Const.HAS_MOUSE, true);\r\n        }\r\n        this._createListener(Event.MOUSE_OVER, this, this.onMouse, null, false, false);\r\n        this._createListener(Event.MOUSE_OUT, this, this.onMouse, null, false, false);\r\n        this._createListener(Event.MOUSE_DOWN, this, this.onMouse, null, false, false);\r\n        this._createListener(Event.MOUSE_UP, this, this.onMouse, null, false, false);\r\n        this._createListener(Event.CLICK, this, this.onMouse, null, false, false);\r\n    }\r\n    onMouse(e) {\r\n        if (this.toggle === false && this._selected)\r\n            return;\r\n        if (e.type === Event.CLICK) {\r\n            this.toggle && (this.selected = !this._selected);\r\n            this._clickHandler && this._clickHandler.run();\r\n            return;\r\n        }\r\n        !this._selected && (this.state = Button.stateMap[e.type]);\r\n    }\r\n    get skin() {\r\n        return this._skin;\r\n    }\r\n    set skin(value) {\r\n        if (this._skin != value) {\r\n            this._skin = value;\r\n            if (value) {\r\n                if (!Loader.getRes(value)) {\r\n                    ILaya.loader.load(this._skin, Handler.create(this, this._skinLoaded), null, Loader.IMAGE, 1);\r\n                }\r\n                else {\r\n                    this._skinLoaded();\r\n                }\r\n            }\r\n            else {\r\n                this._skinLoaded();\r\n            }\r\n        }\r\n    }\r\n    _skinLoaded() {\r\n        this.callLater(this.changeClips);\r\n        this._setStateChanged();\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n    get stateNum() {\r\n        return this._stateNum;\r\n    }\r\n    set stateNum(value) {\r\n        if (typeof value == 'string') {\r\n            value = parseInt(value);\r\n        }\r\n        if (this._stateNum != value) {\r\n            this._stateNum = value < 1 ? 1 : value > 3 ? 3 : value;\r\n            this.callLater(this.changeClips);\r\n        }\r\n    }\r\n    changeClips() {\r\n        var img = Loader.getRes(this._skin);\r\n        if (!img) {\r\n            console.log(\"lose skin\", this._skin);\r\n            return;\r\n        }\r\n        var width = img.sourceWidth;\r\n        var height = img.sourceHeight / this._stateNum;\r\n        img.$_GID || (img.$_GID = Utils.getGID());\r\n        var key = img.$_GID + \"-\" + this._stateNum;\r\n        var clips = WeakObject.I.get(key);\r\n        if (!Utils.isOkTextureList(clips)) {\r\n            clips = null;\r\n        }\r\n        if (clips)\r\n            this._sources = clips;\r\n        else {\r\n            this._sources = [];\r\n            if (this._stateNum === 1) {\r\n                this._sources.push(img);\r\n            }\r\n            else {\r\n                for (var i = 0; i < this._stateNum; i++) {\r\n                    this._sources.push(Texture.createFromTexture(img, 0, height * i, width, height));\r\n                }\r\n            }\r\n            WeakObject.I.set(key, this._sources);\r\n        }\r\n        if (this._autoSize) {\r\n            this._bitmap.width = this._width || width;\r\n            this._bitmap.height = this._height || height;\r\n            if (this._text) {\r\n                this._text.width = this._bitmap.width;\r\n                this._text.height = this._bitmap.height;\r\n            }\r\n        }\r\n        else {\r\n            this._text && (this._text.x = width);\r\n        }\r\n    }\r\n    measureWidth() {\r\n        this.runCallLater(this.changeClips);\r\n        if (this._autoSize)\r\n            return this._bitmap.width;\r\n        this.runCallLater(this.changeState);\r\n        return this._bitmap.width + (this._text ? this._text.width : 0);\r\n    }\r\n    measureHeight() {\r\n        this.runCallLater(this.changeClips);\r\n        return this._text ? Math.max(this._bitmap.height, this._text.height) : this._bitmap.height;\r\n    }\r\n    get label() {\r\n        return this._text ? this._text.text : null;\r\n    }\r\n    set label(value) {\r\n        if (!this._text && !value)\r\n            return;\r\n        this.createText();\r\n        if (this._text.text != value) {\r\n            value && !this._text.parent && this.addChild(this._text);\r\n            this._text.text = (value + \"\").replace(/\\\\n/g, \"\\n\");\r\n            this._setStateChanged();\r\n        }\r\n    }\r\n    get selected() {\r\n        return this._selected;\r\n    }\r\n    set selected(value) {\r\n        if (this._selected != value) {\r\n            this._selected = value;\r\n            this.state = this._selected ? 2 : 0;\r\n            this.event(Event.CHANGE);\r\n        }\r\n    }\r\n    get state() {\r\n        return this._state;\r\n    }\r\n    set state(value) {\r\n        if (this._state != value) {\r\n            this._state = value;\r\n            this._setStateChanged();\r\n        }\r\n    }\r\n    changeState() {\r\n        this._stateChanged = false;\r\n        this.runCallLater(this.changeClips);\r\n        var index = this._state < this._stateNum ? this._state : this._stateNum - 1;\r\n        this._sources && (this._bitmap.source = this._sources[index]);\r\n        if (this.label) {\r\n            this._text.color = this._labelColors[index];\r\n            if (this._strokeColors)\r\n                this._text.strokeColor = this._strokeColors[index];\r\n        }\r\n    }\r\n    get labelColors() {\r\n        return this._labelColors.join(\",\");\r\n    }\r\n    set labelColors(value) {\r\n        this._labelColors = UIUtils.fillArray(Styles.buttonLabelColors, value, String);\r\n        this._setStateChanged();\r\n    }\r\n    get strokeColors() {\r\n        return this._strokeColors ? this._strokeColors.join(\",\") : \"\";\r\n    }\r\n    set strokeColors(value) {\r\n        this._strokeColors = UIUtils.fillArray(Styles.buttonLabelColors, value, String);\r\n        this._setStateChanged();\r\n    }\r\n    get labelPadding() {\r\n        this.createText();\r\n        return this._text.padding.join(\",\");\r\n    }\r\n    set labelPadding(value) {\r\n        this.createText();\r\n        this._text.padding = UIUtils.fillArray(Styles.labelPadding, value, Number);\r\n    }\r\n    get labelSize() {\r\n        this.createText();\r\n        return this._text.fontSize;\r\n    }\r\n    set labelSize(value) {\r\n        this.createText();\r\n        this._text.fontSize = value;\r\n    }\r\n    get labelStroke() {\r\n        this.createText();\r\n        return this._text.stroke;\r\n    }\r\n    set labelStroke(value) {\r\n        this.createText();\r\n        this._text.stroke = value;\r\n    }\r\n    get labelStrokeColor() {\r\n        this.createText();\r\n        return this._text.strokeColor;\r\n    }\r\n    set labelStrokeColor(value) {\r\n        this.createText();\r\n        this._text.strokeColor = value;\r\n    }\r\n    get labelBold() {\r\n        this.createText();\r\n        return this._text.bold;\r\n    }\r\n    set labelBold(value) {\r\n        this.createText();\r\n        this._text.bold = value;\r\n    }\r\n    get labelFont() {\r\n        this.createText();\r\n        return this._text.font;\r\n    }\r\n    set labelFont(value) {\r\n        this.createText();\r\n        this._text.font = value;\r\n    }\r\n    get labelAlign() {\r\n        this.createText();\r\n        return this._text.align;\r\n    }\r\n    set labelAlign(value) {\r\n        this.createText();\r\n        this._text.align = value;\r\n    }\r\n    get clickHandler() {\r\n        return this._clickHandler;\r\n    }\r\n    set clickHandler(value) {\r\n        this._clickHandler = value;\r\n    }\r\n    get text() {\r\n        this.createText();\r\n        return this._text;\r\n    }\r\n    get sizeGrid() {\r\n        if (this._bitmap.sizeGrid)\r\n            return this._bitmap.sizeGrid.join(\",\");\r\n        return null;\r\n    }\r\n    set sizeGrid(value) {\r\n        this._bitmap.sizeGrid = UIUtils.fillArray(Styles.defaultSizeGrid, value, Number);\r\n    }\r\n    set width(value) {\r\n        super.set_width(value);\r\n        if (this._autoSize) {\r\n            this._bitmap.width = value;\r\n            this._text && (this._text.width = value);\r\n        }\r\n    }\r\n    get width() {\r\n        return super.get_width();\r\n    }\r\n    set height(value) {\r\n        super.set_height(value);\r\n        if (this._autoSize) {\r\n            this._bitmap.height = value;\r\n            this._text && (this._text.height = value);\r\n        }\r\n    }\r\n    get height() {\r\n        return super.get_height();\r\n    }\r\n    set dataSource(value) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.label = value + \"\";\r\n        else\r\n            super.set_dataSource(value);\r\n    }\r\n    get dataSource() {\r\n        return super.get_dataSource();\r\n    }\r\n    get iconOffset() {\r\n        return this._bitmap._offset ? this._bitmap._offset.join(\",\") : null;\r\n    }\r\n    set iconOffset(value) {\r\n        if (value)\r\n            this._bitmap._offset = UIUtils.fillArray([1, 1], value, Number);\r\n        else\r\n            this._bitmap._offset = [];\r\n    }\r\n    _setStateChanged() {\r\n        if (!this._stateChanged) {\r\n            this._stateChanged = true;\r\n            this.callLater(this.changeState);\r\n        }\r\n    }\r\n}\r\nButton.stateMap = { \"mouseup\": 0, \"mouseover\": 1, \"mousedown\": 2, \"mouseout\": 0 };\r\nILaya.regClass(Button);\r\nClassUtils.regClass(\"laya.ui.Button\", Button);\r\nClassUtils.regClass(\"Laya.Button\", Button);\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/UIComponent.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/ISelect.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Styles.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/Const.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Text.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/net/Loader.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/resource/Texture.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/AutoBitmap.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/UIUtils.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Utils.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/WeakObject.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/.rpt2_cache/placeholder/laya/ui/Button.d.ts",
    "writeByteOrderMark": false,
    "text": "import { UIComponent } from \"./UIComponent\";\r\nimport { ISelect } from \"./ISelect\";\r\nimport { Text } from \"../display/Text\";\r\nimport { Event } from \"../events/Event\";\r\nimport { AutoBitmap } from \"./AutoBitmap\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class Button extends UIComponent implements ISelect {\r\n    protected static stateMap: any;\r\n    toggle: boolean;\r\n    protected _bitmap: AutoBitmap;\r\n    protected _text: Text;\r\n    protected _labelColors: any[];\r\n    protected _strokeColors: any[];\r\n    protected _state: number;\r\n    protected _selected: boolean;\r\n    protected _skin: string;\r\n    protected _autoSize: boolean;\r\n    protected _stateNum: number;\r\n    protected _sources: any[];\r\n    protected _clickHandler: Handler;\r\n    protected _stateChanged: boolean;\r\n    constructor(skin?: string, label?: string);\r\n    destroy(destroyChild?: boolean): void;\r\n    protected createChildren(): void;\r\n    protected createText(): void;\r\n    protected initialize(): void;\r\n    protected onMouse(e: Event): void;\r\n    skin: string;\r\n    protected _skinLoaded(): void;\r\n    stateNum: number;\r\n    protected changeClips(): void;\r\n    protected measureWidth(): number;\r\n    protected measureHeight(): number;\r\n    label: string;\r\n    selected: boolean;\r\n    protected state: number;\r\n    protected changeState(): void;\r\n    labelColors: string;\r\n    strokeColors: string;\r\n    labelPadding: string;\r\n    labelSize: number;\r\n    labelStroke: number;\r\n    labelStrokeColor: string;\r\n    labelBold: boolean;\r\n    labelFont: string;\r\n    labelAlign: string;\r\n    clickHandler: Handler;\r\n    readonly text: Text;\r\n    sizeGrid: string;\r\n    width: number;\r\n    height: number;\r\n    dataSource: any;\r\n    iconOffset: string;\r\n    protected _setStateChanged(): void;\r\n}\r\n"
  }
}

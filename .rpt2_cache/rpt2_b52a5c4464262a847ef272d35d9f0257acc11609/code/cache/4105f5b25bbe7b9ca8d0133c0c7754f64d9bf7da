{
  "code": "import { AnimationContent } from \"./AnimationContent\";\r\nimport { AnimationNodeContent } from \"./AnimationNodeContent\";\r\nimport { KeyFramesContent } from \"./KeyFramesContent\";\r\nimport { IAniLib } from \"./AniLibPack\";\r\nexport class AnimationParser02 {\r\n    static READ_DATA() {\r\n        AnimationParser02._DATA.offset = AnimationParser02._reader.getUint32();\r\n        AnimationParser02._DATA.size = AnimationParser02._reader.getUint32();\r\n    }\r\n    static READ_BLOCK() {\r\n        var count = AnimationParser02._BLOCK.count = AnimationParser02._reader.getUint16();\r\n        var blockStarts = AnimationParser02._BLOCK.blockStarts = [];\r\n        var blockLengths = AnimationParser02._BLOCK.blockLengths = [];\r\n        for (var i = 0; i < count; i++) {\r\n            blockStarts.push(AnimationParser02._reader.getUint32());\r\n            blockLengths.push(AnimationParser02._reader.getUint32());\r\n        }\r\n    }\r\n    static READ_STRINGS() {\r\n        var offset = AnimationParser02._reader.getUint32();\r\n        var count = AnimationParser02._reader.getUint16();\r\n        var prePos = AnimationParser02._reader.pos;\r\n        AnimationParser02._reader.pos = offset + AnimationParser02._DATA.offset;\r\n        for (var i = 0; i < count; i++)\r\n            AnimationParser02._strings[i] = AnimationParser02._reader.readUTFString();\r\n        AnimationParser02._reader.pos = prePos;\r\n    }\r\n    static parse(templet, reader) {\r\n        AnimationParser02._templet = templet;\r\n        AnimationParser02._reader = reader;\r\n        var arrayBuffer = reader.__getBuffer();\r\n        AnimationParser02.READ_DATA();\r\n        AnimationParser02.READ_BLOCK();\r\n        AnimationParser02.READ_STRINGS();\r\n        for (var i = 0, n = AnimationParser02._BLOCK.count; i < n; i++) {\r\n            var index = reader.getUint16();\r\n            var blockName = AnimationParser02._strings[index];\r\n            var fn = AnimationParser02[\"READ_\" + blockName];\r\n            if (fn == null)\r\n                throw new Error(\"model file err,no this function:\" + index + \" \" + blockName);\r\n            else\r\n                fn.call(null);\r\n        }\r\n    }\r\n    static READ_ANIMATIONS() {\r\n        var reader = AnimationParser02._reader;\r\n        var arrayBuffer = reader.__getBuffer();\r\n        var i, j, k, n, l;\r\n        var keyframeWidth = reader.getUint16();\r\n        var interpolationMethod = [];\r\n        interpolationMethod.length = keyframeWidth;\r\n        for (i = 0; i < keyframeWidth; i++)\r\n            interpolationMethod[i] = IAniLib.AnimationTemplet.interpolation[reader.getByte()];\r\n        var aniCount = reader.getUint8();\r\n        AnimationParser02._templet._anis.length = aniCount;\r\n        for (i = 0; i < aniCount; i++) {\r\n            var ani = AnimationParser02._templet._anis[i] = new AnimationContent();\r\n            ani.nodes = [];\r\n            var aniName = ani.name = AnimationParser02._strings[reader.getUint16()];\r\n            AnimationParser02._templet._aniMap[aniName] = i;\r\n            ani.bone3DMap = {};\r\n            ani.playTime = reader.getFloat32();\r\n            var boneCount = ani.nodes.length = reader.getInt16();\r\n            ani.totalKeyframeDatasLength = 0;\r\n            for (j = 0; j < boneCount; j++) {\r\n                var node = ani.nodes[j] = new AnimationNodeContent();\r\n                node.keyframeWidth = keyframeWidth;\r\n                node.childs = [];\r\n                var nameIndex = reader.getUint16();\r\n                if (nameIndex >= 0) {\r\n                    node.name = AnimationParser02._strings[nameIndex];\r\n                    ani.bone3DMap[node.name] = j;\r\n                }\r\n                node.keyFrame = [];\r\n                node.parentIndex = reader.getInt16();\r\n                node.parentIndex == -1 ? node.parent = null : node.parent = ani.nodes[node.parentIndex];\r\n                ani.totalKeyframeDatasLength += keyframeWidth;\r\n                node.interpolationMethod = interpolationMethod;\r\n                if (node.parent != null)\r\n                    node.parent.childs.push(node);\r\n                var keyframeCount = reader.getUint16();\r\n                node.keyFrame.length = keyframeCount;\r\n                var keyFrame = null, lastKeyFrame = null;\r\n                for (k = 0, n = keyframeCount; k < n; k++) {\r\n                    keyFrame = node.keyFrame[k] = new KeyFramesContent();\r\n                    keyFrame.startTime = reader.getFloat32();\r\n                    (lastKeyFrame) && (lastKeyFrame.duration = keyFrame.startTime - lastKeyFrame.startTime);\r\n                    keyFrame.dData = new Float32Array(keyframeWidth);\r\n                    keyFrame.nextData = new Float32Array(keyframeWidth);\r\n                    var offset = AnimationParser02._DATA.offset;\r\n                    var keyframeDataOffset = reader.getUint32();\r\n                    var keyframeDataLength = keyframeWidth * 4;\r\n                    var keyframeArrayBuffer = arrayBuffer.slice(offset + keyframeDataOffset, offset + keyframeDataOffset + keyframeDataLength);\r\n                    keyFrame.data = new Float32Array(keyframeArrayBuffer);\r\n                    lastKeyFrame = keyFrame;\r\n                }\r\n                keyFrame.duration = 0;\r\n                node.playTime = ani.playTime;\r\n                AnimationParser02._templet._calculateKeyFrame(node, keyframeCount, keyframeWidth);\r\n            }\r\n        }\r\n    }\r\n}\r\nAnimationParser02._strings = [];\r\nAnimationParser02._BLOCK = { count: 0 };\r\nAnimationParser02._DATA = { offset: 0, size: 0 };\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AnimationTemplet.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AnimationContent.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AnimationNodeContent.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/KeyFramesContent.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AniLibPack.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Byte.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/.rpt2_cache/placeholder/laya/ani/AnimationParser02.d.ts",
    "writeByteOrderMark": false,
    "text": "import { AnimationTemplet } from \"./AnimationTemplet\";\r\nimport { Byte } from \"../utils/Byte\";\r\nexport declare class AnimationParser02 {\r\n    private static _templet;\r\n    private static _reader;\r\n    private static _strings;\r\n    private static _BLOCK;\r\n    private static _DATA;\r\n    private static READ_DATA;\r\n    private static READ_BLOCK;\r\n    private static READ_STRINGS;\r\n    static parse(templet: AnimationTemplet, reader: Byte): void;\r\n    static READ_ANIMATIONS(): void;\r\n}\r\n"
  }
}

{
  "code": "import { AudioSoundChannel } from \"./AudioSoundChannel\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { EventDispatcher } from \"../../events/EventDispatcher\";\r\nimport { URL } from \"../../net/URL\";\r\nimport { Render } from \"../../renders/Render\";\r\nimport { Browser } from \"../../utils/Browser\";\r\nimport { Pool } from \"../../utils/Pool\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nexport class AudioSound extends EventDispatcher {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.loaded = false;\r\n    }\r\n    dispose() {\r\n        var ad = AudioSound._audioCache[this.url];\r\n        Pool.clearBySign(\"audio:\" + this.url);\r\n        if (ad) {\r\n            if (!Render.isConchApp) {\r\n                ad.src = \"\";\r\n            }\r\n            delete AudioSound._audioCache[this.url];\r\n        }\r\n    }\r\n    static _initMusicAudio() {\r\n        if (AudioSound._musicAudio)\r\n            return;\r\n        if (!AudioSound._musicAudio)\r\n            AudioSound._musicAudio = Browser.createElement(\"audio\");\r\n        if (!Render.isConchApp) {\r\n            Browser.document.addEventListener(\"mousedown\", AudioSound._makeMusicOK);\r\n        }\r\n    }\r\n    static _makeMusicOK() {\r\n        Browser.document.removeEventListener(\"mousedown\", AudioSound._makeMusicOK);\r\n        if (!AudioSound._musicAudio.src) {\r\n            AudioSound._musicAudio.src = \"\";\r\n            AudioSound._musicAudio.load();\r\n        }\r\n        else {\r\n            AudioSound._musicAudio.play();\r\n        }\r\n    }\r\n    load(url) {\r\n        url = URL.formatURL(url);\r\n        this.url = url;\r\n        var ad;\r\n        if (url == ILaya.SoundManager._bgMusic) {\r\n            AudioSound._initMusicAudio();\r\n            ad = AudioSound._musicAudio;\r\n            if (ad.src != url) {\r\n                delete AudioSound._audioCache[ad.src];\r\n                ad = null;\r\n            }\r\n        }\r\n        else {\r\n            ad = AudioSound._audioCache[url];\r\n        }\r\n        if (ad && ad.readyState >= 2) {\r\n            this.event(Event.COMPLETE);\r\n            return;\r\n        }\r\n        if (!ad) {\r\n            if (url == ILaya.SoundManager._bgMusic) {\r\n                AudioSound._initMusicAudio();\r\n                ad = AudioSound._musicAudio;\r\n            }\r\n            else {\r\n                ad = Browser.createElement(\"audio\");\r\n            }\r\n            AudioSound._audioCache[url] = ad;\r\n            ad.src = url;\r\n        }\r\n        ad.addEventListener(\"canplaythrough\", onLoaded);\r\n        ad.addEventListener(\"error\", onErr);\r\n        var me = this;\r\n        function onLoaded() {\r\n            offs();\r\n            me.loaded = true;\r\n            me.event(Event.COMPLETE);\r\n        }\r\n        function onErr() {\r\n            ad.load = null;\r\n            offs();\r\n            me.event(Event.ERROR);\r\n        }\r\n        function offs() {\r\n            ad.removeEventListener(\"canplaythrough\", onLoaded);\r\n            ad.removeEventListener(\"error\", onErr);\r\n        }\r\n        this.audio = ad;\r\n        if (ad.load) {\r\n            ad.load();\r\n        }\r\n        else {\r\n            onErr();\r\n        }\r\n    }\r\n    play(startTime = 0, loops = 0) {\r\n        if (!this.url)\r\n            return null;\r\n        var ad;\r\n        if (this.url == ILaya.SoundManager._bgMusic) {\r\n            ad = AudioSound._musicAudio;\r\n            if (ad.src != \"\" && ad.src != this.url) {\r\n                delete AudioSound._audioCache[ad.src];\r\n                AudioSound._audioCache[this.url] = ad;\r\n            }\r\n        }\r\n        else {\r\n            ad = AudioSound._audioCache[this.url];\r\n        }\r\n        if (!ad)\r\n            return null;\r\n        var tAd;\r\n        tAd = Pool.getItem(\"audio:\" + this.url);\r\n        if (Render.isConchApp) {\r\n            if (!tAd) {\r\n                tAd = Browser.createElement(\"audio\");\r\n                tAd.src = this.url;\r\n            }\r\n        }\r\n        else {\r\n            if (this.url == ILaya.SoundManager._bgMusic) {\r\n                AudioSound._initMusicAudio();\r\n                tAd = AudioSound._musicAudio;\r\n                tAd.src = this.url;\r\n            }\r\n            else {\r\n                tAd = tAd ? tAd : ad.cloneNode(true);\r\n            }\r\n        }\r\n        var channel = new AudioSoundChannel(tAd);\r\n        channel.url = this.url;\r\n        channel.loops = loops;\r\n        channel.startTime = startTime;\r\n        channel.play();\r\n        ILaya.SoundManager.addChannel(channel);\r\n        return channel;\r\n    }\r\n    get duration() {\r\n        var ad;\r\n        ad = AudioSound._audioCache[this.url];\r\n        if (!ad)\r\n            return 0;\r\n        return ad.duration;\r\n    }\r\n}\r\nAudioSound._audioCache = {};\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/media/h5audio/AudioSoundChannel.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/EventDispatcher.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/media/SoundChannel.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/net/URL.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/renders/Render.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Browser.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Pool.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/.rpt2_cache/placeholder/laya/media/h5audio/AudioSound.d.ts",
    "writeByteOrderMark": false,
    "text": "import { EventDispatcher } from \"../../events/EventDispatcher\";\r\nimport { SoundChannel } from \"../SoundChannel\";\r\nexport declare class AudioSound extends EventDispatcher {\r\n    private static _audioCache;\r\n    url: string;\r\n    audio: HTMLAudioElement;\r\n    loaded: boolean;\r\n    static _musicAudio: HTMLAudioElement;\r\n    dispose(): void;\r\n    static _initMusicAudio(): void;\r\n    private static _makeMusicOK;\r\n    load(url: string): void;\r\n    play(startTime?: number, loops?: number): SoundChannel;\r\n    readonly duration: number;\r\n}\r\n"
  }
}

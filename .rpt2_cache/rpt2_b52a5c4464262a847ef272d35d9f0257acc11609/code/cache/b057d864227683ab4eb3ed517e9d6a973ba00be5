{
  "code": "import { URL } from \"./URL\";\r\nimport { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { Browser } from \"../utils/Browser\";\r\nexport class HttpRequest extends EventDispatcher {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._http = new XMLHttpRequest();\r\n    }\r\n    send(url, data = null, method = \"get\", responseType = \"text\", headers = null) {\r\n        this._responseType = responseType;\r\n        this._data = null;\r\n        if (Browser.onVVMiniGame || Browser.onQGMiniGame || Browser.onQQMiniGame || Browser.onAlipayMiniGame || Browser.onBLMiniGame || Browser.onHWMiniGame || Browser.onTTMiniGame || Browser.onTBMiniGame) {\r\n            url = HttpRequest._urlEncode(url);\r\n        }\r\n        this._url = url;\r\n        var _this = this;\r\n        var http = this._http;\r\n        url = URL.getAdptedFilePath(url);\r\n        http.open(method, url, true);\r\n        let isJson = false;\r\n        if (headers) {\r\n            for (var i = 0; i < headers.length; i++) {\r\n                http.setRequestHeader(headers[i++], headers[i]);\r\n            }\r\n        }\r\n        else if (!(window.conch)) {\r\n            if (!data || typeof (data) == 'string')\r\n                http.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            else {\r\n                http.setRequestHeader(\"Content-Type\", \"application/json\");\r\n                if (!(data instanceof ArrayBuffer) && typeof data !== \"string\") {\r\n                    isJson = true;\r\n                }\r\n            }\r\n        }\r\n        let restype = responseType !== \"arraybuffer\" ? \"text\" : \"arraybuffer\";\r\n        http.responseType = restype;\r\n        if (http.dataType) {\r\n            http.dataType = restype;\r\n        }\r\n        http.onerror = function (e) {\r\n            _this._onError(e);\r\n        };\r\n        http.onabort = function (e) {\r\n            _this._onAbort(e);\r\n        };\r\n        http.onprogress = function (e) {\r\n            _this._onProgress(e);\r\n        };\r\n        http.onload = function (e) {\r\n            _this._onLoad(e);\r\n        };\r\n        if (Browser.onBLMiniGame && Browser.onAndroid && !data)\r\n            data = {};\r\n        http.send(isJson ? JSON.stringify(data) : data);\r\n    }\r\n    _onProgress(e) {\r\n        if (e && e.lengthComputable)\r\n            this.event(Event.PROGRESS, e.loaded / e.total);\r\n    }\r\n    _onAbort(e) {\r\n        this.error(\"Request was aborted by user\");\r\n    }\r\n    _onError(e) {\r\n        this.error(\"Request failed Status:\" + this._http.status + \" text:\" + this._http.statusText);\r\n    }\r\n    _onLoad(e) {\r\n        var http = this._http;\r\n        var status = http.status !== undefined ? http.status : 200;\r\n        if (status === 200 || status === 204 || status === 0) {\r\n            this.complete();\r\n        }\r\n        else {\r\n            this.error(\"[\" + http.status + \"]\" + http.statusText + \":\" + http.responseURL);\r\n        }\r\n    }\r\n    error(message) {\r\n        this.clear();\r\n        console.warn(this.url, message);\r\n        this.event(Event.ERROR, message);\r\n    }\r\n    complete() {\r\n        this.clear();\r\n        var flag = true;\r\n        try {\r\n            if (this._responseType === \"json\") {\r\n                this._data = JSON.parse(this._http.responseText);\r\n            }\r\n            else if (this._responseType === \"xml\") {\r\n                this._data = Utils.parseXMLFromString(this._http.responseText);\r\n            }\r\n            else {\r\n                this._data = this._http.response || this._http.responseText;\r\n            }\r\n        }\r\n        catch (e) {\r\n            flag = false;\r\n            this.error(e.message);\r\n        }\r\n        flag && this.event(Event.COMPLETE, this._data instanceof Array ? [this._data] : this._data);\r\n    }\r\n    clear() {\r\n        var http = this._http;\r\n        http.onerror = http.onabort = http.onprogress = http.onload = null;\r\n    }\r\n    get url() {\r\n        return this._url;\r\n    }\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    get http() {\r\n        return this._http;\r\n    }\r\n}\r\nHttpRequest._urlEncode = encodeURI;\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/net/URL.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/EventDispatcher.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Utils.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Browser.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/.rpt2_cache/placeholder/laya/net/HttpRequest.d.ts",
    "writeByteOrderMark": false,
    "text": "import { EventDispatcher } from \"../events/EventDispatcher\";\r\nexport declare class HttpRequest extends EventDispatcher {\r\n    protected _http: XMLHttpRequest;\r\n    private static _urlEncode;\r\n    protected _responseType: string;\r\n    protected _data: any;\r\n    protected _url: string;\r\n    send(url: string, data?: any, method?: string, responseType?: string, headers?: any[] | null): void;\r\n    protected _onProgress(e: any): void;\r\n    protected _onAbort(e: any): void;\r\n    protected _onError(e: any): void;\r\n    protected _onLoad(e: any): void;\r\n    protected error(message: string): void;\r\n    protected complete(): void;\r\n    protected clear(): void;\r\n    readonly url: string;\r\n    readonly data: any;\r\n    readonly http: any;\r\n}\r\n"
  }
}

{
  "code": "import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { Mesh2D } from \"./Mesh2D\";\r\nexport class MeshTexture extends Mesh2D {\r\n    constructor() {\r\n        super(MeshTexture.const_stride, 4, 4);\r\n        this.canReuse = true;\r\n        this.setAttributes(MeshTexture._fixattriInfo);\r\n    }\r\n    static __init__() {\r\n        var gl = LayaGL.instance;\r\n        MeshTexture._fixattriInfo = [5126, 4, 0,\r\n            5121, 4, 16,\r\n            5121, 4, 20];\r\n    }\r\n    static getAMesh(mainctx) {\r\n        var ret;\r\n        if (MeshTexture._POOL.length) {\r\n            ret = MeshTexture._POOL.pop();\r\n        }\r\n        else\r\n            ret = new MeshTexture();\r\n        mainctx && ret._vb._resizeBuffer(64 * 1024 * MeshTexture.const_stride, false);\r\n        return ret;\r\n    }\r\n    addData(vertices, uvs, idx, matrix, rgba) {\r\n        var vb = this._vb;\r\n        var ib = this._ib;\r\n        var vertsz = vertices.length >> 1;\r\n        var startpos = vb.needSize(vertsz * MeshTexture.const_stride);\r\n        var f32pos = startpos >> 2;\r\n        var vbdata = vb._floatArray32 || vb.getFloat32Array();\r\n        var vbu32Arr = vb._uint32Array;\r\n        var ci = 0;\r\n        var m00 = matrix.a;\r\n        var m01 = matrix.b;\r\n        var m10 = matrix.c;\r\n        var m11 = matrix.d;\r\n        var tx = matrix.tx;\r\n        var ty = matrix.ty;\r\n        var i = 0;\r\n        for (i = 0; i < vertsz; i++) {\r\n            var x = vertices[ci], y = vertices[ci + 1];\r\n            vbdata[f32pos] = x * m00 + y * m10 + tx;\r\n            vbdata[f32pos + 1] = x * m01 + y * m11 + ty;\r\n            vbdata[f32pos + 2] = uvs[ci];\r\n            vbdata[f32pos + 3] = uvs[ci + 1];\r\n            vbu32Arr[f32pos + 4] = rgba;\r\n            vbu32Arr[f32pos + 5] = 0xff;\r\n            f32pos += 6;\r\n            ci += 2;\r\n        }\r\n        vb.setNeedUpload();\r\n        var vertN = this.vertNum;\r\n        var sz = idx.length;\r\n        var stib = ib.needSize(idx.byteLength);\r\n        var cidx = ib.getUint16Array();\r\n        var stibid = stib >> 1;\r\n        if (vertN > 0) {\r\n            var end = stibid + sz;\r\n            var si = 0;\r\n            for (i = stibid; i < end; i++, si++) {\r\n                cidx[i] = idx[si] + vertN;\r\n            }\r\n        }\r\n        else {\r\n            cidx.set(idx, stibid);\r\n        }\r\n        ib.setNeedUpload();\r\n        this.vertNum += vertsz;\r\n        this.indexNum += idx.length;\r\n    }\r\n    releaseMesh() {\r\n        this._vb.setByteLength(0);\r\n        this._ib.setByteLength(0);\r\n        this.vertNum = 0;\r\n        this.indexNum = 0;\r\n        MeshTexture._POOL.push(this);\r\n    }\r\n    destroy() {\r\n        this._ib.destroy();\r\n        this._vb.destroy();\r\n        this._ib.disposeResource();\r\n        this._vb.deleteBuffer();\r\n    }\r\n}\r\nMeshTexture.const_stride = 24;\r\nMeshTexture._POOL = [];\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/layagl/LayaGL.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/maths/Matrix.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/webgl/utils/IndexBuffer2D.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/webgl/utils/Mesh2D.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/webgl/utils/VertexBuffer2D.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/.rpt2_cache/placeholder/laya/webgl/utils/MeshTexture.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Matrix } from \"../../maths/Matrix\";\r\nimport { Mesh2D } from \"./Mesh2D\";\r\nexport declare class MeshTexture extends Mesh2D {\r\n    static const_stride: number;\r\n    private static _fixattriInfo;\r\n    private static _POOL;\r\n    static __init__(): void;\r\n    constructor();\r\n    static getAMesh(mainctx: boolean): MeshTexture;\r\n    addData(vertices: Float32Array, uvs: Float32Array, idx: Uint16Array, matrix: Matrix, rgba: number): void;\r\n    releaseMesh(): void;\r\n    destroy(): void;\r\n}\r\n"
  }
}

{
  "code": "import { IkConstraint } from \"./IkConstraint\";\r\nimport { PathConstraint } from \"./PathConstraint\";\r\nimport { TfConstraint } from \"./TfConstraint\";\r\nimport { AnimationPlayer } from \"../AnimationPlayer\";\r\nimport { GraphicsAni } from \"../GraphicsAni\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { Matrix } from \"../../maths/Matrix\";\r\nimport { Event } from \"../../events/Event\";\r\nimport { SoundManager } from \"../../media/SoundManager\";\r\nimport { Byte } from \"../../utils/Byte\";\r\nimport { IAniLib } from \"../AniLibPack\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { ClassUtils } from \"../../utils/ClassUtils\";\r\nexport class Skeleton extends Sprite {\r\n    constructor(templet = null, aniMode = 0) {\r\n        super();\r\n        this._boneMatrixArray = [];\r\n        this._lastTime = 0;\r\n        this._currAniIndex = -1;\r\n        this._pause = true;\r\n        this._aniClipIndex = -1;\r\n        this._clipIndex = -1;\r\n        this._skinIndex = 0;\r\n        this._skinName = \"default\";\r\n        this._aniMode = 0;\r\n        this._index = -1;\r\n        this._total = -1;\r\n        this._indexControl = false;\r\n        this._eventIndex = 0;\r\n        this._drawOrderIndex = 0;\r\n        this._drawOrder = null;\r\n        this._lastAniClipIndex = -1;\r\n        this._lastUpdateAniClipIndex = -1;\r\n        this._playAudio = true;\r\n        this._soundChannelArr = [];\r\n        if (templet)\r\n            this.init(templet, aniMode);\r\n    }\r\n    init(templet, aniMode = 0) {\r\n        var i = 0, n;\r\n        if (aniMode == 1) {\r\n            this._graphicsCache = [];\r\n            for (i = 0, n = templet.getAnimationCount(); i < n; i++) {\r\n                this._graphicsCache.push([]);\r\n            }\r\n        }\r\n        this._yReverseMatrix = templet.yReverseMatrix;\r\n        this._aniMode = aniMode;\r\n        this._templet = templet;\r\n        this._templet._addReference(1);\r\n        this._player = new AnimationPlayer();\r\n        this._player.cacheFrameRate = templet.rate;\r\n        this._player.templet = templet;\r\n        this._player.play();\r\n        this._parseSrcBoneMatrix();\r\n        this._boneList = templet.mBoneArr;\r\n        this._rootBone = templet.mRootBone;\r\n        this._aniSectionDic = templet.aniSectionDic;\r\n        if (templet.ikArr.length > 0) {\r\n            this._ikArr = [];\r\n            for (i = 0, n = templet.ikArr.length; i < n; i++) {\r\n                this._ikArr.push(new IkConstraint(templet.ikArr[i], this._boneList));\r\n            }\r\n        }\r\n        if (templet.pathArr.length > 0) {\r\n            var tPathData;\r\n            var tPathConstraint;\r\n            if (this._pathDic == null)\r\n                this._pathDic = {};\r\n            var tBoneSlot;\r\n            for (i = 0, n = templet.pathArr.length; i < n; i++) {\r\n                tPathData = templet.pathArr[i];\r\n                tPathConstraint = new PathConstraint(tPathData, this._boneList);\r\n                tBoneSlot = this._boneSlotDic[tPathData.name];\r\n                if (tBoneSlot) {\r\n                    tPathConstraint = new PathConstraint(tPathData, this._boneList);\r\n                    tPathConstraint.target = tBoneSlot;\r\n                }\r\n                this._pathDic[tPathData.name] = tPathConstraint;\r\n            }\r\n        }\r\n        if (templet.tfArr.length > 0) {\r\n            this._tfArr = [];\r\n            for (i = 0, n = templet.tfArr.length; i < n; i++) {\r\n                this._tfArr.push(new TfConstraint(templet.tfArr[i], this._boneList));\r\n            }\r\n        }\r\n        if (templet.skinDataArray.length > 0) {\r\n            var tSkinData = this._templet.skinDataArray[this._skinIndex];\r\n            this._skinName = tSkinData.name;\r\n        }\r\n        this._player.on(Event.PLAYED, this, this._onPlay);\r\n        this._player.on(Event.STOPPED, this, this._onStop);\r\n        this._player.on(Event.PAUSED, this, this._onPause);\r\n    }\r\n    get url() {\r\n        return this._aniPath;\r\n    }\r\n    set url(path) {\r\n        this.load(path);\r\n    }\r\n    load(path, complete = null, aniMode = 0) {\r\n        this._aniPath = path;\r\n        this._complete = complete;\r\n        this._loadAniMode = aniMode;\r\n        ILaya.loader.load([{ url: path, type: ILaya.Loader.BUFFER }], Handler.create(this, this._onLoaded));\r\n    }\r\n    _onLoaded() {\r\n        var arraybuffer = ILaya.Loader.getRes(this._aniPath);\r\n        if (arraybuffer == null)\r\n            return;\r\n        if (IAniLib.Templet.TEMPLET_DICTIONARY == null) {\r\n            IAniLib.Templet.TEMPLET_DICTIONARY = {};\r\n        }\r\n        var tFactory;\r\n        tFactory = IAniLib.Templet.TEMPLET_DICTIONARY[this._aniPath];\r\n        if (tFactory) {\r\n            if (tFactory.isParseFail) {\r\n                this._parseFail();\r\n            }\r\n            else {\r\n                if (tFactory.isParserComplete) {\r\n                    this._parseComplete();\r\n                }\r\n                else {\r\n                    tFactory.on(Event.COMPLETE, this, this._parseComplete);\r\n                    tFactory.on(Event.ERROR, this, this._parseFail);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            tFactory = new IAniLib.Templet();\r\n            tFactory._setCreateURL(this._aniPath);\r\n            IAniLib.Templet.TEMPLET_DICTIONARY[this._aniPath] = tFactory;\r\n            tFactory.on(Event.COMPLETE, this, this._parseComplete);\r\n            tFactory.on(Event.ERROR, this, this._parseFail);\r\n            tFactory.isParserComplete = false;\r\n            tFactory.parseData(null, arraybuffer);\r\n        }\r\n    }\r\n    _parseComplete() {\r\n        var tTemple = IAniLib.Templet.TEMPLET_DICTIONARY[this._aniPath];\r\n        if (tTemple) {\r\n            this.init(tTemple, this._loadAniMode);\r\n            this.play(0, true);\r\n        }\r\n        this._complete && this._complete.runWith(this);\r\n    }\r\n    _parseFail() {\r\n        console.log(\"[Error]:\" + this._aniPath + \"解析失败\");\r\n    }\r\n    _onPlay() {\r\n        this.event(Event.PLAYED);\r\n    }\r\n    _onStop() {\r\n        var tEventData;\r\n        var tEventAniArr = this._templet.eventAniArr;\r\n        var tEventArr = tEventAniArr[this._aniClipIndex];\r\n        if (tEventArr && this._eventIndex < tEventArr.length) {\r\n            for (; this._eventIndex < tEventArr.length; this._eventIndex++) {\r\n                tEventData = tEventArr[this._eventIndex];\r\n                if (tEventData.time >= this._player.playStart && tEventData.time <= this._player.playEnd) {\r\n                    this.event(Event.LABEL, tEventData);\r\n                }\r\n            }\r\n        }\r\n        this._drawOrder = null;\r\n        this.event(Event.STOPPED);\r\n    }\r\n    _onPause() {\r\n        this.event(Event.PAUSED);\r\n    }\r\n    _parseSrcBoneMatrix() {\r\n        var i = 0, n = 0;\r\n        n = this._templet.srcBoneMatrixArr.length;\r\n        for (i = 0; i < n; i++) {\r\n            this._boneMatrixArray.push(new Matrix());\r\n        }\r\n        if (this._aniMode == 0) {\r\n            this._boneSlotDic = this._templet.boneSlotDic;\r\n            this._bindBoneBoneSlotDic = this._templet.bindBoneBoneSlotDic;\r\n            this._boneSlotArray = this._templet.boneSlotArray;\r\n        }\r\n        else {\r\n            if (this._boneSlotDic == null)\r\n                this._boneSlotDic = {};\r\n            if (this._bindBoneBoneSlotDic == null)\r\n                this._bindBoneBoneSlotDic = {};\r\n            if (this._boneSlotArray == null)\r\n                this._boneSlotArray = [];\r\n            var tArr = this._templet.boneSlotArray;\r\n            var tBS;\r\n            var tBSArr;\r\n            for (i = 0, n = tArr.length; i < n; i++) {\r\n                tBS = tArr[i];\r\n                tBSArr = this._bindBoneBoneSlotDic[tBS.parent];\r\n                if (tBSArr == null) {\r\n                    this._bindBoneBoneSlotDic[tBS.parent] = tBSArr = [];\r\n                }\r\n                this._boneSlotDic[tBS.name] = tBS = tBS.copy();\r\n                tBSArr.push(tBS);\r\n                this._boneSlotArray.push(tBS);\r\n            }\r\n        }\r\n    }\r\n    _emitMissedEvents(startTime, endTime, startIndex = 0) {\r\n        var tEventAniArr = this._templet.eventAniArr;\r\n        var tEventArr = tEventAniArr[this._player.currentAnimationClipIndex];\r\n        if (tEventArr) {\r\n            var i = 0, len;\r\n            var tEventData;\r\n            len = tEventArr.length;\r\n            for (i = startIndex; i < len; i++) {\r\n                tEventData = tEventArr[i];\r\n                if (tEventData.time >= this._player.playStart && tEventData.time <= this._player.playEnd) {\r\n                    this.event(Event.LABEL, tEventData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _update(autoKey = true) {\r\n        if (this._pause)\r\n            return;\r\n        if (autoKey && this._indexControl) {\r\n            return;\r\n        }\r\n        var tCurrTime = this.timer.currTimer;\r\n        var preIndex = this._player.currentKeyframeIndex;\r\n        var dTime = tCurrTime - this._lastTime;\r\n        if (autoKey) {\r\n            this._player._update(dTime);\r\n        }\r\n        else {\r\n            preIndex = -1;\r\n        }\r\n        this._lastTime = tCurrTime;\r\n        if (!this._player)\r\n            return;\r\n        this._index = this._clipIndex = this._player.currentKeyframeIndex;\r\n        if (this._index < 0)\r\n            return;\r\n        if (dTime > 0 && this._clipIndex == preIndex && this._lastUpdateAniClipIndex == this._aniClipIndex) {\r\n            return;\r\n        }\r\n        this._lastUpdateAniClipIndex = this._aniClipIndex;\r\n        if (preIndex > this._clipIndex && this._eventIndex != 0) {\r\n            this._emitMissedEvents(this._player.playStart, this._player.playEnd, this._eventIndex);\r\n            this._eventIndex = 0;\r\n        }\r\n        var tEventArr = this._templet.eventAniArr[this._aniClipIndex];\r\n        var _soundChannel;\r\n        if (tEventArr && this._eventIndex < tEventArr.length) {\r\n            var tEventData = tEventArr[this._eventIndex];\r\n            if (tEventData.time >= this._player.playStart && tEventData.time <= this._player.playEnd) {\r\n                if (this._player.currentPlayTime >= tEventData.time) {\r\n                    this.event(Event.LABEL, tEventData);\r\n                    this._eventIndex++;\r\n                    if (this._playAudio && tEventData.audioValue && tEventData.audioValue !== \"null\" && tEventData.audioValue !== \"undefined\") {\r\n                        _soundChannel = SoundManager.playSound(this._player.templet._path + tEventData.audioValue, 1, Handler.create(this, this._onAniSoundStoped));\r\n                        SoundManager.playbackRate = this._player.playbackRate;\r\n                        _soundChannel && this._soundChannelArr.push(_soundChannel);\r\n                    }\r\n                }\r\n            }\r\n            else if (tEventData.time < this._player.playStart && this._playAudio && tEventData.audioValue && tEventData.audioValue !== \"null\" && tEventData.audioValue !== \"undefined\") {\r\n                this._eventIndex++;\r\n                _soundChannel = SoundManager.playSound(this._player.templet._path + tEventData.audioValue, 1, Handler.create(this, this._onAniSoundStoped), null, (this._player.currentPlayTime - tEventData.time) / 1000);\r\n                SoundManager.playbackRate = this._player.playbackRate;\r\n                _soundChannel && this._soundChannelArr.push(_soundChannel);\r\n            }\r\n            else {\r\n                this._eventIndex++;\r\n            }\r\n        }\r\n        var tGraphics;\r\n        if (this._aniMode == 0) {\r\n            tGraphics = this._templet.getGrahicsDataWithCache(this._aniClipIndex, this._clipIndex) || this._createGraphics();\r\n            if (tGraphics && this.graphics != tGraphics) {\r\n                this.graphics = tGraphics;\r\n            }\r\n        }\r\n        else if (this._aniMode == 1) {\r\n            tGraphics = this._getGrahicsDataWithCache(this._aniClipIndex, this._clipIndex) || this._createGraphics();\r\n            if (tGraphics && this.graphics != tGraphics) {\r\n                this.graphics = tGraphics;\r\n            }\r\n        }\r\n        else {\r\n            this._createGraphics();\r\n        }\r\n    }\r\n    _onAniSoundStoped(force) {\r\n        var _channel;\r\n        for (var len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n            _channel = this._soundChannelArr[i];\r\n            if (_channel.isStopped || force) {\r\n                !_channel.isStopped && _channel.stop();\r\n                this._soundChannelArr.splice(i, 1);\r\n                len--;\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n    _createGraphics(_clipIndex = -1) {\r\n        if (_clipIndex == -1)\r\n            _clipIndex = this._clipIndex;\r\n        var curTime = _clipIndex * this._player.cacheFrameRateInterval;\r\n        var tDrawOrderData;\r\n        var tDrawOrderAniArr = this._templet.drawOrderAniArr;\r\n        var tDrawOrderArr = tDrawOrderAniArr[this._aniClipIndex];\r\n        if (tDrawOrderArr && tDrawOrderArr.length > 0) {\r\n            this._drawOrderIndex = 0;\r\n            tDrawOrderData = tDrawOrderArr[this._drawOrderIndex];\r\n            while (curTime >= tDrawOrderData.time) {\r\n                this._drawOrder = tDrawOrderData.drawOrder;\r\n                this._drawOrderIndex++;\r\n                if (this._drawOrderIndex >= tDrawOrderArr.length) {\r\n                    break;\r\n                }\r\n                tDrawOrderData = tDrawOrderArr[this._drawOrderIndex];\r\n            }\r\n        }\r\n        if (this._aniMode == 0 || this._aniMode == 1) {\r\n            this.graphics = GraphicsAni.create();\r\n        }\r\n        else {\r\n            if (this.graphics instanceof GraphicsAni) {\r\n                this.graphics.clear();\r\n            }\r\n            else {\r\n                this.graphics = GraphicsAni.create();\r\n            }\r\n        }\r\n        var tGraphics = this.graphics;\r\n        var bones = this._templet.getNodes(this._aniClipIndex);\r\n        var stopped = this._player.state == 0;\r\n        this._templet.getOriginalData(this._aniClipIndex, this._curOriginalData, null, _clipIndex, stopped ? (curTime + this._player.cacheFrameRateInterval) : curTime);\r\n        var tSectionArr = this._aniSectionDic[this._aniClipIndex];\r\n        var tStartIndex = 0;\r\n        var i = 0, j = 0, k = 0, n = 0;\r\n        var tDBBoneSlot;\r\n        var tDBBoneSlotArr;\r\n        var tParentTransform;\r\n        var tSrcBone;\r\n        var boneCount = this._templet.srcBoneMatrixArr.length;\r\n        var origDt = this._curOriginalData;\r\n        for (i = 0, n = tSectionArr[0]; i < boneCount; i++) {\r\n            tSrcBone = this._boneList[i];\r\n            var resultTrans = tSrcBone.resultTransform;\r\n            tParentTransform = this._templet.srcBoneMatrixArr[i];\r\n            resultTrans.scX = tParentTransform.scX * origDt[tStartIndex++];\r\n            resultTrans.skX = tParentTransform.skX + origDt[tStartIndex++];\r\n            resultTrans.skY = tParentTransform.skY + origDt[tStartIndex++];\r\n            resultTrans.scY = tParentTransform.scY * origDt[tStartIndex++];\r\n            resultTrans.x = tParentTransform.x + origDt[tStartIndex++];\r\n            resultTrans.y = tParentTransform.y + origDt[tStartIndex++];\r\n            if (this._templet.tMatrixDataLen === 8) {\r\n                resultTrans.skewX = tParentTransform.skewX + origDt[tStartIndex++];\r\n                resultTrans.skewY = tParentTransform.skewY + origDt[tStartIndex++];\r\n            }\r\n        }\r\n        var tSlotDic = {};\r\n        var tSlotAlphaDic = {};\r\n        var tBoneData;\r\n        for (n += tSectionArr[1]; i < n; i++) {\r\n            tBoneData = bones[i];\r\n            tSlotDic[tBoneData.name] = origDt[tStartIndex++];\r\n            tSlotAlphaDic[tBoneData.name] = origDt[tStartIndex++];\r\n            tStartIndex += 4;\r\n        }\r\n        var tBendDirectionDic = {};\r\n        var tMixDic = {};\r\n        for (n += tSectionArr[2]; i < n; i++) {\r\n            tBoneData = bones[i];\r\n            tBendDirectionDic[tBoneData.name] = origDt[tStartIndex++];\r\n            tMixDic[tBoneData.name] = origDt[tStartIndex++];\r\n            tStartIndex += 4;\r\n        }\r\n        if (this._pathDic) {\r\n            var tPathConstraint;\r\n            for (n += tSectionArr[3]; i < n; i++) {\r\n                tBoneData = bones[i];\r\n                tPathConstraint = this._pathDic[tBoneData.name];\r\n                if (tPathConstraint) {\r\n                    var tByte = new Byte(tBoneData.extenData);\r\n                    switch (tByte.getByte()) {\r\n                        case 1:\r\n                            tPathConstraint.position = origDt[tStartIndex++];\r\n                            break;\r\n                        case 2:\r\n                            tPathConstraint.spacing = origDt[tStartIndex++];\r\n                            break;\r\n                        case 3:\r\n                            tPathConstraint.rotateMix = origDt[tStartIndex++];\r\n                            tPathConstraint.translateMix = origDt[tStartIndex++];\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._rootBone.update(this._yReverseMatrix || Matrix.TEMP.identity());\r\n        if (this._ikArr) {\r\n            var tIkConstraint;\r\n            for (i = 0, n = this._ikArr.length; i < n; i++) {\r\n                tIkConstraint = this._ikArr[i];\r\n                if (tIkConstraint.name in tBendDirectionDic) {\r\n                    tIkConstraint.bendDirection = tBendDirectionDic[tIkConstraint.name];\r\n                }\r\n                if (tIkConstraint.name in tMixDic) {\r\n                    tIkConstraint.mix = tMixDic[tIkConstraint.name];\r\n                }\r\n                tIkConstraint.apply();\r\n            }\r\n        }\r\n        if (this._pathDic) {\r\n            for (var tPathStr in this._pathDic) {\r\n                tPathConstraint = this._pathDic[tPathStr];\r\n                tPathConstraint.apply(this._boneList, tGraphics);\r\n            }\r\n        }\r\n        if (this._tfArr) {\r\n            var tTfConstraint;\r\n            for (i = 0, k = this._tfArr.length; i < k; i++) {\r\n                tTfConstraint = this._tfArr[i];\r\n                tTfConstraint.apply();\r\n            }\r\n        }\r\n        for (i = 0, k = this._boneList.length; i < k; i++) {\r\n            tSrcBone = this._boneList[i];\r\n            tDBBoneSlotArr = this._bindBoneBoneSlotDic[tSrcBone.name];\r\n            tSrcBone.resultMatrix.copyTo(this._boneMatrixArray[i]);\r\n            if (tDBBoneSlotArr) {\r\n                for (j = 0, n = tDBBoneSlotArr.length; j < n; j++) {\r\n                    tDBBoneSlot = tDBBoneSlotArr[j];\r\n                    if (tDBBoneSlot) {\r\n                        tDBBoneSlot.setParentMatrix(tSrcBone.resultMatrix);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var tDeformDic = {};\r\n        var tDeformAniArr = this._templet.deformAniArr;\r\n        var tDeformAniData;\r\n        if (tDeformAniArr && tDeformAniArr.length > 0) {\r\n            if (this._lastAniClipIndex != this._aniClipIndex) {\r\n                this._lastAniClipIndex = this._aniClipIndex;\r\n                for (i = 0, n = this._boneSlotArray.length; i < n; i++) {\r\n                    tDBBoneSlot = this._boneSlotArray[i];\r\n                    tDBBoneSlot.deformData = null;\r\n                }\r\n            }\r\n            var tSkinDeformAni = tDeformAniArr[this._aniClipIndex];\r\n            tDeformAniData = (tSkinDeformAni[\"default\"]);\r\n            this._setDeform(tDeformAniData, tDeformDic, this._boneSlotArray, curTime);\r\n            var tSkin;\r\n            for (tSkin in tSkinDeformAni) {\r\n                if (tSkin != \"default\" && tSkin != this._skinName) {\r\n                    tDeformAniData = tSkinDeformAni[tSkin];\r\n                    this._setDeform(tDeformAniData, tDeformDic, this._boneSlotArray, curTime);\r\n                }\r\n            }\r\n            tDeformAniData = (tSkinDeformAni[this._skinName]);\r\n            this._setDeform(tDeformAniData, tDeformDic, this._boneSlotArray, curTime);\r\n        }\r\n        var tSlotData2;\r\n        var tSlotData3;\r\n        var tObject;\r\n        if (this._drawOrder) {\r\n            for (i = 0, n = this._drawOrder.length; i < n; i++) {\r\n                tDBBoneSlot = this._boneSlotArray[this._drawOrder[i]];\r\n                tSlotData2 = tSlotDic[tDBBoneSlot.name];\r\n                tSlotData3 = tSlotAlphaDic[tDBBoneSlot.name];\r\n                if (!isNaN(tSlotData3)) {\r\n                }\r\n                if (!isNaN(tSlotData2) && tSlotData2 != -2) {\r\n                    if (this._templet.attachmentNames) {\r\n                        tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);\r\n                    }\r\n                    else {\r\n                        tDBBoneSlot.showDisplayByIndex(tSlotData2);\r\n                    }\r\n                }\r\n                if (tDeformDic[this._drawOrder[i]]) {\r\n                    tObject = tDeformDic[this._drawOrder[i]];\r\n                    if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]) {\r\n                        tDBBoneSlot.deformData = tObject[tDBBoneSlot.currDisplayData.attachmentName];\r\n                    }\r\n                    else {\r\n                        tDBBoneSlot.deformData = null;\r\n                    }\r\n                }\r\n                else {\r\n                    tDBBoneSlot.deformData = null;\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2, tSlotData3);\r\n                }\r\n                else {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2);\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (i = 0, n = this._boneSlotArray.length; i < n; i++) {\r\n                tDBBoneSlot = this._boneSlotArray[i];\r\n                tSlotData2 = tSlotDic[tDBBoneSlot.name];\r\n                tSlotData3 = tSlotAlphaDic[tDBBoneSlot.name];\r\n                if (!isNaN(tSlotData3)) {\r\n                }\r\n                if (!isNaN(tSlotData2) && tSlotData2 != -2) {\r\n                    if (this._templet.attachmentNames) {\r\n                        tDBBoneSlot.showDisplayByName(this._templet.attachmentNames[tSlotData2]);\r\n                    }\r\n                    else {\r\n                        tDBBoneSlot.showDisplayByIndex(tSlotData2);\r\n                    }\r\n                }\r\n                if (tDeformDic[i]) {\r\n                    tObject = tDeformDic[i];\r\n                    if (tDBBoneSlot.currDisplayData && tObject[tDBBoneSlot.currDisplayData.attachmentName]) {\r\n                        tDBBoneSlot.deformData = tObject[tDBBoneSlot.currDisplayData.attachmentName];\r\n                    }\r\n                    else {\r\n                        tDBBoneSlot.deformData = null;\r\n                    }\r\n                }\r\n                else {\r\n                    tDBBoneSlot.deformData = null;\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2, tSlotData3);\r\n                }\r\n                else {\r\n                    tDBBoneSlot.draw(tGraphics, this._boneMatrixArray, this._aniMode == 2);\r\n                }\r\n                if (!isNaN(tSlotData3)) {\r\n                }\r\n            }\r\n        }\r\n        if (this._aniMode == 0) {\r\n            this._templet.setGrahicsDataWithCache(this._aniClipIndex, _clipIndex, tGraphics);\r\n            this._checkIsAllParsed(this._aniClipIndex);\r\n        }\r\n        else if (this._aniMode == 1) {\r\n            this._setGrahicsDataWithCache(this._aniClipIndex, _clipIndex, tGraphics);\r\n        }\r\n        return tGraphics;\r\n    }\r\n    _checkIsAllParsed(_aniClipIndex) {\r\n        var i, len;\r\n        len = Math.floor(0.01 + this._templet.getAniDuration(_aniClipIndex) / 1000 * this._player.cacheFrameRate);\r\n        for (i = 0; i < len; i++) {\r\n            if (!this._templet.getGrahicsDataWithCache(_aniClipIndex, i))\r\n                return;\r\n        }\r\n        if (!this._templet.getGrahicsDataWithCache(_aniClipIndex, len)) {\r\n            this._createGraphics(len);\r\n            return;\r\n        }\r\n        this._templet.deleteAniData(_aniClipIndex);\r\n    }\r\n    _setDeform(tDeformAniData, tDeformDic, _boneSlotArray, curTime) {\r\n        if (!tDeformAniData)\r\n            return;\r\n        var tDeformSlotData;\r\n        var tDeformSlotDisplayData;\r\n        var tDBBoneSlot;\r\n        var i, n, j;\r\n        if (tDeformAniData) {\r\n            for (i = 0, n = tDeformAniData.deformSlotDataList.length; i < n; i++) {\r\n                tDeformSlotData = tDeformAniData.deformSlotDataList[i];\r\n                for (j = 0; j < tDeformSlotData.deformSlotDisplayList.length; j++) {\r\n                    tDeformSlotDisplayData = tDeformSlotData.deformSlotDisplayList[j];\r\n                    tDBBoneSlot = _boneSlotArray[tDeformSlotDisplayData.slotIndex];\r\n                    tDeformSlotDisplayData.apply(curTime, tDBBoneSlot);\r\n                    if (!tDeformDic[tDeformSlotDisplayData.slotIndex]) {\r\n                        tDeformDic[tDeformSlotDisplayData.slotIndex] = {};\r\n                    }\r\n                    tDeformDic[tDeformSlotDisplayData.slotIndex][tDeformSlotDisplayData.attachment] = tDeformSlotDisplayData.deformData;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getAnimNum() {\r\n        return this._templet.getAnimationCount();\r\n    }\r\n    getAniNameByIndex(index) {\r\n        return this._templet.getAniNameByIndex(index);\r\n    }\r\n    getSlotByName(name) {\r\n        return this._boneSlotDic[name];\r\n    }\r\n    showSkinByName(name, freshSlotIndex = true) {\r\n        this.showSkinByIndex(this._templet.getSkinIndexByName(name), freshSlotIndex);\r\n    }\r\n    showSkinByIndex(skinIndex, freshSlotIndex = true) {\r\n        for (var i = 0; i < this._boneSlotArray.length; i++) {\r\n            this._boneSlotArray[i].showSlotData(null, freshSlotIndex);\r\n        }\r\n        if (this._templet.showSkinByIndex(this._boneSlotDic, skinIndex, freshSlotIndex)) {\r\n            var tSkinData = this._templet.skinDataArray[skinIndex];\r\n            this._skinIndex = skinIndex;\r\n            this._skinName = tSkinData.name;\r\n        }\r\n        this._clearCache();\r\n    }\r\n    showSlotSkinByIndex(slotName, index) {\r\n        if (this._aniMode == 0)\r\n            return;\r\n        var tBoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.showDisplayByIndex(index);\r\n        }\r\n        this._clearCache();\r\n    }\r\n    showSlotSkinByName(slotName, name) {\r\n        if (this._aniMode == 0)\r\n            return;\r\n        var tBoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.showDisplayByName(name);\r\n        }\r\n        this._clearCache();\r\n    }\r\n    replaceSlotSkinName(slotName, oldName, newName) {\r\n        if (this._aniMode == 0)\r\n            return;\r\n        var tBoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.replaceDisplayByName(oldName, newName);\r\n        }\r\n        this._clearCache();\r\n    }\r\n    replaceSlotSkinByIndex(slotName, oldIndex, newIndex) {\r\n        if (this._aniMode == 0)\r\n            return;\r\n        var tBoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.replaceDisplayByIndex(oldIndex, newIndex);\r\n        }\r\n        this._clearCache();\r\n    }\r\n    setSlotSkin(slotName, texture) {\r\n        if (this._aniMode == 0)\r\n            return;\r\n        var tBoneSlot = this.getSlotByName(slotName);\r\n        if (tBoneSlot) {\r\n            tBoneSlot.replaceSkin(texture);\r\n        }\r\n        this._clearCache();\r\n    }\r\n    _clearCache() {\r\n        if (this._aniMode == 1) {\r\n            for (var i = 0, n = this._graphicsCache.length; i < n; i++) {\r\n                for (var j = 0, len = this._graphicsCache[i].length; j < len; j++) {\r\n                    var gp = this._graphicsCache[i][j];\r\n                    if (gp && gp != this.graphics) {\r\n                        GraphicsAni.recycle(gp);\r\n                    }\r\n                }\r\n                this._graphicsCache[i].length = 0;\r\n            }\r\n        }\r\n    }\r\n    play(nameOrIndex, loop, force = true, start = 0, end = 0, freshSkin = true, playAudio = true) {\r\n        this._playAudio = playAudio;\r\n        this._indexControl = false;\r\n        var index = -1;\r\n        var duration;\r\n        if (loop) {\r\n            duration = 2147483647;\r\n        }\r\n        else {\r\n            duration = 0;\r\n        }\r\n        if (typeof (nameOrIndex) == 'string') {\r\n            for (var i = 0, n = this._templet.getAnimationCount(); i < n; i++) {\r\n                var animation = this._templet.getAnimation(i);\r\n                if (animation && nameOrIndex == animation.name) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            index = nameOrIndex;\r\n        }\r\n        if (index > -1 && index < this.getAnimNum()) {\r\n            this._aniClipIndex = index;\r\n            if (force || this._pause || this._currAniIndex != index) {\r\n                this._currAniIndex = index;\r\n                this._curOriginalData = new Float32Array(this._templet.getTotalkeyframesLength(index));\r\n                this._drawOrder = null;\r\n                this._eventIndex = 0;\r\n                this._player.play(index, this._player.playbackRate, duration, start, end);\r\n                if (freshSkin)\r\n                    this._templet.showSkinByIndex(this._boneSlotDic, this._skinIndex);\r\n                if (this._pause) {\r\n                    this._pause = false;\r\n                    this._lastTime = ILaya.Browser.now();\r\n                    this.timer.frameLoop(1, this, this._update, null, true);\r\n                }\r\n                this._update();\r\n            }\r\n        }\r\n    }\r\n    stop() {\r\n        if (!this._pause) {\r\n            this._pause = true;\r\n            if (this._player) {\r\n                this._player.stop(true);\r\n            }\r\n            if (this._soundChannelArr.length > 0) {\r\n                this._onAniSoundStoped(true);\r\n            }\r\n            this.timer.clear(this, this._update);\r\n        }\r\n    }\r\n    playbackRate(value) {\r\n        if (this._player) {\r\n            this._player.playbackRate = value;\r\n        }\r\n    }\r\n    paused() {\r\n        if (!this._pause) {\r\n            this._pause = true;\r\n            if (this._player) {\r\n                this._player.paused = true;\r\n            }\r\n            if (this._soundChannelArr.length > 0) {\r\n                var _soundChannel;\r\n                for (var len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n                    _soundChannel = this._soundChannelArr[i];\r\n                    if (!_soundChannel.isStopped) {\r\n                        _soundChannel.pause();\r\n                    }\r\n                }\r\n            }\r\n            this.timer.clear(this, this._update);\r\n        }\r\n    }\r\n    resume() {\r\n        this._indexControl = false;\r\n        if (this._pause) {\r\n            this._pause = false;\r\n            if (this._player) {\r\n                this._player.paused = false;\r\n            }\r\n            if (this._soundChannelArr.length > 0) {\r\n                var _soundChannel;\r\n                for (var len = this._soundChannelArr.length, i = 0; i < len; i++) {\r\n                    _soundChannel = this._soundChannelArr[i];\r\n                    if (_soundChannel.audioBuffer) {\r\n                        _soundChannel.resume();\r\n                    }\r\n                }\r\n            }\r\n            this._lastTime = ILaya.Browser.now();\r\n            this.timer.frameLoop(1, this, this._update, null, true);\r\n        }\r\n    }\r\n    _getGrahicsDataWithCache(aniIndex, frameIndex) {\r\n        return this._graphicsCache[aniIndex][frameIndex];\r\n    }\r\n    _setGrahicsDataWithCache(aniIndex, frameIndex, graphics) {\r\n        this._graphicsCache[aniIndex][frameIndex] = graphics;\r\n    }\r\n    destroy(destroyChild = true) {\r\n        super.destroy(destroyChild);\r\n        this._templet._removeReference(1);\r\n        this._templet = null;\r\n        if (this._player)\r\n            this._player.offAll();\r\n        this._player = null;\r\n        this._curOriginalData = null;\r\n        this._boneMatrixArray.length = 0;\r\n        this._lastTime = 0;\r\n        this.timer.clear(this, this._update);\r\n        if (this._soundChannelArr.length > 0) {\r\n            this._onAniSoundStoped(true);\r\n        }\r\n    }\r\n    get index() {\r\n        return this._index;\r\n    }\r\n    set index(value) {\r\n        if (this.player) {\r\n            this._index = value;\r\n            this._player.currentTime = this._index * 1000 / this._player.cacheFrameRate;\r\n            this._indexControl = true;\r\n            this._update(false);\r\n        }\r\n    }\r\n    get total() {\r\n        if (this._templet && this._player) {\r\n            this._total = Math.floor(this._templet.getAniDuration(this._player.currentAnimationClipIndex) / 1000 * this._player.cacheFrameRate);\r\n        }\r\n        else {\r\n            this._total = -1;\r\n        }\r\n        return this._total;\r\n    }\r\n    get player() {\r\n        return this._player;\r\n    }\r\n    get templet() {\r\n        return this._templet;\r\n    }\r\n}\r\nSkeleton.useSimpleMeshInCanvas = false;\r\nIAniLib.Skeleton = Skeleton;\r\nILaya.regClass(Skeleton);\r\nClassUtils.regClass(\"laya.ani.bone.Skeleton\", Skeleton);\r\nClassUtils.regClass(\"Laya.Skeleton\", Skeleton);\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/Bone.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/IkConstraint.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/PathConstraintData.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/PathConstraint.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/BoneSlot.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/TfConstraint.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/SkinData.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/EventData.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/DrawOrderData.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/Transform.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/DeformAniData.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/DeformSlotData.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/DeformSlotDisplayData.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AnimationPlayer.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/GraphicsAni.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/maths/Matrix.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/media/SoundChannel.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/media/SoundManager.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Graphics.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Byte.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/resource/Texture.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AniLibPack.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/Templet.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/.rpt2_cache/placeholder/laya/ani/bone/Skeleton.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Bone } from \"./Bone\";\r\nimport { BoneSlot } from \"./BoneSlot\";\r\nimport { AnimationPlayer } from \"../AnimationPlayer\";\r\nimport { GraphicsAni } from \"../GraphicsAni\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { Handler } from \"../../utils/Handler\";\r\nimport { Texture } from \"../../resource/Texture\";\r\nimport { Templet } from \"../../ani/bone/Templet\";\r\nexport declare class Skeleton extends Sprite {\r\n    static useSimpleMeshInCanvas: boolean;\r\n    protected _templet: Templet;\r\n    protected _player: AnimationPlayer;\r\n    protected _curOriginalData: Float32Array;\r\n    private _boneMatrixArray;\r\n    private _lastTime;\r\n    private _currAniIndex;\r\n    private _pause;\r\n    protected _aniClipIndex: number;\r\n    protected _clipIndex: number;\r\n    private _skinIndex;\r\n    private _skinName;\r\n    private _aniMode;\r\n    private _graphicsCache;\r\n    private _boneSlotDic;\r\n    private _bindBoneBoneSlotDic;\r\n    private _boneSlotArray;\r\n    private _index;\r\n    private _total;\r\n    private _indexControl;\r\n    private _aniPath;\r\n    private _complete;\r\n    private _loadAniMode;\r\n    private _yReverseMatrix;\r\n    private _ikArr;\r\n    private _tfArr;\r\n    private _pathDic;\r\n    private _rootBone;\r\n    protected _boneList: Bone[];\r\n    protected _aniSectionDic: any;\r\n    private _eventIndex;\r\n    private _drawOrderIndex;\r\n    private _drawOrder;\r\n    private _lastAniClipIndex;\r\n    private _lastUpdateAniClipIndex;\r\n    private _playAudio;\r\n    private _soundChannelArr;\r\n    constructor(templet?: Templet, aniMode?: number);\r\n    init(templet: Templet, aniMode?: number): void;\r\n    url: string;\r\n    load(path: string, complete?: Handler, aniMode?: number): void;\r\n    private _onLoaded;\r\n    private _parseComplete;\r\n    private _parseFail;\r\n    private _onPlay;\r\n    private _onStop;\r\n    private _onPause;\r\n    private _parseSrcBoneMatrix;\r\n    private _emitMissedEvents;\r\n    private _update;\r\n    private _onAniSoundStoped;\r\n    protected _createGraphics(_clipIndex?: number): GraphicsAni;\r\n    private _checkIsAllParsed;\r\n    private _setDeform;\r\n    getAnimNum(): number;\r\n    getAniNameByIndex(index: number): string;\r\n    getSlotByName(name: string): BoneSlot;\r\n    showSkinByName(name: string, freshSlotIndex?: boolean): void;\r\n    showSkinByIndex(skinIndex: number, freshSlotIndex?: boolean): void;\r\n    showSlotSkinByIndex(slotName: string, index: number): void;\r\n    showSlotSkinByName(slotName: string, name: string): void;\r\n    replaceSlotSkinName(slotName: string, oldName: string, newName: string): void;\r\n    replaceSlotSkinByIndex(slotName: string, oldIndex: number, newIndex: number): void;\r\n    setSlotSkin(slotName: string, texture: Texture): void;\r\n    private _clearCache;\r\n    play(nameOrIndex: any, loop: boolean, force?: boolean, start?: number, end?: number, freshSkin?: boolean, playAudio?: boolean): void;\r\n    stop(): void;\r\n    playbackRate(value: number): void;\r\n    paused(): void;\r\n    resume(): void;\r\n    private _getGrahicsDataWithCache;\r\n    private _setGrahicsDataWithCache;\r\n    destroy(destroyChild?: boolean): void;\r\n    index: number;\r\n    readonly total: number;\r\n    readonly player: AnimationPlayer;\r\n    readonly templet: Templet;\r\n}\r\n"
  }
}

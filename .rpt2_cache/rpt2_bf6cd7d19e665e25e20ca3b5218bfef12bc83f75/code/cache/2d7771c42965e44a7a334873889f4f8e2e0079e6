{
  "code": "import { Matrix } from \"../maths/Matrix\";\r\nexport class Byte {\r\n    constructor(data = null) {\r\n        this._xd_ = true;\r\n        this._allocated_ = 8;\r\n        this._pos_ = 0;\r\n        this._length = 0;\r\n        if (data) {\r\n            this._u8d_ = new Uint8Array(data);\r\n            this._d_ = new DataView(this._u8d_.buffer);\r\n            this._length = this._d_.byteLength;\r\n        }\r\n        else {\r\n            this._resizeBuffer(this._allocated_);\r\n        }\r\n    }\r\n    static getSystemEndian() {\r\n        if (!Byte._sysEndian) {\r\n            var buffer = new ArrayBuffer(2);\r\n            new DataView(buffer).setInt16(0, 256, true);\r\n            Byte._sysEndian = (new Int16Array(buffer))[0] === 256 ? Byte.LITTLE_ENDIAN : Byte.BIG_ENDIAN;\r\n        }\r\n        return Byte._sysEndian;\r\n    }\r\n    get buffer() {\r\n        var rstBuffer = this._d_.buffer;\r\n        if (rstBuffer.byteLength === this._length)\r\n            return rstBuffer;\r\n        return rstBuffer.slice(0, this._length);\r\n    }\r\n    get endian() {\r\n        return this._xd_ ? Byte.LITTLE_ENDIAN : Byte.BIG_ENDIAN;\r\n    }\r\n    set endian(value) {\r\n        this._xd_ = (value === Byte.LITTLE_ENDIAN);\r\n    }\r\n    set length(value) {\r\n        if (this._allocated_ < value)\r\n            this._resizeBuffer(this._allocated_ = Math.floor(Math.max(value, this._allocated_ * 2)));\r\n        else if (this._allocated_ > value)\r\n            this._resizeBuffer(this._allocated_ = value);\r\n        this._length = value;\r\n    }\r\n    get length() {\r\n        return this._length;\r\n    }\r\n    _resizeBuffer(len) {\r\n        try {\r\n            var newByteView = new Uint8Array(len);\r\n            if (this._u8d_ != null) {\r\n                if (this._u8d_.length <= len)\r\n                    newByteView.set(this._u8d_);\r\n                else\r\n                    newByteView.set(this._u8d_.subarray(0, len));\r\n            }\r\n            this._u8d_ = newByteView;\r\n            this._d_ = new DataView(newByteView.buffer);\r\n        }\r\n        catch (err) {\r\n            throw \"Invalid typed array length:\" + len;\r\n        }\r\n    }\r\n    getString() {\r\n        return this.readString();\r\n    }\r\n    readString() {\r\n        return this._rUTF(this.getUint16());\r\n    }\r\n    getFloat32Array(start, len) {\r\n        return this.readFloat32Array(start, len);\r\n    }\r\n    readFloat32Array(start, len) {\r\n        var end = start + len;\r\n        end = (end > this._length) ? this._length : end;\r\n        var v = new Float32Array(this._d_.buffer.slice(start, end));\r\n        this._pos_ = end;\r\n        return v;\r\n    }\r\n    getUint8Array(start, len) {\r\n        return this.readUint8Array(start, len);\r\n    }\r\n    readUint8Array(start, len) {\r\n        var end = start + len;\r\n        end = (end > this._length) ? this._length : end;\r\n        var v = new Uint8Array(this._d_.buffer.slice(start, end));\r\n        this._pos_ = end;\r\n        return v;\r\n    }\r\n    getInt16Array(start, len) {\r\n        return this.readInt16Array(start, len);\r\n    }\r\n    readInt16Array(start, len) {\r\n        var end = start + len;\r\n        end = (end > this._length) ? this._length : end;\r\n        var v = new Int16Array(this._d_.buffer.slice(start, end));\r\n        this._pos_ = end;\r\n        return v;\r\n    }\r\n    getFloat32() {\r\n        return this.readFloat32();\r\n    }\r\n    readFloat32() {\r\n        if (this._pos_ + 4 > this._length)\r\n            throw \"getFloat32 error - Out of bounds\";\r\n        var v = this._d_.getFloat32(this._pos_, this._xd_);\r\n        this._pos_ += 4;\r\n        return v;\r\n    }\r\n    getFloat64() {\r\n        return this.readFloat64();\r\n    }\r\n    readFloat64() {\r\n        if (this._pos_ + 8 > this._length)\r\n            throw \"getFloat64 error - Out of bounds\";\r\n        var v = this._d_.getFloat64(this._pos_, this._xd_);\r\n        this._pos_ += 8;\r\n        return v;\r\n    }\r\n    writeFloat32(value) {\r\n        this._ensureWrite(this._pos_ + 4);\r\n        this._d_.setFloat32(this._pos_, value, this._xd_);\r\n        this._pos_ += 4;\r\n    }\r\n    writeFloat64(value) {\r\n        this._ensureWrite(this._pos_ + 8);\r\n        this._d_.setFloat64(this._pos_, value, this._xd_);\r\n        this._pos_ += 8;\r\n    }\r\n    getInt32() {\r\n        return this.readInt32();\r\n    }\r\n    readInt32() {\r\n        if (this._pos_ + 4 > this._length)\r\n            throw \"getInt32 error - Out of bounds\";\r\n        var float = this._d_.getInt32(this._pos_, this._xd_);\r\n        this._pos_ += 4;\r\n        return float;\r\n    }\r\n    getUint32() {\r\n        return this.readUint32();\r\n    }\r\n    readUint32() {\r\n        if (this._pos_ + 4 > this._length)\r\n            throw \"getUint32 error - Out of bounds\";\r\n        var v = this._d_.getUint32(this._pos_, this._xd_);\r\n        this._pos_ += 4;\r\n        return v;\r\n    }\r\n    writeInt32(value) {\r\n        this._ensureWrite(this._pos_ + 4);\r\n        this._d_.setInt32(this._pos_, value, this._xd_);\r\n        this._pos_ += 4;\r\n    }\r\n    writeUint32(value) {\r\n        this._ensureWrite(this._pos_ + 4);\r\n        this._d_.setUint32(this._pos_, value, this._xd_);\r\n        this._pos_ += 4;\r\n    }\r\n    getInt16() {\r\n        return this.readInt16();\r\n    }\r\n    readInt16() {\r\n        if (this._pos_ + 2 > this._length)\r\n            throw \"getInt16 error - Out of bounds\";\r\n        var us = this._d_.getInt16(this._pos_, this._xd_);\r\n        this._pos_ += 2;\r\n        return us;\r\n    }\r\n    getUint16() {\r\n        return this.readUint16();\r\n    }\r\n    readUint16() {\r\n        if (this._pos_ + 2 > this._length)\r\n            throw \"getUint16 error - Out of bounds\";\r\n        var us = this._d_.getUint16(this._pos_, this._xd_);\r\n        this._pos_ += 2;\r\n        return us;\r\n    }\r\n    writeUint16(value) {\r\n        this._ensureWrite(this._pos_ + 2);\r\n        this._d_.setUint16(this._pos_, value, this._xd_);\r\n        this._pos_ += 2;\r\n    }\r\n    writeInt16(value) {\r\n        this._ensureWrite(this._pos_ + 2);\r\n        this._d_.setInt16(this._pos_, value, this._xd_);\r\n        this._pos_ += 2;\r\n    }\r\n    getUint8() {\r\n        return this.readUint8();\r\n    }\r\n    readUint8() {\r\n        if (this._pos_ + 1 > this._length)\r\n            throw \"getUint8 error - Out of bounds\";\r\n        return this._u8d_[this._pos_++];\r\n    }\r\n    writeUint8(value) {\r\n        this._ensureWrite(this._pos_ + 1);\r\n        this._d_.setUint8(this._pos_, value);\r\n        this._pos_++;\r\n    }\r\n    _getUInt8(pos) {\r\n        return this._readUInt8(pos);\r\n    }\r\n    _readUInt8(pos) {\r\n        return this._d_.getUint8(pos);\r\n    }\r\n    _getUint16(pos) {\r\n        return this._readUint16(pos);\r\n    }\r\n    _readUint16(pos) {\r\n        return this._d_.getUint16(pos, this._xd_);\r\n    }\r\n    _getMatrix() {\r\n        return this._readMatrix();\r\n    }\r\n    _readMatrix() {\r\n        var rst = new Matrix(this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32());\r\n        return rst;\r\n    }\r\n    _rUTF(len) {\r\n        var v = \"\", max = this._pos_ + len, c, c2, c3, f = String.fromCharCode;\r\n        var u = this._u8d_, i = 0;\r\n        var strs = [];\r\n        var n = 0;\r\n        strs.length = 1000;\r\n        while (this._pos_ < max) {\r\n            c = u[this._pos_++];\r\n            if (c < 0x80) {\r\n                if (c != 0)\r\n                    strs[n++] = f(c);\r\n            }\r\n            else if (c < 0xE0) {\r\n                strs[n++] = f(((c & 0x3F) << 6) | (u[this._pos_++] & 0x7F));\r\n            }\r\n            else if (c < 0xF0) {\r\n                c2 = u[this._pos_++];\r\n                strs[n++] = f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[this._pos_++] & 0x7F));\r\n            }\r\n            else {\r\n                c2 = u[this._pos_++];\r\n                c3 = u[this._pos_++];\r\n                const _code = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (u[this._pos_++] & 0x7F);\r\n                if (_code >= 0x10000) {\r\n                    const _offset = _code - 0x10000;\r\n                    const _lead = 0xd800 | (_offset >> 10);\r\n                    const _trail = 0xdc00 | (_offset & 0x3ff);\r\n                    strs[n++] = f(_lead);\r\n                    strs[n++] = f(_trail);\r\n                }\r\n                else {\r\n                    strs[n++] = f(_code);\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        strs.length = n;\r\n        return strs.join('');\r\n    }\r\n    getCustomString(len) {\r\n        return this.readCustomString(len);\r\n    }\r\n    readCustomString(len) {\r\n        var v = \"\", ulen = 0, c, c2, f = String.fromCharCode;\r\n        var u = this._u8d_, i = 0;\r\n        while (len > 0) {\r\n            c = u[this._pos_];\r\n            if (c < 0x80) {\r\n                v += f(c);\r\n                this._pos_++;\r\n                len--;\r\n            }\r\n            else {\r\n                ulen = c - 0x80;\r\n                this._pos_++;\r\n                len -= ulen;\r\n                while (ulen > 0) {\r\n                    c = u[this._pos_++];\r\n                    c2 = u[this._pos_++];\r\n                    v += f((c2 << 8) | c);\r\n                    ulen--;\r\n                }\r\n            }\r\n        }\r\n        return v;\r\n    }\r\n    get pos() {\r\n        return this._pos_;\r\n    }\r\n    set pos(value) {\r\n        this._pos_ = value;\r\n    }\r\n    get bytesAvailable() {\r\n        return this._length - this._pos_;\r\n    }\r\n    clear() {\r\n        this._pos_ = 0;\r\n        this.length = 0;\r\n    }\r\n    __getBuffer() {\r\n        return this._d_.buffer;\r\n    }\r\n    writeUTFBytes(value) {\r\n        value = value + \"\";\r\n        for (var i = 0, sz = value.length; i < sz; i++) {\r\n            var c = value.charCodeAt(i);\r\n            if (c <= 0x7F) {\r\n                this.writeByte(c);\r\n            }\r\n            else if (c <= 0x7FF) {\r\n                this._ensureWrite(this._pos_ + 2);\r\n                this._u8d_.set([0xC0 | (c >> 6), 0x80 | (c & 0x3F)], this._pos_);\r\n                this._pos_ += 2;\r\n            }\r\n            else if (c >= 0xD800 && c <= 0xDBFF) {\r\n                i++;\r\n                const c2 = value.charCodeAt(i);\r\n                if (!Number.isNaN(c2) && c2 >= 0xDC00 && c2 <= 0xDFFF) {\r\n                    const _p1 = (c & 0x3FF) + 0x40;\r\n                    const _p2 = c2 & 0x3FF;\r\n                    const _b1 = 0xF0 | ((_p1 >> 8) & 0x3F);\r\n                    const _b2 = 0x80 | ((_p1 >> 2) & 0x3F);\r\n                    const _b3 = 0x80 | ((_p1 & 0x3) << 4) | ((_p2 >> 6) & 0xF);\r\n                    const _b4 = 0x80 | (_p2 & 0x3F);\r\n                    this._ensureWrite(this._pos_ + 4);\r\n                    this._u8d_.set([_b1, _b2, _b3, _b4], this._pos_);\r\n                    this._pos_ += 4;\r\n                }\r\n            }\r\n            else if (c <= 0xFFFF) {\r\n                this._ensureWrite(this._pos_ + 3);\r\n                this._u8d_.set([0xE0 | (c >> 12), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\r\n                this._pos_ += 3;\r\n            }\r\n            else {\r\n                this._ensureWrite(this._pos_ + 4);\r\n                this._u8d_.set([0xF0 | (c >> 18), 0x80 | ((c >> 12) & 0x3F), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\r\n                this._pos_ += 4;\r\n            }\r\n        }\r\n    }\r\n    writeUTFString(value) {\r\n        var tPos = this.pos;\r\n        this.writeUint16(1);\r\n        this.writeUTFBytes(value);\r\n        var dPos = this.pos - tPos - 2;\r\n        this._d_.setUint16(tPos, dPos, this._xd_);\r\n    }\r\n    writeUTFString32(value) {\r\n        var tPos = this.pos;\r\n        this.writeUint32(1);\r\n        this.writeUTFBytes(value);\r\n        var dPos = this.pos - tPos - 4;\r\n        this._d_.setUint32(tPos, dPos, this._xd_);\r\n    }\r\n    readUTFString() {\r\n        return this.readUTFBytes(this.getUint16());\r\n    }\r\n    readUTFString32() {\r\n        return this.readUTFBytes(this.getUint32());\r\n    }\r\n    getUTFString() {\r\n        return this.readUTFString();\r\n    }\r\n    readUTFBytes(len = -1) {\r\n        if (len === 0)\r\n            return \"\";\r\n        var lastBytes = this.bytesAvailable;\r\n        if (len > lastBytes)\r\n            throw \"readUTFBytes error - Out of bounds\";\r\n        len = len > 0 ? len : lastBytes;\r\n        return this._rUTF(len);\r\n    }\r\n    getUTFBytes(len = -1) {\r\n        return this.readUTFBytes(len);\r\n    }\r\n    writeByte(value) {\r\n        this._ensureWrite(this._pos_ + 1);\r\n        this._d_.setInt8(this._pos_, value);\r\n        this._pos_ += 1;\r\n    }\r\n    readByte() {\r\n        if (this._pos_ + 1 > this._length)\r\n            throw \"readByte error - Out of bounds\";\r\n        return this._d_.getInt8(this._pos_++);\r\n    }\r\n    getByte() {\r\n        return this.readByte();\r\n    }\r\n    _ensureWrite(lengthToEnsure) {\r\n        if (this._length < lengthToEnsure)\r\n            this._length = lengthToEnsure;\r\n        if (this._allocated_ < lengthToEnsure)\r\n            this.length = lengthToEnsure;\r\n    }\r\n    writeArrayBuffer(arraybuffer, offset = 0, length = 0) {\r\n        if (offset < 0 || length < 0)\r\n            throw \"writeArrayBuffer error - Out of bounds\";\r\n        if (length == 0)\r\n            length = arraybuffer.byteLength - offset;\r\n        this._ensureWrite(this._pos_ + length);\r\n        var uint8array = new Uint8Array(arraybuffer);\r\n        this._u8d_.set(uint8array.subarray(offset, offset + length), this._pos_);\r\n        this._pos_ += length;\r\n    }\r\n    readArrayBuffer(length) {\r\n        var rst;\r\n        rst = this._u8d_.buffer.slice(this._pos_, this._pos_ + length);\r\n        this._pos_ = this._pos_ + length;\r\n        return rst;\r\n    }\r\n}\r\nByte.BIG_ENDIAN = \"bigEndian\";\r\nByte.LITTLE_ENDIAN = \"littleEndian\";\r\nByte._sysEndian = null;\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/maths/Matrix.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Byte.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Matrix } from \"../maths/Matrix\";\r\nexport declare class Byte {\r\n    static BIG_ENDIAN: string;\r\n    static LITTLE_ENDIAN: string;\r\n    private static _sysEndian;\r\n    protected _xd_: boolean;\r\n    private _allocated_;\r\n    protected _d_: any;\r\n    protected _u8d_: any;\r\n    protected _pos_: number;\r\n    protected _length: number;\r\n    static getSystemEndian(): string;\r\n    constructor(data?: any);\r\n    readonly buffer: ArrayBuffer;\r\n    endian: string;\r\n    length: number;\r\n    private _resizeBuffer;\r\n    getString(): string;\r\n    readString(): string;\r\n    getFloat32Array(start: number, len: number): any;\r\n    readFloat32Array(start: number, len: number): any;\r\n    getUint8Array(start: number, len: number): Uint8Array;\r\n    readUint8Array(start: number, len: number): Uint8Array;\r\n    getInt16Array(start: number, len: number): any;\r\n    readInt16Array(start: number, len: number): any;\r\n    getFloat32(): number;\r\n    readFloat32(): number;\r\n    getFloat64(): number;\r\n    readFloat64(): number;\r\n    writeFloat32(value: number): void;\r\n    writeFloat64(value: number): void;\r\n    getInt32(): number;\r\n    readInt32(): number;\r\n    getUint32(): number;\r\n    readUint32(): number;\r\n    writeInt32(value: number): void;\r\n    writeUint32(value: number): void;\r\n    getInt16(): number;\r\n    readInt16(): number;\r\n    getUint16(): number;\r\n    readUint16(): number;\r\n    writeUint16(value: number): void;\r\n    writeInt16(value: number): void;\r\n    getUint8(): number;\r\n    readUint8(): number;\r\n    writeUint8(value: number): void;\r\n    _getUInt8(pos: number): number;\r\n    _readUInt8(pos: number): number;\r\n    _getUint16(pos: number): number;\r\n    _readUint16(pos: number): number;\r\n    _getMatrix(): Matrix;\r\n    _readMatrix(): Matrix;\r\n    private _rUTF;\r\n    getCustomString(len: number): string;\r\n    readCustomString(len: number): string;\r\n    pos: number;\r\n    readonly bytesAvailable: number;\r\n    clear(): void;\r\n    __getBuffer(): ArrayBuffer;\r\n    writeUTFBytes(value: string): void;\r\n    writeUTFString(value: string): void;\r\n    writeUTFString32(value: string): void;\r\n    readUTFString(): string;\r\n    readUTFString32(): string;\r\n    getUTFString(): string;\r\n    readUTFBytes(len?: number): string;\r\n    getUTFBytes(len?: number): string;\r\n    writeByte(value: number): void;\r\n    readByte(): number;\r\n    getByte(): number;\r\n    _ensureWrite(lengthToEnsure: number): void;\r\n    writeArrayBuffer(arraybuffer: any, offset?: number, length?: number): void;\r\n    readArrayBuffer(length: number): ArrayBuffer;\r\n}\r\n"
  }
}

{
  "code": "import { UIComponent } from \"./UIComponent\";\r\nimport { Button } from \"./Button\";\r\nimport { Slider } from \"./Slider\";\r\nimport { UIConfig } from \"./../../UIConfig\";\r\nimport { Styles } from \"./Styles\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Loader } from \"../net/Loader\";\r\nimport { Ease } from \"../utils/Ease\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { Tween } from \"../utils/Tween\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class ScrollBar extends UIComponent {\r\n    constructor(skin = null) {\r\n        super();\r\n        this.rollRatio = 0.97;\r\n        this.scaleBar = true;\r\n        this.autoHide = false;\r\n        this.elasticDistance = 0;\r\n        this.elasticBackTime = 500;\r\n        this._showButtons = UIConfig.showButtons;\r\n        this._scrollSize = 1;\r\n        this._thumbPercent = 1;\r\n        this._lastOffset = 0;\r\n        this._checkElastic = false;\r\n        this._isElastic = false;\r\n        this._hide = false;\r\n        this._clickOnly = true;\r\n        this._touchScrollEnable = UIConfig.touchScrollEnable;\r\n        this._mouseWheelEnable = UIConfig.mouseWheelEnable;\r\n        this.skin = skin;\r\n        this.max = 1;\r\n    }\r\n    destroy(destroyChild = true) {\r\n        this.stopScroll();\r\n        this.target = null;\r\n        super.destroy(destroyChild);\r\n        this.upButton && this.upButton.destroy(destroyChild);\r\n        this.downButton && this.downButton.destroy(destroyChild);\r\n        this.slider && this.slider.destroy(destroyChild);\r\n        this.upButton = this.downButton = null;\r\n        this.slider = null;\r\n        this.changeHandler = null;\r\n        this._offsets = null;\r\n    }\r\n    createChildren() {\r\n        this.addChild(this.slider = new Slider());\r\n        this.addChild(this.upButton = new Button());\r\n        this.addChild(this.downButton = new Button());\r\n    }\r\n    initialize() {\r\n        this.slider.showLabel = false;\r\n        this.slider.tick = 0;\r\n        this.slider.on(Event.CHANGE, this, this.onSliderChange);\r\n        this.slider.setSlider(0, 0, 0);\r\n        this.upButton.on(Event.MOUSE_DOWN, this, this.onButtonMouseDown);\r\n        this.downButton.on(Event.MOUSE_DOWN, this, this.onButtonMouseDown);\r\n    }\r\n    onSliderChange() {\r\n        if (this._value != this.slider.value)\r\n            this.value = this.slider.value;\r\n    }\r\n    onButtonMouseDown(e) {\r\n        var isUp = e.currentTarget === this.upButton;\r\n        this.slide(isUp);\r\n        ILaya.timer.once(Styles.scrollBarDelayTime, this, this.startLoop, [isUp]);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n    }\r\n    startLoop(isUp) {\r\n        ILaya.timer.frameLoop(1, this, this.slide, [isUp]);\r\n    }\r\n    slide(isUp) {\r\n        if (isUp)\r\n            this.value -= this._scrollSize;\r\n        else\r\n            this.value += this._scrollSize;\r\n    }\r\n    onStageMouseUp(e) {\r\n        ILaya.timer.clear(this, this.startLoop);\r\n        ILaya.timer.clear(this, this.slide);\r\n    }\r\n    get skin() {\r\n        return this._skin;\r\n    }\r\n    set skin(value) {\r\n        if (value == \" \")\r\n            return;\r\n        if (this._skin != value) {\r\n            this._skin = value;\r\n            if (this._skin && !Loader.getRes(this._skin)) {\r\n                ILaya.loader.load([this._skin, this._skin.replace(\".png\", \"$up.png\"), this._skin.replace(\".png\", \"$down.png\"), this._skin.replace(\".png\", \"$bar.png\")], Handler.create(this, this._skinLoaded));\r\n            }\r\n            else {\r\n                this._skinLoaded();\r\n            }\r\n        }\r\n    }\r\n    _skinLoaded() {\r\n        this.slider.skin = this._skin;\r\n        this.callLater(this.changeScrollBar);\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n    changeScrollBar() {\r\n        this.upButton.visible = this._showButtons;\r\n        this.downButton.visible = this._showButtons;\r\n        if (this._showButtons) {\r\n            this.upButton.skin = this._skin.replace(\".png\", \"$up.png\");\r\n            this.downButton.skin = this._skin.replace(\".png\", \"$down.png\");\r\n        }\r\n        if (this.slider.isVertical)\r\n            this.slider.y = this._showButtons ? this.upButton.height : 0;\r\n        else\r\n            this.slider.x = this._showButtons ? this.upButton.width : 0;\r\n        this.resetPositions();\r\n        this.repaint();\r\n    }\r\n    _sizeChanged() {\r\n        super._sizeChanged();\r\n        this.repaint();\r\n        this.resetPositions();\r\n        this.event(Event.CHANGE);\r\n        this.changeHandler && this.changeHandler.runWith(this.value);\r\n    }\r\n    resetPositions() {\r\n        if (this.slider.isVertical)\r\n            this.slider.height = this.height - (this._showButtons ? (this.upButton.height + this.downButton.height) : 0);\r\n        else\r\n            this.slider.width = this.width - (this._showButtons ? (this.upButton.width + this.downButton.width) : 0);\r\n        this.resetButtonPosition();\r\n    }\r\n    resetButtonPosition() {\r\n        if (this.slider.isVertical)\r\n            this.downButton.y = this.slider._y + this.slider.height;\r\n        else\r\n            this.downButton.x = this.slider._x + this.slider.width;\r\n    }\r\n    measureWidth() {\r\n        if (this.slider.isVertical)\r\n            return this.slider.width;\r\n        return 100;\r\n    }\r\n    measureHeight() {\r\n        if (this.slider.isVertical)\r\n            return 100;\r\n        return this.slider.height;\r\n    }\r\n    setScroll(min, max, value) {\r\n        this.runCallLater(this._sizeChanged);\r\n        this.slider.setSlider(min, max, value);\r\n        this.slider.bar.visible = max > 0;\r\n        if (!this._hide && this.autoHide)\r\n            this.visible = false;\r\n    }\r\n    get max() {\r\n        return this.slider.max;\r\n    }\r\n    set max(value) {\r\n        this.slider.max = value;\r\n    }\r\n    get min() {\r\n        return this.slider.min;\r\n    }\r\n    set min(value) {\r\n        this.slider.min = value;\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(v) {\r\n        if (v !== this._value) {\r\n            this._value = v;\r\n            if (!this._isElastic) {\r\n                if (this.slider[\"_value\"] != v) {\r\n                    this.slider[\"_value\"] = v;\r\n                    this.slider.changeValue();\r\n                }\r\n                this._value = this.slider[\"_value\"];\r\n            }\r\n            this.event(Event.CHANGE);\r\n            this.changeHandler && this.changeHandler.runWith(this._value);\r\n        }\r\n    }\r\n    get isVertical() {\r\n        return this.slider.isVertical;\r\n    }\r\n    set isVertical(value) {\r\n        this.slider.isVertical = value;\r\n    }\r\n    get sizeGrid() {\r\n        return this.slider.sizeGrid;\r\n    }\r\n    set sizeGrid(value) {\r\n        this.slider.sizeGrid = value;\r\n    }\r\n    get scrollSize() {\r\n        return this._scrollSize;\r\n    }\r\n    set scrollSize(value) {\r\n        this._scrollSize = value;\r\n    }\r\n    set dataSource(value) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.value = Number(value);\r\n        else\r\n            super.dataSource = value;\r\n    }\r\n    get dataSource() {\r\n        return super.dataSource;\r\n    }\r\n    get thumbPercent() {\r\n        return this._thumbPercent;\r\n    }\r\n    set thumbPercent(value) {\r\n        this.runCallLater(this.changeScrollBar);\r\n        this.runCallLater(this._sizeChanged);\r\n        value = value >= 1 ? 0.99 : value;\r\n        this._thumbPercent = value;\r\n        if (this.scaleBar) {\r\n            if (this.slider.isVertical)\r\n                this.slider.bar.height = Math.max(this.slider.height * value, Styles.scrollBarMinNum);\r\n            else\r\n                this.slider.bar.width = Math.max(this.slider.width * value, Styles.scrollBarMinNum);\r\n        }\r\n    }\r\n    get target() {\r\n        return this._target;\r\n    }\r\n    set target(value) {\r\n        if (this._target) {\r\n            this._target.off(Event.MOUSE_WHEEL, this, this.onTargetMouseWheel);\r\n            this._target.off(Event.MOUSE_DOWN, this, this.onTargetMouseDown);\r\n        }\r\n        this._target = value;\r\n        if (value) {\r\n            this._mouseWheelEnable && this._target.on(Event.MOUSE_WHEEL, this, this.onTargetMouseWheel);\r\n            this._touchScrollEnable && this._target.on(Event.MOUSE_DOWN, this, this.onTargetMouseDown);\r\n        }\r\n    }\r\n    get hide() {\r\n        return this._hide;\r\n    }\r\n    set hide(value) {\r\n        this._hide = value;\r\n        this.visible = !value;\r\n    }\r\n    get showButtons() {\r\n        return this._showButtons;\r\n    }\r\n    set showButtons(value) {\r\n        this._showButtons = value;\r\n        this.callLater(this.changeScrollBar);\r\n    }\r\n    get touchScrollEnable() {\r\n        return this._touchScrollEnable;\r\n    }\r\n    set touchScrollEnable(value) {\r\n        this._touchScrollEnable = value;\r\n        this.target = this._target;\r\n    }\r\n    get mouseWheelEnable() {\r\n        return this._mouseWheelEnable;\r\n    }\r\n    set mouseWheelEnable(value) {\r\n        this._mouseWheelEnable = value;\r\n        this.target = this._target;\r\n    }\r\n    onTargetMouseWheel(e) {\r\n        this.value -= e.delta * this._scrollSize;\r\n        this.target = this._target;\r\n    }\r\n    onTargetMouseDown(e) {\r\n        if ((this.isLockedFun) && !this.isLockedFun(e))\r\n            return;\r\n        this.event(Event.END);\r\n        this._clickOnly = true;\r\n        this._lastOffset = 0;\r\n        this._checkElastic = false;\r\n        this._lastPoint || (this._lastPoint = new Point());\r\n        this._lastPoint.setTo(ILaya.stage.mouseX, ILaya.stage.mouseY);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        Tween.clearTween(this);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.frameLoop(1, this, this.loop);\r\n    }\r\n    startDragForce() {\r\n        this._clickOnly = true;\r\n        this._lastOffset = 0;\r\n        this._checkElastic = false;\r\n        this._lastPoint || (this._lastPoint = new Point());\r\n        this._lastPoint.setTo(ILaya.stage.mouseX, ILaya.stage.mouseY);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        Tween.clearTween(this);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.frameLoop(1, this, this.loop);\r\n    }\r\n    cancelDragOp() {\r\n        ILaya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        ILaya.timer.clear(this, this.loop);\r\n        this._target.mouseEnabled = true;\r\n    }\r\n    checkTriggers(isTweenMove = false) {\r\n        if (this.value >= 0 && this.value - this._lastOffset <= 0) {\r\n            if ((this.triggerDownDragLimit) && this.triggerDownDragLimit(isTweenMove)) {\r\n                this.cancelDragOp();\r\n                this.value = 0;\r\n                return true;\r\n            }\r\n        }\r\n        if (this.value <= this.max && (this.value - this._lastOffset >= this.max)) {\r\n            if ((this.triggerUpDragLimit) && this.triggerUpDragLimit(isTweenMove)) {\r\n                this.cancelDragOp();\r\n                this.value = this.max;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    get lastOffset() {\r\n        return this._lastOffset;\r\n    }\r\n    startTweenMoveForce(lastOffset) {\r\n        this._lastOffset = lastOffset;\r\n        ILaya.timer.frameLoop(1, this, this.tweenMove, [200]);\r\n    }\r\n    loop() {\r\n        var mouseY = ILaya.stage.mouseY;\r\n        var mouseX = ILaya.stage.mouseX;\r\n        this._lastOffset = this.isVertical ? (mouseY - this._lastPoint.y) : (mouseX - this._lastPoint.x);\r\n        if (this._clickOnly) {\r\n            if (Math.abs(this._lastOffset * (this.isVertical ? ILaya.stage._canvasTransform.getScaleY() : ILaya.stage._canvasTransform.getScaleX())) > 1) {\r\n                this._clickOnly = false;\r\n                if (this.checkTriggers())\r\n                    return;\r\n                this._offsets || (this._offsets = []);\r\n                this._offsets.length = 0;\r\n                this._target.mouseEnabled = false;\r\n                if (!this.hide && this.autoHide) {\r\n                    this.alpha = 1;\r\n                    this.visible = true;\r\n                }\r\n                this.event(Event.START);\r\n            }\r\n            else\r\n                return;\r\n        }\r\n        else {\r\n            if (this.checkTriggers())\r\n                return;\r\n        }\r\n        this._offsets.push(this._lastOffset);\r\n        this._lastPoint.x = mouseX;\r\n        this._lastPoint.y = mouseY;\r\n        if (this._lastOffset === 0)\r\n            return;\r\n        if (!this._checkElastic) {\r\n            if (this.elasticDistance > 0) {\r\n                if (!this._checkElastic && this._lastOffset != 0) {\r\n                    if ((this._lastOffset > 0 && this._value <= this.min) || (this._lastOffset < 0 && this._value >= this.max)) {\r\n                        this._isElastic = true;\r\n                        this._checkElastic = true;\r\n                    }\r\n                    else {\r\n                        this._isElastic = false;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._checkElastic = true;\r\n            }\r\n        }\r\n        if (this._isElastic) {\r\n            if (this._value <= this.min) {\r\n                if (this._lastOffset > 0) {\r\n                    this.value -= this._lastOffset * Math.max(0, (1 - ((this.min - this._value) / this.elasticDistance)));\r\n                }\r\n                else {\r\n                    this.value -= this._lastOffset * 0.5;\r\n                    if (this._value >= this.min)\r\n                        this._checkElastic = false;\r\n                }\r\n            }\r\n            else if (this._value >= this.max) {\r\n                if (this._lastOffset < 0) {\r\n                    this.value -= this._lastOffset * Math.max(0, (1 - ((this._value - this.max) / this.elasticDistance)));\r\n                }\r\n                else {\r\n                    this.value -= this._lastOffset * 0.5;\r\n                    if (this._value <= this.max)\r\n                        this._checkElastic = false;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.value -= this._lastOffset;\r\n        }\r\n    }\r\n    onStageMouseUp2(e) {\r\n        ILaya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp2);\r\n        ILaya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp2);\r\n        ILaya.timer.clear(this, this.loop);\r\n        if (this._clickOnly) {\r\n            if (this._value >= this.min && this._value <= this.max)\r\n                return;\r\n        }\r\n        this._target.mouseEnabled = true;\r\n        if (this._isElastic) {\r\n            if (this._value < this.min) {\r\n                Tween.to(this, { value: this.min }, this.elasticBackTime, Ease.sineOut, Handler.create(this, this.elasticOver));\r\n            }\r\n            else if (this._value > this.max) {\r\n                Tween.to(this, { value: this.max }, this.elasticBackTime, Ease.sineOut, Handler.create(this, this.elasticOver));\r\n            }\r\n        }\r\n        else {\r\n            if (!this._offsets)\r\n                return;\r\n            if (this._offsets.length < 1) {\r\n                this._offsets[0] = this.isVertical ? ILaya.stage.mouseY - this._lastPoint.y : ILaya.stage.mouseX - this._lastPoint.x;\r\n            }\r\n            var offset = 0;\r\n            var n = Math.min(this._offsets.length, 3);\r\n            for (var i = 0; i < n; i++) {\r\n                offset += this._offsets[this._offsets.length - 1 - i];\r\n            }\r\n            this._lastOffset = offset / n;\r\n            offset = Math.abs(this._lastOffset);\r\n            if (offset < 2) {\r\n                this.event(Event.END);\r\n                return;\r\n            }\r\n            if (offset > 250)\r\n                this._lastOffset = this._lastOffset > 0 ? 250 : -250;\r\n            var dis = Math.round(Math.abs(this.elasticDistance * (this._lastOffset / 150)));\r\n            ILaya.timer.frameLoop(1, this, this.tweenMove, [dis]);\r\n        }\r\n    }\r\n    elasticOver() {\r\n        this._isElastic = false;\r\n        if (!this.hide && this.autoHide) {\r\n            Tween.to(this, { alpha: 0 }, 500);\r\n        }\r\n        this.event(Event.END);\r\n    }\r\n    tweenMove(maxDistance) {\r\n        this._lastOffset *= this.rollRatio;\r\n        if (this.checkTriggers(true)) {\r\n            return;\r\n        }\r\n        var tarSpeed;\r\n        if (maxDistance > 0) {\r\n            if (this._lastOffset > 0 && this.value <= this.min) {\r\n                this._isElastic = true;\r\n                tarSpeed = -(this.min - maxDistance - this.value) * 0.5;\r\n                if (this._lastOffset > tarSpeed)\r\n                    this._lastOffset = tarSpeed;\r\n            }\r\n            else if (this._lastOffset < 0 && this.value >= this.max) {\r\n                this._isElastic = true;\r\n                tarSpeed = -(this.max + maxDistance - this.value) * 0.5;\r\n                if (this._lastOffset < tarSpeed)\r\n                    this._lastOffset = tarSpeed;\r\n            }\r\n        }\r\n        this.value -= this._lastOffset;\r\n        if (Math.abs(this._lastOffset) < 0.1) {\r\n            ILaya.timer.clear(this, this.tweenMove);\r\n            if (this._isElastic) {\r\n                if (this._value < this.min) {\r\n                    Tween.to(this, { value: this.min }, this.elasticBackTime, Ease.sineOut, Handler.create(this, this.elasticOver));\r\n                }\r\n                else if (this._value > this.max) {\r\n                    Tween.to(this, { value: this.max }, this.elasticBackTime, Ease.sineOut, Handler.create(this, this.elasticOver));\r\n                }\r\n                else {\r\n                    this.elasticOver();\r\n                }\r\n                return;\r\n            }\r\n            this.event(Event.END);\r\n            if (!this.hide && this.autoHide) {\r\n                Tween.to(this, { alpha: 0 }, 500);\r\n            }\r\n        }\r\n    }\r\n    stopScroll() {\r\n        this.onStageMouseUp2(null);\r\n        ILaya.timer.clear(this, this.tweenMove);\r\n        Tween.clearTween(this);\r\n    }\r\n    get tick() {\r\n        return this.slider.tick;\r\n    }\r\n    set tick(value) {\r\n        this.slider.tick = value;\r\n    }\r\n}\r\nILaya.regClass(ScrollBar);\r\nClassUtils.regClass(\"laya.ui.ScrollBar\", ScrollBar);\r\nClassUtils.regClass(\"Laya.ScrollBar\", ScrollBar);\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/UIComponent.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Button.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Slider.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/UIConfig.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Styles.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/maths/Point.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/net/Loader.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Ease.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Tween.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/ILaya.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/ScrollBar.d.ts",
    "writeByteOrderMark": false,
    "text": "import { UIComponent } from \"./UIComponent\";\r\nimport { Button } from \"./Button\";\r\nimport { Slider } from \"./Slider\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class ScrollBar extends UIComponent {\r\n    rollRatio: number;\r\n    changeHandler: Handler;\r\n    scaleBar: boolean;\r\n    autoHide: boolean;\r\n    elasticDistance: number;\r\n    elasticBackTime: number;\r\n    upButton: Button;\r\n    downButton: Button;\r\n    slider: Slider;\r\n    protected _showButtons: boolean;\r\n    protected _scrollSize: number;\r\n    protected _skin: string;\r\n    protected _thumbPercent: number;\r\n    protected _target: Sprite;\r\n    protected _lastPoint: Point;\r\n    protected _lastOffset: number;\r\n    protected _checkElastic: boolean;\r\n    protected _isElastic: boolean;\r\n    protected _value: number;\r\n    protected _hide: boolean;\r\n    protected _clickOnly: boolean;\r\n    protected _offsets: any[];\r\n    protected _touchScrollEnable: boolean;\r\n    protected _mouseWheelEnable: boolean;\r\n    constructor(skin?: string);\r\n    destroy(destroyChild?: boolean): void;\r\n    protected createChildren(): void;\r\n    protected initialize(): void;\r\n    protected onSliderChange(): void;\r\n    protected onButtonMouseDown(e: Event): void;\r\n    protected startLoop(isUp: boolean): void;\r\n    protected slide(isUp: boolean): void;\r\n    protected onStageMouseUp(e: Event): void;\r\n    skin: string;\r\n    protected _skinLoaded(): void;\r\n    protected changeScrollBar(): void;\r\n    protected _sizeChanged(): void;\r\n    private resetPositions;\r\n    protected resetButtonPosition(): void;\r\n    protected measureWidth(): number;\r\n    protected measureHeight(): number;\r\n    setScroll(min: number, max: number, value: number): void;\r\n    max: number;\r\n    min: number;\r\n    value: number;\r\n    isVertical: boolean;\r\n    sizeGrid: string;\r\n    scrollSize: number;\r\n    dataSource: any;\r\n    thumbPercent: number;\r\n    target: Sprite;\r\n    hide: boolean;\r\n    showButtons: boolean;\r\n    touchScrollEnable: boolean;\r\n    mouseWheelEnable: boolean;\r\n    protected onTargetMouseWheel(e: Event): void;\r\n    isLockedFun: Function;\r\n    protected onTargetMouseDown(e: Event): void;\r\n    startDragForce(): void;\r\n    private cancelDragOp;\r\n    triggerDownDragLimit: Function;\r\n    triggerUpDragLimit: Function;\r\n    private checkTriggers;\r\n    readonly lastOffset: number;\r\n    startTweenMoveForce(lastOffset: number): void;\r\n    protected loop(): void;\r\n    protected onStageMouseUp2(e: Event): void;\r\n    private elasticOver;\r\n    protected tweenMove(maxDistance: number): void;\r\n    stopScroll(): void;\r\n    tick: number;\r\n}\r\n"
  }
}

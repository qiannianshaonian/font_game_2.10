{
  "code": "import { LayaGL } from \"../../layagl/LayaGL\";\r\nimport { BufferState2D } from \"../BufferState2D\";\r\nimport { Config } from \"./../../../Config\";\r\nimport { IndexBuffer2D } from \"./IndexBuffer2D\";\r\nimport { VertexBuffer2D } from \"./VertexBuffer2D\";\r\nexport class Mesh2D {\r\n    constructor(stride, vballoc, iballoc) {\r\n        this._stride = 0;\r\n        this.vertNum = 0;\r\n        this.indexNum = 0;\r\n        this._applied = false;\r\n        this._quadNum = 0;\r\n        this.canReuse = false;\r\n        this._stride = stride;\r\n        this._vb = new VertexBuffer2D(stride, LayaGL.instance.DYNAMIC_DRAW);\r\n        if (vballoc) {\r\n            this._vb._resizeBuffer(vballoc, false);\r\n        }\r\n        else {\r\n            Config.webGL2D_MeshAllocMaxMem && this._vb._resizeBuffer(64 * 1024 * stride, false);\r\n        }\r\n        this._ib = new IndexBuffer2D();\r\n        if (iballoc) {\r\n            this._ib._resizeBuffer(iballoc, false);\r\n        }\r\n    }\r\n    cloneWithNewVB() {\r\n        var mesh = new Mesh2D(this._stride, 0, 0);\r\n        mesh._ib = this._ib;\r\n        mesh._quadNum = this._quadNum;\r\n        mesh._attribInfo = this._attribInfo;\r\n        return mesh;\r\n    }\r\n    cloneWithNewVBIB() {\r\n        var mesh = new Mesh2D(this._stride, 0, 0);\r\n        mesh._attribInfo = this._attribInfo;\r\n        return mesh;\r\n    }\r\n    getVBW() {\r\n        this._vb.setNeedUpload();\r\n        return this._vb;\r\n    }\r\n    getVBR() {\r\n        return this._vb;\r\n    }\r\n    getIBR() {\r\n        return this._ib;\r\n    }\r\n    getIBW() {\r\n        this._ib.setNeedUpload();\r\n        return this._ib;\r\n    }\r\n    createQuadIB(QuadNum) {\r\n        this._quadNum = QuadNum;\r\n        this._ib._resizeBuffer(QuadNum * 6 * 2, false);\r\n        this._ib.byteLength = this._ib.bufferLength;\r\n        var bd = this._ib.getUint16Array();\r\n        var idx = 0;\r\n        var curvert = 0;\r\n        for (var i = 0; i < QuadNum; i++) {\r\n            bd[idx++] = curvert;\r\n            bd[idx++] = curvert + 2;\r\n            bd[idx++] = curvert + 1;\r\n            bd[idx++] = curvert;\r\n            bd[idx++] = curvert + 3;\r\n            bd[idx++] = curvert + 2;\r\n            curvert += 4;\r\n        }\r\n        this._ib.setNeedUpload();\r\n    }\r\n    setAttributes(attribs) {\r\n        this._attribInfo = attribs;\r\n        if (this._attribInfo.length % 3 != 0) {\r\n            throw 'Mesh2D setAttributes error!';\r\n        }\r\n    }\r\n    configVAO(gl) {\r\n        if (this._applied)\r\n            return;\r\n        this._applied = true;\r\n        if (!this._vao) {\r\n            this._vao = new BufferState2D();\r\n        }\r\n        this._vao.bind();\r\n        this._vb._bindForVAO();\r\n        this._ib.setNeedUpload();\r\n        this._ib._bind_uploadForVAO();\r\n        var attribNum = this._attribInfo.length / 3;\r\n        var idx = 0;\r\n        for (var i = 0; i < attribNum; i++) {\r\n            var _size = this._attribInfo[idx + 1];\r\n            var _type = this._attribInfo[idx];\r\n            var _off = this._attribInfo[idx + 2];\r\n            gl.enableVertexAttribArray(i);\r\n            gl.vertexAttribPointer(i, _size, _type, false, this._stride, _off);\r\n            idx += 3;\r\n        }\r\n        this._vao.unBind();\r\n    }\r\n    useMesh(gl) {\r\n        this._applied || this.configVAO(gl);\r\n        this._vao.bind();\r\n        this._vb.bind();\r\n        this._ib._bind_upload() || this._ib.bind();\r\n        this._vb._bind_upload() || this._vb.bind();\r\n    }\r\n    getEleNum() {\r\n        return this._ib.getBuffer().byteLength / 2;\r\n    }\r\n    releaseMesh() { }\r\n    destroy() {\r\n    }\r\n    clearVB() {\r\n        this._vb.clear();\r\n    }\r\n}\r\nMesh2D._gvaoid = 0;\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/layagl/LayaGL.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/webgl/BufferState2D.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/Config.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/webgl/utils/IndexBuffer2D.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/webgl/utils/VertexBuffer2D.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/webgl/utils/Mesh2D.d.ts",
    "writeByteOrderMark": false,
    "text": "import { IndexBuffer2D } from \"./IndexBuffer2D\";\r\nimport { VertexBuffer2D } from \"./VertexBuffer2D\";\r\nexport declare class Mesh2D {\r\n    _stride: number;\r\n    vertNum: number;\r\n    indexNum: number;\r\n    protected _applied: boolean;\r\n    _vb: VertexBuffer2D;\r\n    _ib: IndexBuffer2D;\r\n    private _vao;\r\n    private static _gvaoid;\r\n    private _attribInfo;\r\n    protected _quadNum: number;\r\n    canReuse: boolean;\r\n    constructor(stride: number, vballoc: number, iballoc: number);\r\n    cloneWithNewVB(): Mesh2D;\r\n    cloneWithNewVBIB(): Mesh2D;\r\n    getVBW(): VertexBuffer2D;\r\n    getVBR(): VertexBuffer2D;\r\n    getIBR(): IndexBuffer2D;\r\n    getIBW(): IndexBuffer2D;\r\n    createQuadIB(QuadNum: number): void;\r\n    setAttributes(attribs: any[]): void;\r\n    private configVAO;\r\n    useMesh(gl: WebGLRenderingContext): void;\r\n    getEleNum(): number;\r\n    releaseMesh(): void;\r\n    destroy(): void;\r\n    clearVB(): void;\r\n}\r\n"
  }
}

{
  "code": "import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics } from \"./Physics\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class BoxCollider extends ColliderBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._width = 100;\r\n        this._height = 100;\r\n    }\r\n    getDef() {\r\n        if (!this._shape) {\r\n            this._shape = new window.box2d.b2PolygonShape();\r\n            this._setShape(false);\r\n        }\r\n        this.label = (this.label || \"BoxCollider\");\r\n        return super.getDef();\r\n    }\r\n    _setShape(re = true) {\r\n        var scaleX = (this.owner[\"scaleX\"] || 1);\r\n        var scaleY = (this.owner[\"scaleY\"] || 1);\r\n        this._shape.SetAsBox(this._width / 2 / Physics.PIXEL_RATIO * scaleX, this._height / 2 / Physics.PIXEL_RATIO * scaleY, new window.box2d.b2Vec2((this._width / 2 + this._x) / Physics.PIXEL_RATIO * scaleX, (this._height / 2 + this._y) / Physics.PIXEL_RATIO * scaleY));\r\n        if (re)\r\n            this.refresh();\r\n    }\r\n    get x() {\r\n        return this._x;\r\n    }\r\n    set x(value) {\r\n        this._x = value;\r\n        if (this._shape)\r\n            this._setShape();\r\n    }\r\n    get y() {\r\n        return this._y;\r\n    }\r\n    set y(value) {\r\n        this._y = value;\r\n        if (this._shape)\r\n            this._setShape();\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    set width(value) {\r\n        if (value <= 0)\r\n            throw \"BoxCollider size cannot be less than 0\";\r\n        this._width = value;\r\n        if (this._shape)\r\n            this._setShape();\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    set height(value) {\r\n        if (value <= 0)\r\n            throw \"BoxCollider size cannot be less than 0\";\r\n        this._height = value;\r\n        if (this._shape)\r\n            this._setShape();\r\n    }\r\n    resetShape(re = true) {\r\n        this._setShape();\r\n    }\r\n}\r\nClassUtils.regClass(\"laya.physics.BoxCollider\", BoxCollider);\r\nClassUtils.regClass(\"Laya.BoxCollider\", BoxCollider);\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/physics/ColliderBase.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/physics/Physics.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/physics/BoxCollider.d.ts",
    "writeByteOrderMark": false,
    "text": "import { ColliderBase } from \"./ColliderBase\";\r\nexport declare class BoxCollider extends ColliderBase {\r\n    private _x;\r\n    private _y;\r\n    private _width;\r\n    private _height;\r\n    protected getDef(): any;\r\n    private _setShape;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    resetShape(re?: boolean): void;\r\n}\r\n"
  }
}

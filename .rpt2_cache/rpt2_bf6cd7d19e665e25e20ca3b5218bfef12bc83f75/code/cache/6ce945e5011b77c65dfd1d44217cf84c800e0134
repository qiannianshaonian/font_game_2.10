{
  "code": "import { Event } from \"../../events/Event\";\r\nimport { SoundChannel } from \"../SoundChannel\";\r\nimport { Browser } from \"../../utils/Browser\";\r\nimport { Utils } from \"../../utils/Utils\";\r\nimport { ILaya } from \"../../../ILaya\";\r\nexport class WebAudioSoundChannel extends SoundChannel {\r\n    constructor() {\r\n        super();\r\n        this.bufferSource = null;\r\n        this._currentTime = 0;\r\n        this._volume = 1;\r\n        this._startTime = 0;\r\n        this._pauseTime = 0;\r\n        this.context = ILaya.WebAudioSound.ctx;\r\n        this._onPlayEnd = Utils.bind(this.__onPlayEnd, this);\r\n        if (this.context[\"createGain\"]) {\r\n            this.gain = this.context[\"createGain\"]();\r\n        }\r\n        else {\r\n            this.gain = this.context[\"createGainNode\"]();\r\n        }\r\n    }\r\n    play() {\r\n        ILaya.SoundManager.addChannel(this);\r\n        this.isStopped = false;\r\n        this._clearBufferSource();\r\n        if (!this.audioBuffer)\r\n            return;\r\n        if (this.startTime >= this.duration)\r\n            return stop();\r\n        var context = this.context;\r\n        var gain = this.gain;\r\n        var bufferSource = context.createBufferSource();\r\n        this.bufferSource = bufferSource;\r\n        bufferSource.buffer = this.audioBuffer;\r\n        bufferSource.connect(gain);\r\n        if (gain)\r\n            gain.disconnect();\r\n        gain.connect(context.destination);\r\n        bufferSource.onended = this._onPlayEnd;\r\n        this._startTime = Browser.now();\r\n        if (this.gain.gain.setTargetAtTime) {\r\n            this.gain.gain.setTargetAtTime(this._volume, this.context.currentTime, WebAudioSoundChannel.SetTargetDelay);\r\n        }\r\n        else\r\n            this.gain.gain.value = this._volume;\r\n        if (this.loops == 0) {\r\n            bufferSource.loop = true;\r\n        }\r\n        if (bufferSource.playbackRate.setTargetAtTime) {\r\n            bufferSource.playbackRate.setTargetAtTime(ILaya.SoundManager.playbackRate, this.context.currentTime, WebAudioSoundChannel.SetTargetDelay);\r\n        }\r\n        else\r\n            bufferSource.playbackRate.value = ILaya.SoundManager.playbackRate;\r\n        bufferSource.start(0, this.startTime);\r\n        this._currentTime = 0;\r\n    }\r\n    __onPlayEnd() {\r\n        if (this.loops == 1) {\r\n            if (this.completeHandler) {\r\n                ILaya.timer.once(10, this, this.__runComplete, [this.completeHandler], false);\r\n                this.completeHandler = null;\r\n            }\r\n            this.stop();\r\n            this.event(Event.COMPLETE);\r\n            return;\r\n        }\r\n        if (this.loops > 0) {\r\n            this.loops--;\r\n        }\r\n        this.startTime = 0;\r\n        this.play();\r\n    }\r\n    get position() {\r\n        if (this.bufferSource) {\r\n            return (Browser.now() - this._startTime) / 1000 + this.startTime;\r\n        }\r\n        return 0;\r\n    }\r\n    get duration() {\r\n        if (this.audioBuffer) {\r\n            return this.audioBuffer.duration;\r\n        }\r\n        return 0;\r\n    }\r\n    _clearBufferSource() {\r\n        if (this.bufferSource) {\r\n            var sourceNode = this.bufferSource;\r\n            if (sourceNode.stop) {\r\n                sourceNode.stop(0);\r\n            }\r\n            else {\r\n                sourceNode.noteOff(0);\r\n            }\r\n            sourceNode.disconnect(0);\r\n            sourceNode.onended = null;\r\n            if (!WebAudioSoundChannel._tryCleanFailed)\r\n                this._tryClearBuffer(sourceNode);\r\n            this.bufferSource = null;\r\n        }\r\n    }\r\n    _tryClearBuffer(sourceNode) {\r\n        try {\r\n            sourceNode.buffer = null;\r\n        }\r\n        catch (e) {\r\n            WebAudioSoundChannel._tryCleanFailed = true;\r\n        }\r\n    }\r\n    stop() {\r\n        super.stop();\r\n        this._clearBufferSource();\r\n        this.audioBuffer = null;\r\n        if (this.gain)\r\n            this.gain.disconnect();\r\n        this.isStopped = true;\r\n        ILaya.SoundManager.removeChannel(this);\r\n        this.completeHandler = null;\r\n        if (ILaya.SoundManager.autoReleaseSound)\r\n            ILaya.SoundManager.disposeSoundLater(this.url);\r\n    }\r\n    pause() {\r\n        if (!this.isStopped) {\r\n            this._pauseTime = this.position;\r\n        }\r\n        this._clearBufferSource();\r\n        if (this.gain)\r\n            this.gain.disconnect();\r\n        this.isStopped = true;\r\n        ILaya.SoundManager.removeChannel(this);\r\n        if (ILaya.SoundManager.autoReleaseSound)\r\n            ILaya.SoundManager.disposeSoundLater(this.url);\r\n    }\r\n    resume() {\r\n        this.startTime = this._pauseTime;\r\n        this.play();\r\n    }\r\n    set volume(v) {\r\n        this._volume = v;\r\n        if (this.isStopped) {\r\n            return;\r\n        }\r\n        if (this.gain.gain.setTargetAtTime) {\r\n            this.gain.gain.setTargetAtTime(v, this.context.currentTime, WebAudioSoundChannel.SetTargetDelay);\r\n        }\r\n        else\r\n            this.gain.gain.value = v;\r\n    }\r\n    get volume() {\r\n        return this._volume;\r\n    }\r\n}\r\nWebAudioSoundChannel._tryCleanFailed = false;\r\nWebAudioSoundChannel.SetTargetDelay = 0.001;\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/media/SoundChannel.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Browser.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Utils.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/media/webaudio/WebAudioSoundChannel.d.ts",
    "writeByteOrderMark": false,
    "text": "import { SoundChannel } from \"../SoundChannel\";\r\nexport declare class WebAudioSoundChannel extends SoundChannel {\r\n    audioBuffer: any;\r\n    private gain;\r\n    private bufferSource;\r\n    private _currentTime;\r\n    private _volume;\r\n    private _startTime;\r\n    private _pauseTime;\r\n    private context;\r\n    private _onPlayEnd;\r\n    private static _tryCleanFailed;\r\n    static SetTargetDelay: number;\r\n    constructor();\r\n    play(): void;\r\n    private __onPlayEnd;\r\n    readonly position: number;\r\n    readonly duration: number;\r\n    private _clearBufferSource;\r\n    private _tryClearBuffer;\r\n    stop(): void;\r\n    pause(): void;\r\n    resume(): void;\r\n    volume: number;\r\n}\r\n"
  }
}

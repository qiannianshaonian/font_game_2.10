{
  "code": "import { Pool } from \"./Pool\";\r\nimport { Browser } from \"./Browser\";\r\nimport { Utils } from \"./Utils\";\r\nimport { ILaya } from \"./../../ILaya\";\r\nexport class Tween {\r\n    constructor() {\r\n        this.gid = 0;\r\n        this.repeat = 1;\r\n        this._count = 0;\r\n    }\r\n    static to(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false, autoRecover = true) {\r\n        return Pool.getItemByClass(\"tween\", Tween)._create(target, props, duration, ease, complete, delay, coverBefore, true, autoRecover, true);\r\n    }\r\n    static from(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false, autoRecover = true) {\r\n        return Pool.getItemByClass(\"tween\", Tween)._create(target, props, duration, ease, complete, delay, coverBefore, false, autoRecover, true);\r\n    }\r\n    to(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false) {\r\n        return this._create(target, props, duration, ease, complete, delay, coverBefore, true, false, true);\r\n    }\r\n    from(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false) {\r\n        return this._create(target, props, duration, ease, complete, delay, coverBefore, false, false, true);\r\n    }\r\n    _create(target, props, duration, ease, complete, delay, coverBefore, isTo, usePool, runNow) {\r\n        if (!target)\r\n            throw new Error(\"Tween:target is null\");\r\n        this._target = target;\r\n        this._duration = duration;\r\n        this._ease = ease || props.ease || Tween.easeNone;\r\n        this._complete = complete || props.complete;\r\n        this._delay = delay;\r\n        this._props = [];\r\n        this._usedTimer = 0;\r\n        this._startTimer = Browser.now();\r\n        this._usedPool = usePool;\r\n        this._delayParam = null;\r\n        this.update = props.update;\r\n        var gid = (target.$_GID || (target.$_GID = Utils.getGID()));\r\n        if (!Tween.tweenMap[gid]) {\r\n            Tween.tweenMap[gid] = [this];\r\n        }\r\n        else {\r\n            if (coverBefore)\r\n                Tween.clearTween(target);\r\n            Tween.tweenMap[gid].push(this);\r\n        }\r\n        if (runNow) {\r\n            if (delay <= 0)\r\n                this.firstStart(target, props, isTo);\r\n            else {\r\n                this._delayParam = [target, props, isTo];\r\n                ILaya.timer.once(delay, this, this.firstStart, this._delayParam);\r\n            }\r\n        }\r\n        else {\r\n            this._initProps(target, props, isTo);\r\n        }\r\n        return this;\r\n    }\r\n    firstStart(target, props, isTo) {\r\n        this._delayParam = null;\r\n        if (target.destroyed) {\r\n            this.clear();\r\n            return;\r\n        }\r\n        this._initProps(target, props, isTo);\r\n        this._beginLoop();\r\n    }\r\n    _initProps(target, props, isTo) {\r\n        for (var p in props) {\r\n            if (typeof (target[p]) == 'number') {\r\n                var start = isTo ? target[p] : props[p];\r\n                var end = isTo ? props[p] : target[p];\r\n                this._props.push([p, start, end - start]);\r\n                if (!isTo)\r\n                    target[p] = start;\r\n            }\r\n        }\r\n    }\r\n    _beginLoop() {\r\n        ILaya.timer.frameLoop(1, this, this._doEase);\r\n    }\r\n    _doEase() {\r\n        this._updateEase(Browser.now());\r\n    }\r\n    _updateEase(time) {\r\n        var target = this._target;\r\n        if (!target)\r\n            return;\r\n        if (target.destroyed)\r\n            return Tween.clearTween(target);\r\n        var usedTimer = this._usedTimer = time - this._startTimer - this._delay;\r\n        if (usedTimer < 0)\r\n            return;\r\n        if (usedTimer >= this._duration)\r\n            return this.complete();\r\n        var ratio = usedTimer > 0 ? this._ease(usedTimer, 0, 1, this._duration) : 0;\r\n        var props = this._props;\r\n        for (var i = 0, n = props.length; i < n; i++) {\r\n            var prop = props[i];\r\n            target[prop[0]] = prop[1] + (ratio * prop[2]);\r\n        }\r\n        if (this.update)\r\n            this.update.run();\r\n    }\r\n    set progress(v) {\r\n        var uTime = v * this._duration;\r\n        this._startTimer = Browser.now() - this._delay - uTime;\r\n    }\r\n    complete() {\r\n        if (!this._target)\r\n            return;\r\n        ILaya.timer.runTimer(this, this.firstStart);\r\n        var target = this._target;\r\n        var props = this._props;\r\n        var handler = this._complete;\r\n        for (var i = 0, n = props.length; i < n; i++) {\r\n            var prop = props[i];\r\n            target[prop[0]] = prop[1] + prop[2];\r\n        }\r\n        if (this.update)\r\n            this.update.run();\r\n        this._count++;\r\n        if (this.repeat != 0 && this._count >= this.repeat) {\r\n            this.clear();\r\n            handler && handler.run();\r\n        }\r\n        else {\r\n            this.restart();\r\n        }\r\n    }\r\n    pause() {\r\n        ILaya.timer.clear(this, this._beginLoop);\r\n        ILaya.timer.clear(this, this._doEase);\r\n        ILaya.timer.clear(this, this.firstStart);\r\n        var time = Browser.now();\r\n        var dTime;\r\n        dTime = time - this._startTimer - this._delay;\r\n        if (dTime < 0) {\r\n            this._usedTimer = dTime;\r\n        }\r\n    }\r\n    setStartTime(startTime) {\r\n        this._startTimer = startTime;\r\n    }\r\n    static clearAll(target) {\r\n        if (!target || !target.$_GID)\r\n            return;\r\n        var tweens = Tween.tweenMap[target.$_GID];\r\n        if (tweens) {\r\n            for (var i = 0, n = tweens.length; i < n; i++) {\r\n                tweens[i]._clear();\r\n            }\r\n            tweens.length = 0;\r\n        }\r\n    }\r\n    static clear(tween) {\r\n        tween.clear();\r\n    }\r\n    static clearTween(target) {\r\n        Tween.clearAll(target);\r\n    }\r\n    clear() {\r\n        if (this._target) {\r\n            this._remove();\r\n            this._clear();\r\n        }\r\n    }\r\n    _clear() {\r\n        this.pause();\r\n        ILaya.timer.clear(this, this.firstStart);\r\n        this._complete = null;\r\n        this._target = null;\r\n        this._ease = null;\r\n        this._props = null;\r\n        this._delayParam = null;\r\n        this.repeat = 1;\r\n        if (this._usedPool) {\r\n            this.update = null;\r\n            Pool.recover(\"tween\", this);\r\n        }\r\n    }\r\n    recover() {\r\n        this._usedPool = true;\r\n        this._clear();\r\n    }\r\n    _remove() {\r\n        var tweens = Tween.tweenMap[this._target.$_GID];\r\n        if (tweens) {\r\n            for (var i = 0, n = tweens.length; i < n; i++) {\r\n                if (tweens[i] === this) {\r\n                    tweens.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    restart() {\r\n        this.pause();\r\n        this._usedTimer = 0;\r\n        this._startTimer = Browser.now();\r\n        if (this._delayParam) {\r\n            ILaya.timer.once(this._delay, this, this.firstStart, this._delayParam);\r\n            return;\r\n        }\r\n        var props = this._props;\r\n        for (var i = 0, n = props.length; i < n; i++) {\r\n            var prop = props[i];\r\n            this._target[prop[0]] = prop[1];\r\n        }\r\n        ILaya.timer.once(this._delay, this, this._beginLoop);\r\n    }\r\n    resume() {\r\n        if (this._usedTimer >= this._duration)\r\n            return;\r\n        this._startTimer = Browser.now() - this._usedTimer - this._delay;\r\n        if (this._delayParam) {\r\n            if (this._usedTimer < 0) {\r\n                ILaya.timer.once(-this._usedTimer, this, this.firstStart, this._delayParam);\r\n            }\r\n            else {\r\n                this.firstStart.apply(this, this._delayParam);\r\n            }\r\n        }\r\n        else {\r\n            this._beginLoop();\r\n        }\r\n    }\r\n    static easeNone(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n}\r\nTween.tweenMap = [];\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Pool.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Browser.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Utils.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Tween.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Handler } from \"./Handler\";\r\nexport declare class Tween {\r\n    private static tweenMap;\r\n    private _complete;\r\n    private _target;\r\n    private _ease;\r\n    private _props;\r\n    private _duration;\r\n    private _delay;\r\n    private _startTimer;\r\n    private _usedTimer;\r\n    private _usedPool;\r\n    private _delayParam;\r\n    gid: number;\r\n    update: Handler;\r\n    repeat: number;\r\n    private _count;\r\n    static to(target: any, props: any, duration: number, ease?: Function | null, complete?: Handler | null, delay?: number, coverBefore?: boolean, autoRecover?: boolean): Tween;\r\n    static from(target: any, props: any, duration: number, ease?: Function, complete?: Handler, delay?: number, coverBefore?: boolean, autoRecover?: boolean): Tween;\r\n    to(target: any, props: any, duration: number, ease?: Function, complete?: Handler, delay?: number, coverBefore?: boolean): Tween;\r\n    from(target: any, props: any, duration: number, ease?: Function | null, complete?: Handler | null, delay?: number, coverBefore?: boolean): Tween;\r\n    _create(target: any, props: any, duration: number, ease: Function | null, complete: Handler | null, delay: number, coverBefore: boolean, isTo: boolean, usePool: boolean, runNow: boolean): Tween;\r\n    private firstStart;\r\n    private _initProps;\r\n    private _beginLoop;\r\n    private _doEase;\r\n    _updateEase(time: number): void;\r\n    progress: number;\r\n    complete(): void;\r\n    pause(): void;\r\n    setStartTime(startTime: number): void;\r\n    static clearAll(target: any): void;\r\n    static clear(tween: Tween): void;\r\n    static clearTween(target: any): void;\r\n    clear(): void;\r\n    _clear(): void;\r\n    recover(): void;\r\n    private _remove;\r\n    restart(): void;\r\n    resume(): void;\r\n    private static easeNone;\r\n}\r\n"
  }
}

{
  "code": "import { AnimationState } from \"./AnimationState\";\r\nimport { Stat } from \"../utils/Stat\";\r\nimport { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nexport class AnimationPlayer extends EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this.isCache = true;\r\n        this.playbackRate = 1.0;\r\n        this._destroyed = false;\r\n        this._currentAnimationClipIndex = -1;\r\n        this._currentKeyframeIndex = -1;\r\n        this._currentTime = 0.0;\r\n        this._overallDuration = Number.MAX_VALUE;\r\n        this._stopWhenCircleFinish = false;\r\n        this._elapsedPlaybackTime = 0;\r\n        this._startUpdateLoopCount = -1;\r\n        this._cachePlayRate = 1.0;\r\n        this.cacheFrameRate = 60;\r\n        this.returnToZeroStopped = false;\r\n    }\r\n    get templet() {\r\n        return this._templet;\r\n    }\r\n    set templet(value) {\r\n        if (!(this.state === AnimationState.stopped))\r\n            this.stop(true);\r\n        if (this._templet !== value) {\r\n            this._templet = value;\r\n            this._computeFullKeyframeIndices();\r\n        }\r\n    }\r\n    get playStart() {\r\n        return this._playStart;\r\n    }\r\n    get playEnd() {\r\n        return this._playEnd;\r\n    }\r\n    get playDuration() {\r\n        return this._playDuration;\r\n    }\r\n    get overallDuration() {\r\n        return this._overallDuration;\r\n    }\r\n    get currentAnimationClipIndex() {\r\n        return this._currentAnimationClipIndex;\r\n    }\r\n    get currentKeyframeIndex() {\r\n        return this._currentKeyframeIndex;\r\n    }\r\n    get currentPlayTime() {\r\n        return this._currentTime + this._playStart;\r\n    }\r\n    get currentFrameTime() {\r\n        return this._currentFrameTime;\r\n    }\r\n    get cachePlayRate() {\r\n        return this._cachePlayRate;\r\n    }\r\n    set cachePlayRate(value) {\r\n        if (this._cachePlayRate !== value) {\r\n            this._cachePlayRate = value;\r\n            if (this._templet)\r\n                this._computeFullKeyframeIndices();\r\n        }\r\n    }\r\n    get cacheFrameRate() {\r\n        return this._cacheFrameRate;\r\n    }\r\n    set cacheFrameRate(value) {\r\n        if (this._cacheFrameRate !== value) {\r\n            this._cacheFrameRate = value;\r\n            this._cacheFrameRateInterval = 1000.0 / this._cacheFrameRate;\r\n            if (this._templet)\r\n                this._computeFullKeyframeIndices();\r\n        }\r\n    }\r\n    set currentTime(value) {\r\n        if (this._currentAnimationClipIndex === -1 || !this._templet)\r\n            return;\r\n        if (value < this._playStart || value > this._playEnd)\r\n            throw new Error(\"AnimationPlayer:value must large than playStartTime,small than playEndTime.\");\r\n        this._startUpdateLoopCount = Stat.loopCount;\r\n        var cacheFrameInterval = this._cacheFrameRateInterval * this._cachePlayRate;\r\n        this._currentTime = value;\r\n        this._currentKeyframeIndex = Math.floor(this.currentPlayTime / cacheFrameInterval);\r\n        this._currentFrameTime = this._currentKeyframeIndex * cacheFrameInterval;\r\n    }\r\n    get paused() {\r\n        return this._paused;\r\n    }\r\n    set paused(value) {\r\n        this._paused = value;\r\n        value && this.event(Event.PAUSED);\r\n    }\r\n    get cacheFrameRateInterval() {\r\n        return this._cacheFrameRateInterval;\r\n    }\r\n    get state() {\r\n        if (this._currentAnimationClipIndex === -1)\r\n            return AnimationState.stopped;\r\n        if (this._paused)\r\n            return AnimationState.paused;\r\n        return AnimationState.playing;\r\n    }\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    _onTempletLoadedComputeFullKeyframeIndices(cachePlayRate, cacheFrameRate, templet) {\r\n        if (this._templet === templet && this._cachePlayRate === cachePlayRate && this._cacheFrameRate === cacheFrameRate)\r\n            this._computeFullKeyframeIndices();\r\n    }\r\n    _computeFullKeyframeIndices() {\r\n        return;\r\n        var templet = this._templet;\r\n        if (templet._fullFrames)\r\n            return;\r\n        var anifullFrames = this._templet._fullFrames = [];\r\n        var cacheFrameInterval = this._cacheFrameRateInterval * this._cachePlayRate;\r\n        for (var i = 0, iNum = templet.getAnimationCount(); i < iNum; i++) {\r\n            var aniFullFrame = [];\r\n            if (!templet.getAnimation(i).nodes) {\r\n                anifullFrames.push(aniFullFrame);\r\n                continue;\r\n            }\r\n            for (var j = 0, jNum = templet.getAnimation(i).nodes.length; j < jNum; j++) {\r\n                var node = templet.getAnimation(i).nodes[j];\r\n                var frameCount = Math.round(node.playTime / cacheFrameInterval);\r\n                var nodeFullFrames = new Uint16Array(frameCount + 1);\r\n                var stidx = -1;\r\n                var nodeframes = node.keyFrame;\r\n                for (var n = 0, nNum = nodeframes.length; n < nNum; n++) {\r\n                    var keyFrame = nodeframes[n];\r\n                    var pos = Math.round(keyFrame.startTime / cacheFrameInterval);\r\n                    if (stidx < 0 && pos > 0) {\r\n                        stidx = pos;\r\n                    }\r\n                    if (pos <= frameCount) {\r\n                        nodeFullFrames[pos] = n;\r\n                    }\r\n                }\r\n                var cf = 0;\r\n                for (n = stidx; n < frameCount; n++) {\r\n                    if (nodeFullFrames[n] == 0) {\r\n                        nodeFullFrames[n] = cf;\r\n                    }\r\n                    else {\r\n                        cf = nodeFullFrames[n];\r\n                    }\r\n                }\r\n                aniFullFrame.push(nodeFullFrames);\r\n            }\r\n            anifullFrames.push(aniFullFrame);\r\n        }\r\n    }\r\n    _onAnimationTempletLoaded() {\r\n        (this.destroyed) || (this._calculatePlayDuration());\r\n    }\r\n    _calculatePlayDuration() {\r\n        if (this.state !== AnimationState.stopped) {\r\n            var oriDuration = this._templet.getAniDuration(this._currentAnimationClipIndex);\r\n            (this._playEnd === 0) && (this._playEnd = oriDuration);\r\n            if (this._playEnd > oriDuration)\r\n                this._playEnd = oriDuration;\r\n            this._playDuration = this._playEnd - this._playStart;\r\n        }\r\n    }\r\n    _setPlayParams(time, cacheFrameInterval) {\r\n        this._currentTime = time;\r\n        this._currentKeyframeIndex = Math.floor((this.currentPlayTime) / cacheFrameInterval + 0.01);\r\n        this._currentFrameTime = this._currentKeyframeIndex * cacheFrameInterval;\r\n    }\r\n    _setPlayParamsWhenStop(currentAniClipPlayDuration, cacheFrameInterval, playEnd = -1) {\r\n        this._currentTime = currentAniClipPlayDuration;\r\n        var endTime = playEnd > 0 ? playEnd : currentAniClipPlayDuration;\r\n        this._currentKeyframeIndex = Math.floor(endTime / cacheFrameInterval + 0.01);\r\n        this._currentKeyframeIndex = Math.floor(currentAniClipPlayDuration / cacheFrameInterval + 0.01);\r\n        this._currentFrameTime = this._currentKeyframeIndex * cacheFrameInterval;\r\n        this._currentAnimationClipIndex = -1;\r\n    }\r\n    _update(elapsedTime) {\r\n        if (this._currentAnimationClipIndex === -1 || this._paused || !this._templet)\r\n            return;\r\n        var cacheFrameInterval = this._cacheFrameRateInterval * this._cachePlayRate;\r\n        var time = 0;\r\n        (this._startUpdateLoopCount !== Stat.loopCount) && (time = elapsedTime * this.playbackRate, this._elapsedPlaybackTime += time);\r\n        var currentAniClipPlayDuration = this.playDuration;\r\n        time += this._currentTime;\r\n        if ((this._overallDuration !== 0 && this._elapsedPlaybackTime >= this._overallDuration) || (this._overallDuration === 0 && this._elapsedPlaybackTime >= currentAniClipPlayDuration\r\n            || (this._overallDuration === 0 && time >= this.playEnd))) {\r\n            this._setPlayParamsWhenStop(currentAniClipPlayDuration, cacheFrameInterval, this.playEnd);\r\n            this.event(Event.STOPPED);\r\n            return;\r\n        }\r\n        if (currentAniClipPlayDuration > 0) {\r\n            if (time >= currentAniClipPlayDuration) {\r\n                if (this._stopWhenCircleFinish) {\r\n                    this._setPlayParamsWhenStop(currentAniClipPlayDuration, cacheFrameInterval);\r\n                    this._stopWhenCircleFinish = false;\r\n                    this.event(Event.STOPPED);\r\n                    return;\r\n                }\r\n                else {\r\n                    time = time % currentAniClipPlayDuration;\r\n                    this._setPlayParams(time, cacheFrameInterval);\r\n                    this.event(Event.COMPLETE);\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                this._setPlayParams(time, cacheFrameInterval);\r\n            }\r\n        }\r\n        else {\r\n            if (this._stopWhenCircleFinish) {\r\n                this._setPlayParamsWhenStop(currentAniClipPlayDuration, cacheFrameInterval);\r\n                this._stopWhenCircleFinish = false;\r\n                this.event(Event.STOPPED);\r\n                return;\r\n            }\r\n            this._currentTime = this._currentFrameTime = this._currentKeyframeIndex = 0;\r\n            this.event(Event.COMPLETE);\r\n        }\r\n    }\r\n    _destroy() {\r\n        this.offAll();\r\n        this._templet = null;\r\n        this._destroyed = true;\r\n    }\r\n    play(index = 0, playbackRate = 1.0, overallDuration = 2147483647, playStart = 0, playEnd = 0) {\r\n        if (!this._templet)\r\n            throw new Error(\"AnimationPlayer:templet must not be null,maybe you need to set url.\");\r\n        if (overallDuration < 0 || playStart < 0 || playEnd < 0)\r\n            throw new Error(\"AnimationPlayer:overallDuration,playStart and playEnd must large than zero.\");\r\n        if ((playEnd !== 0) && (playStart > playEnd))\r\n            throw new Error(\"AnimationPlayer:start must less than end.\");\r\n        this._currentTime = 0;\r\n        this._currentFrameTime = 0;\r\n        this._elapsedPlaybackTime = 0;\r\n        this.playbackRate = playbackRate;\r\n        this._overallDuration = overallDuration;\r\n        this._playStart = playStart;\r\n        this._playEnd = playEnd;\r\n        this._paused = false;\r\n        this._currentAnimationClipIndex = index;\r\n        this._currentKeyframeIndex = 0;\r\n        this._startUpdateLoopCount = Stat.loopCount;\r\n        this.event(Event.PLAYED);\r\n        this._calculatePlayDuration();\r\n        this._update(0);\r\n    }\r\n    playByFrame(index = 0, playbackRate = 1.0, overallDuration = 2147483647, playStartFrame = 0, playEndFrame = 0, fpsIn3DBuilder = 30) {\r\n        var interval = 1000.0 / fpsIn3DBuilder;\r\n        this.play(index, playbackRate, overallDuration, playStartFrame * interval, playEndFrame * interval);\r\n    }\r\n    stop(immediate = true) {\r\n        if (immediate) {\r\n            this._currentTime = this._currentFrameTime = this._currentKeyframeIndex = 0;\r\n            this._currentAnimationClipIndex = -1;\r\n            this.event(Event.STOPPED);\r\n        }\r\n        else {\r\n            this._stopWhenCircleFinish = true;\r\n        }\r\n    }\r\n    destroy() {\r\n    }\r\n}\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AnimationTemplet.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AnimationState.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Stat.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/resource/IDestroy.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/EventDispatcher.ts"
  ],
  "dts": {
    "name": "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/AnimationPlayer.d.ts",
    "writeByteOrderMark": false,
    "text": "import { AnimationTemplet } from \"./AnimationTemplet\";\r\nimport { IDestroy } from \"../resource/IDestroy\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nexport declare class AnimationPlayer extends EventDispatcher implements IDestroy {\r\n    private _destroyed;\r\n    private _templet;\r\n    private _currentTime;\r\n    private _currentFrameTime;\r\n    private _playStart;\r\n    private _playEnd;\r\n    private _playDuration;\r\n    private _overallDuration;\r\n    private _stopWhenCircleFinish;\r\n    _elapsedPlaybackTime: number;\r\n    private _startUpdateLoopCount;\r\n    private _currentAnimationClipIndex;\r\n    private _currentKeyframeIndex;\r\n    private _paused;\r\n    private _cacheFrameRate;\r\n    private _cacheFrameRateInterval;\r\n    private _cachePlayRate;\r\n    isCache: boolean;\r\n    playbackRate: number;\r\n    returnToZeroStopped: boolean;\r\n    templet: AnimationTemplet;\r\n    readonly playStart: number;\r\n    readonly playEnd: number;\r\n    readonly playDuration: number;\r\n    readonly overallDuration: number;\r\n    readonly currentAnimationClipIndex: number;\r\n    readonly currentKeyframeIndex: number;\r\n    readonly currentPlayTime: number;\r\n    readonly currentFrameTime: number;\r\n    cachePlayRate: number;\r\n    cacheFrameRate: number;\r\n    currentTime: number;\r\n    paused: boolean;\r\n    readonly cacheFrameRateInterval: number;\r\n    readonly state: number;\r\n    readonly destroyed: boolean;\r\n    constructor();\r\n    _onTempletLoadedComputeFullKeyframeIndices(cachePlayRate: number, cacheFrameRate: number, templet: AnimationTemplet): void;\r\n    private _computeFullKeyframeIndices;\r\n    private _onAnimationTempletLoaded;\r\n    private _calculatePlayDuration;\r\n    private _setPlayParams;\r\n    private _setPlayParamsWhenStop;\r\n    _update(elapsedTime: number): void;\r\n    _destroy(): void;\r\n    play(index?: number, playbackRate?: number, overallDuration?: number, playStart?: number, playEnd?: number): void;\r\n    playByFrame(index?: number, playbackRate?: number, overallDuration?: number, playStartFrame?: number, playEndFrame?: number, fpsIn3DBuilder?: number): void;\r\n    stop(immediate?: boolean): void;\r\n    destroy(): void;\r\n}\r\n"
  }
}

{
  "code": "import { ILaya } from \"../../ILaya\";\r\nexport class URL {\r\n    constructor(url) {\r\n        this._url = URL.formatURL(url);\r\n        this._path = URL.getPath(url);\r\n    }\r\n    get url() {\r\n        return this._url;\r\n    }\r\n    get path() {\r\n        return this._path;\r\n    }\r\n    static set basePath(value) {\r\n        URL._basePath = ILaya.Laya._getUrlPath();\r\n        URL._basePath = URL.formatURL(value);\r\n    }\r\n    static get basePath() {\r\n        return URL._basePath;\r\n    }\r\n    static formatURL(url) {\r\n        if (!url)\r\n            return \"null path\";\r\n        if (url.indexOf(\":\") > 0)\r\n            return url;\r\n        if (URL.customFormat != null)\r\n            url = URL.customFormat(url);\r\n        if (url.indexOf(\":\") > 0)\r\n            return url;\r\n        var char1 = url.charAt(0);\r\n        if (char1 === \".\") {\r\n            return URL._formatRelativePath(URL._basePath + url);\r\n        }\r\n        else if (char1 === '~') {\r\n            return URL.rootPath + url.substring(1);\r\n        }\r\n        else if (char1 === \"d\") {\r\n            if (url.indexOf(\"data:image\") === 0)\r\n                return url;\r\n        }\r\n        else if (char1 === \"/\") {\r\n            return url;\r\n        }\r\n        return URL._basePath + url;\r\n    }\r\n    static _formatRelativePath(value) {\r\n        var parts = value.split(\"/\");\r\n        for (var i = 0, len = parts.length; i < len; i++) {\r\n            if (parts[i] == '..') {\r\n                parts.splice(i - 1, 2);\r\n                i -= 2;\r\n            }\r\n        }\r\n        return parts.join('/');\r\n    }\r\n    static getPath(url) {\r\n        var ofs = url.lastIndexOf('/');\r\n        return ofs > 0 ? url.substr(0, ofs + 1) : \"\";\r\n    }\r\n    static getFileName(url) {\r\n        var ofs = url.lastIndexOf('/');\r\n        return ofs > 0 ? url.substr(ofs + 1) : url;\r\n    }\r\n    static getAdptedFilePath(url) {\r\n        if (!URL.exportSceneToJson || !url)\r\n            return url;\r\n        var i, len;\r\n        len = URL._adpteTypeList.length;\r\n        var tArr;\r\n        for (i = 0; i < len; i++) {\r\n            tArr = URL._adpteTypeList[i];\r\n            url = url.replace(tArr[0], tArr[1]);\r\n        }\r\n        return url;\r\n    }\r\n}\r\nURL.version = {};\r\nURL.exportSceneToJson = false;\r\nURL._basePath = \"\";\r\nURL.rootPath = \"\";\r\nURL.customFormat = function (url) {\r\n    var newUrl = URL.version[url];\r\n    if (!window.conch && newUrl)\r\n        url += \"?v=\" + newUrl;\r\n    return url;\r\n};\r\nURL._adpteTypeList = [[\".scene3d\", \".json\"], [\".scene\", \".json\"], [\".taa\", \".json\"], [\".prefab\", \".json\"]];\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/net/URL.d.ts",
    "writeByteOrderMark": false,
    "text": "export declare class URL {\r\n    static version: any;\r\n    private _url;\r\n    private _path;\r\n    static exportSceneToJson: boolean;\r\n    constructor(url: string);\r\n    readonly url: string;\r\n    readonly path: string;\r\n    static _basePath: string;\r\n    static rootPath: string;\r\n    static basePath: string;\r\n    static customFormat: Function;\r\n    static formatURL(url: string): string;\r\n    static _formatRelativePath(value: string): string;\r\n    static getPath(url: string): string;\r\n    static getFileName(url: string): string;\r\n    private static _adpteTypeList;\r\n    static getAdptedFilePath(url: string): string;\r\n}\r\n"
  }
}

{
  "code": "import { Loader } from \"./Loader\";\r\nimport { ILaya } from \"./../../ILaya\";\r\nimport { AtlasInfoManager } from \"./AtlasInfoManager\";\r\nimport { LoaderManager } from \"./LoaderManager\";\r\nimport { Prefab } from \"../components/Prefab\";\r\nimport { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { Utils } from \"../utils/Utils\";\r\nexport class SceneLoader extends EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this._completeHandler = new Handler(this, this.onOneLoadComplete);\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this._toLoadList = [];\r\n        this._isLoading = false;\r\n        this.totalCount = 0;\r\n    }\r\n    get leftCount() {\r\n        if (this._isLoading)\r\n            return this._toLoadList.length + 1;\r\n        return this._toLoadList.length;\r\n    }\r\n    get loadedCount() {\r\n        return this.totalCount - this.leftCount;\r\n    }\r\n    load(url, is3D = false, ifCheck = true) {\r\n        if (url instanceof Array) {\r\n            var i, len;\r\n            len = url.length;\r\n            for (i = 0; i < len; i++) {\r\n                this._addToLoadList(url[i], is3D);\r\n            }\r\n        }\r\n        else {\r\n            this._addToLoadList(url, is3D);\r\n        }\r\n        if (ifCheck)\r\n            this._checkNext();\r\n    }\r\n    _addToLoadList(url, is3D = false) {\r\n        if (this._toLoadList.indexOf(url) >= 0)\r\n            return;\r\n        if (Loader.getRes(url))\r\n            return;\r\n        if (is3D) {\r\n            this._toLoadList.push({ url: url });\r\n        }\r\n        else\r\n            this._toLoadList.push(url);\r\n        this.totalCount++;\r\n    }\r\n    _checkNext() {\r\n        if (!this._isLoading) {\r\n            if (this._toLoadList.length == 0) {\r\n                this.event(Event.COMPLETE);\r\n                return;\r\n            }\r\n            var tItem;\r\n            tItem = this._toLoadList.pop();\r\n            if (typeof (tItem) == 'string') {\r\n                this.loadOne(tItem);\r\n            }\r\n            else {\r\n                this.loadOne(tItem.url, true);\r\n            }\r\n        }\r\n    }\r\n    loadOne(url, is3D = false) {\r\n        this._curUrl = url;\r\n        var type = Utils.getFileExtension(this._curUrl);\r\n        if (is3D) {\r\n            ILaya.loader.create(url, this._completeHandler);\r\n        }\r\n        else if (SceneLoader.LoadableExtensions[type]) {\r\n            ILaya.loader.load(url, this._completeHandler, null, SceneLoader.LoadableExtensions[type]);\r\n        }\r\n        else if (url != AtlasInfoManager.getFileLoadPath(url) || SceneLoader.No3dLoadTypes[type] || !LoaderManager.createMap[type]) {\r\n            ILaya.loader.load(url, this._completeHandler);\r\n        }\r\n        else {\r\n            ILaya.loader.create(url, this._completeHandler);\r\n        }\r\n    }\r\n    onOneLoadComplete() {\r\n        this._isLoading = false;\r\n        if (!Loader.getRes(this._curUrl)) {\r\n            console.log(\"Fail to load:\", this._curUrl);\r\n        }\r\n        var type = Utils.getFileExtension(this._curUrl);\r\n        if (SceneLoader.LoadableExtensions[type]) {\r\n            var dataO;\r\n            dataO = Loader.getRes(this._curUrl);\r\n            if (dataO && (dataO instanceof Prefab)) {\r\n                dataO = dataO.json;\r\n            }\r\n            if (dataO) {\r\n                if (dataO.loadList) {\r\n                    this.load(dataO.loadList, false, false);\r\n                }\r\n                if (dataO.loadList3D) {\r\n                    this.load(dataO.loadList3D, true, false);\r\n                }\r\n            }\r\n        }\r\n        if (type == \"sk\") {\r\n            this.load(this._curUrl.replace(\".sk\", \".png\"), false, false);\r\n        }\r\n        this.event(Event.PROGRESS, this.getProgress());\r\n        this._checkNext();\r\n    }\r\n    getProgress() {\r\n        return this.loadedCount / this.totalCount;\r\n    }\r\n}\r\nSceneLoader.LoadableExtensions = { \"scene\": Loader.JSON, \"scene3d\": Loader.JSON, \"ani\": Loader.JSON, \"ui\": Loader.JSON, \"prefab\": Loader.PREFAB };\r\nSceneLoader.No3dLoadTypes = { \"png\": true, \"jpg\": true, \"txt\": true };\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/net/Loader.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/net/AtlasInfoManager.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/net/LoaderManager.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/components/Prefab.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/events/EventDispatcher.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Handler.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Utils.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/net/SceneLoader.d.ts",
    "writeByteOrderMark": false,
    "text": "import { EventDispatcher } from \"../events/EventDispatcher\";\r\nexport declare class SceneLoader extends EventDispatcher {\r\n    static LoadableExtensions: any;\r\n    static No3dLoadTypes: any;\r\n    totalCount: number;\r\n    private _completeHandler;\r\n    private _toLoadList;\r\n    private _isLoading;\r\n    private _curUrl;\r\n    constructor();\r\n    reset(): void;\r\n    readonly leftCount: number;\r\n    readonly loadedCount: number;\r\n    load(url: any, is3D?: boolean, ifCheck?: boolean): void;\r\n    private _addToLoadList;\r\n    private _checkNext;\r\n    private loadOne;\r\n    private onOneLoadComplete;\r\n    getProgress(): number;\r\n}\r\n"
  }
}

{
  "code": "import { CacheManger } from \"./CacheManger\";\r\nexport class VectorGraphManager {\r\n    constructor() {\r\n        this.useDic = {};\r\n        this.shapeDic = {};\r\n        this.shapeLineDic = {};\r\n        this._id = 0;\r\n        this._checkKey = false;\r\n        this._freeIdArray = [];\r\n        CacheManger.regCacheByFunction(this.startDispose.bind(this), this.getCacheList.bind(this));\r\n    }\r\n    static getInstance() {\r\n        return VectorGraphManager.instance = VectorGraphManager.instance || new VectorGraphManager();\r\n    }\r\n    getId() {\r\n        return this._id++;\r\n    }\r\n    addShape(id, shape) {\r\n        this.shapeDic[id] = shape;\r\n        if (!this.useDic[id]) {\r\n            this.useDic[id] = true;\r\n        }\r\n    }\r\n    addLine(id, Line) {\r\n        this.shapeLineDic[id] = Line;\r\n        if (!this.shapeLineDic[id]) {\r\n            this.shapeLineDic[id] = true;\r\n        }\r\n    }\r\n    getShape(id) {\r\n        if (this._checkKey) {\r\n            if (this.useDic[id] != null) {\r\n                this.useDic[id] = true;\r\n            }\r\n        }\r\n    }\r\n    deleteShape(id) {\r\n        if (this.shapeDic[id]) {\r\n            this.shapeDic[id] = null;\r\n            delete this.shapeDic[id];\r\n        }\r\n        if (this.shapeLineDic[id]) {\r\n            this.shapeLineDic[id] = null;\r\n            delete this.shapeLineDic[id];\r\n        }\r\n        if (this.useDic[id] != null) {\r\n            delete this.useDic[id];\r\n        }\r\n    }\r\n    getCacheList() {\r\n        var str;\r\n        var list = [];\r\n        for (str in this.shapeDic) {\r\n            list.push(this.shapeDic[str]);\r\n        }\r\n        for (str in this.shapeLineDic) {\r\n            list.push(this.shapeLineDic[str]);\r\n        }\r\n        return list;\r\n    }\r\n    startDispose(key) {\r\n        var str;\r\n        for (str in this.useDic) {\r\n            this.useDic[str] = false;\r\n        }\r\n        this._checkKey = true;\r\n    }\r\n    endDispose() {\r\n        if (this._checkKey) {\r\n            var str;\r\n            for (str in this.useDic) {\r\n                if (!this.useDic[str]) {\r\n                    this.deleteShape(str);\r\n                }\r\n            }\r\n            this._checkKey = false;\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/CacheManger.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/utils/VectorGraphManager.d.ts",
    "writeByteOrderMark": false,
    "text": "export declare class VectorGraphManager {\r\n    static instance: VectorGraphManager;\r\n    useDic: any;\r\n    shapeDic: any;\r\n    shapeLineDic: any;\r\n    private _id;\r\n    private _checkKey;\r\n    private _freeIdArray;\r\n    constructor();\r\n    static getInstance(): VectorGraphManager;\r\n    getId(): number;\r\n    addShape(id: number, shape: any): void;\r\n    addLine(id: number, Line: any): void;\r\n    getShape(id: number): void;\r\n    deleteShape(id: number): void;\r\n    getCacheList(): any[];\r\n    startDispose(key: boolean): void;\r\n    endDispose(): void;\r\n}\r\n"
  }
}

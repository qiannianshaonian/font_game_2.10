{
  "code": "import { Event } from \"./Event\";\r\nimport { Browser } from \"../utils/Browser\";\r\nimport { Pool } from \"../utils/Pool\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class TouchManager {\r\n    constructor() {\r\n        this.preOvers = [];\r\n        this.preDowns = [];\r\n        this.preRightDowns = [];\r\n        this.enable = true;\r\n        this._event = new Event();\r\n        this._lastClickTime = 0;\r\n    }\r\n    _clearTempArrs() {\r\n        TouchManager._oldArr.length = 0;\r\n        TouchManager._newArr.length = 0;\r\n        TouchManager._tEleArr.length = 0;\r\n    }\r\n    getTouchFromArr(touchID, arr) {\r\n        var i, len;\r\n        len = arr.length;\r\n        var tTouchO;\r\n        for (i = 0; i < len; i++) {\r\n            tTouchO = arr[i];\r\n            if (tTouchO.id == touchID) {\r\n                return tTouchO;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    removeTouchFromArr(touchID, arr) {\r\n        var i;\r\n        for (i = arr.length - 1; i >= 0; i--) {\r\n            if (arr[i].id == touchID) {\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    createTouchO(ele, touchID) {\r\n        var rst;\r\n        rst = Pool.getItem(\"TouchData\") || {};\r\n        rst.id = touchID;\r\n        rst.tar = ele;\r\n        return rst;\r\n    }\r\n    onMouseDown(ele, touchID, isLeft = false) {\r\n        if (!this.enable)\r\n            return;\r\n        var preO;\r\n        var tO;\r\n        var arrs;\r\n        preO = this.getTouchFromArr(touchID, this.preOvers);\r\n        arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n        if (!preO) {\r\n            tO = this.createTouchO(ele, touchID);\r\n            this.preOvers.push(tO);\r\n        }\r\n        else {\r\n            preO.tar = ele;\r\n        }\r\n        if (Browser.onMobile)\r\n            this.sendEvents(arrs, Event.MOUSE_OVER);\r\n        var preDowns;\r\n        preDowns = isLeft ? this.preDowns : this.preRightDowns;\r\n        preO = this.getTouchFromArr(touchID, preDowns);\r\n        if (!preO) {\r\n            tO = this.createTouchO(ele, touchID);\r\n            preDowns.push(tO);\r\n        }\r\n        else {\r\n            preO.tar = ele;\r\n        }\r\n        this.sendEvents(arrs, isLeft ? Event.MOUSE_DOWN : Event.RIGHT_MOUSE_DOWN);\r\n        this._clearTempArrs();\r\n    }\r\n    sendEvents(eles, type) {\r\n        var i, len;\r\n        len = eles.length;\r\n        this._event._stoped = false;\r\n        var _target;\r\n        _target = eles[0];\r\n        for (i = 0; i < len; i++) {\r\n            var tE = eles[i];\r\n            if (tE.destroyed)\r\n                return;\r\n            tE.event(type, this._event.setTo(type, tE, _target));\r\n            if (this._event._stoped)\r\n                break;\r\n        }\r\n    }\r\n    getEles(start, end = null, rst = null) {\r\n        if (!rst) {\r\n            rst = [];\r\n        }\r\n        else {\r\n            rst.length = 0;\r\n        }\r\n        while (start && start != end) {\r\n            rst.push(start);\r\n            start = start.parent;\r\n        }\r\n        return rst;\r\n    }\r\n    checkMouseOutAndOverOfMove(eleNew, elePre, touchID = 0) {\r\n        if (elePre == eleNew)\r\n            return;\r\n        var tar;\r\n        var arrs;\r\n        var i, len;\r\n        if (elePre.contains(eleNew)) {\r\n            arrs = this.getEles(eleNew, elePre, TouchManager._tEleArr);\r\n            this.sendEvents(arrs, Event.MOUSE_OVER);\r\n        }\r\n        else if (eleNew.contains(elePre)) {\r\n            arrs = this.getEles(elePre, eleNew, TouchManager._tEleArr);\r\n            this.sendEvents(arrs, Event.MOUSE_OUT);\r\n        }\r\n        else {\r\n            arrs = TouchManager._tEleArr;\r\n            arrs.length = 0;\r\n            var oldArr;\r\n            oldArr = this.getEles(elePre, null, TouchManager._oldArr);\r\n            var newArr;\r\n            newArr = this.getEles(eleNew, null, TouchManager._newArr);\r\n            len = oldArr.length;\r\n            var tIndex;\r\n            for (i = 0; i < len; i++) {\r\n                tar = oldArr[i];\r\n                tIndex = newArr.indexOf(tar);\r\n                if (tIndex >= 0) {\r\n                    newArr.splice(tIndex, newArr.length - tIndex);\r\n                    break;\r\n                }\r\n                else {\r\n                    arrs.push(tar);\r\n                }\r\n            }\r\n            if (arrs.length > 0) {\r\n                this.sendEvents(arrs, Event.MOUSE_OUT);\r\n            }\r\n            if (newArr.length > 0) {\r\n                this.sendEvents(newArr, Event.MOUSE_OVER);\r\n            }\r\n        }\r\n    }\r\n    onMouseMove(ele, touchID) {\r\n        if (!this.enable)\r\n            return;\r\n        var preO;\r\n        preO = this.getTouchFromArr(touchID, this.preOvers);\r\n        var arrs;\r\n        var tO;\r\n        if (!preO) {\r\n            arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n            this.sendEvents(arrs, Event.MOUSE_OVER);\r\n            this.preOvers.push(this.createTouchO(ele, touchID));\r\n        }\r\n        else {\r\n            this.checkMouseOutAndOverOfMove(ele, preO.tar);\r\n            preO.tar = ele;\r\n            arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n        }\r\n        this.sendEvents(arrs, Event.MOUSE_MOVE);\r\n        this._clearTempArrs();\r\n    }\r\n    getLastOvers() {\r\n        TouchManager._tEleArr.length = 0;\r\n        if (this.preOvers.length > 0 && this.preOvers[0].tar) {\r\n            return this.getEles(this.preOvers[0].tar, null, TouchManager._tEleArr);\r\n        }\r\n        TouchManager._tEleArr.push(ILaya.stage);\r\n        return TouchManager._tEleArr;\r\n    }\r\n    stageMouseOut() {\r\n        var lastOvers;\r\n        lastOvers = this.getLastOvers();\r\n        this.preOvers.length = 0;\r\n        this.sendEvents(lastOvers, Event.MOUSE_OUT);\r\n    }\r\n    onMouseUp(ele, touchID, isLeft = false) {\r\n        if (!this.enable)\r\n            return;\r\n        var preO;\r\n        var tO;\r\n        var arrs;\r\n        var oldArr;\r\n        var i, len;\r\n        var tar;\r\n        var sendArr;\r\n        var onMobile = Browser.onMobile;\r\n        arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n        this.sendEvents(arrs, isLeft ? Event.MOUSE_UP : Event.RIGHT_MOUSE_UP);\r\n        var preDowns;\r\n        preDowns = isLeft ? this.preDowns : this.preRightDowns;\r\n        preO = this.getTouchFromArr(touchID, preDowns);\r\n        if (!preO) {\r\n        }\r\n        else {\r\n            var isDouble;\r\n            var now = Browser.now();\r\n            isDouble = now - this._lastClickTime < 300;\r\n            this._lastClickTime = now;\r\n            if (ele == preO.tar) {\r\n                sendArr = arrs;\r\n            }\r\n            else {\r\n                oldArr = this.getEles(preO.tar, null, TouchManager._oldArr);\r\n                sendArr = TouchManager._newArr;\r\n                sendArr.length = 0;\r\n                len = oldArr.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tar = oldArr[i];\r\n                    if (arrs.indexOf(tar) >= 0) {\r\n                        sendArr.push(tar);\r\n                    }\r\n                }\r\n            }\r\n            if (sendArr.length > 0) {\r\n                this.sendEvents(sendArr, isLeft ? Event.CLICK : Event.RIGHT_CLICK);\r\n            }\r\n            if (isLeft && isDouble) {\r\n                this.sendEvents(sendArr, Event.DOUBLE_CLICK);\r\n            }\r\n            this.removeTouchFromArr(touchID, preDowns);\r\n            preO.tar = null;\r\n            Pool.recover(\"TouchData\", preO);\r\n        }\r\n        preO = this.getTouchFromArr(touchID, this.preOvers);\r\n        if (!preO) {\r\n        }\r\n        else {\r\n            if (onMobile) {\r\n                sendArr = this.getEles(preO.tar, null, sendArr);\r\n                if (sendArr && sendArr.length > 0) {\r\n                    this.sendEvents(sendArr, Event.MOUSE_OUT);\r\n                }\r\n                this.removeTouchFromArr(touchID, this.preOvers);\r\n                preO.tar = null;\r\n                Pool.recover(\"TouchData\", preO);\r\n            }\r\n        }\r\n        this._clearTempArrs();\r\n    }\r\n}\r\nTouchManager.I = new TouchManager();\r\nTouchManager._oldArr = [];\r\nTouchManager._newArr = [];\r\nTouchManager._tEleArr = [];\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Node.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Browser.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Pool.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/events/TouchManager.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Event } from \"./Event\";\r\nexport declare class TouchManager {\r\n    static I: TouchManager;\r\n    private static _oldArr;\r\n    private static _newArr;\r\n    private static _tEleArr;\r\n    private preOvers;\r\n    private preDowns;\r\n    private preRightDowns;\r\n    enable: boolean;\r\n    _event: Event;\r\n    private _lastClickTime;\r\n    private _clearTempArrs;\r\n    private getTouchFromArr;\r\n    private removeTouchFromArr;\r\n    private createTouchO;\r\n    onMouseDown(ele: any, touchID: number, isLeft?: boolean): void;\r\n    private sendEvents;\r\n    private getEles;\r\n    private checkMouseOutAndOverOfMove;\r\n    onMouseMove(ele: any, touchID: number): void;\r\n    getLastOvers(): any[];\r\n    stageMouseOut(): void;\r\n    onMouseUp(ele: any, touchID: number, isLeft?: boolean): void;\r\n}\r\n"
  }
}

{
  "code": "export class ShaderDefinesBase {\r\n    constructor(name2int, int2name, int2nameMap) {\r\n        this._value = 0;\r\n        this._name2int = name2int;\r\n        this._int2name = int2name;\r\n        this._int2nameMap = int2nameMap;\r\n    }\r\n    add(value) {\r\n        if (typeof (value) == 'string') {\r\n            this._value |= this._name2int[value];\r\n        }\r\n        else {\r\n            this._value |= value;\r\n        }\r\n        return this._value;\r\n    }\r\n    addInt(value) {\r\n        this._value |= value;\r\n        return this._value;\r\n    }\r\n    remove(value) {\r\n        if (typeof (value) == 'string') {\r\n            this._value &= ~(this._name2int[value]);\r\n        }\r\n        else {\r\n            this._value &= (~value);\r\n        }\r\n        return this._value;\r\n    }\r\n    isDefine(def) {\r\n        return (this._value & def) === def;\r\n    }\r\n    getValue() {\r\n        return this._value;\r\n    }\r\n    setValue(value) {\r\n        this._value = value;\r\n    }\r\n    toNameDic() {\r\n        var r = this._int2nameMap[this._value];\r\n        return r ? r : ShaderDefinesBase._toText(this._value, this._int2name, this._int2nameMap);\r\n    }\r\n    static _reg(name, value, _name2int, _int2name) {\r\n        _name2int[name] = value;\r\n        _int2name[value] = name;\r\n    }\r\n    static _toText(value, _int2name, _int2nameMap) {\r\n        var r = _int2nameMap[value];\r\n        if (r)\r\n            return r;\r\n        var o = {};\r\n        var d = 1;\r\n        for (var i = 0; i < 32; i++) {\r\n            d = 1 << i;\r\n            if (d > value)\r\n                break;\r\n            if (value & d) {\r\n                var name = _int2name[d];\r\n                name && (o[name] = \"\");\r\n            }\r\n        }\r\n        _int2nameMap[value] = o;\r\n        return o;\r\n    }\r\n    static _toInt(names, _name2int) {\r\n        var words = names.split('.');\r\n        var num = 0;\r\n        for (var i = 0, n = words.length; i < n; i++) {\r\n            var value = _name2int[words[i]];\r\n            if (!value)\r\n                throw new Error(\"Defines to int err:\" + names + \"/\" + words[i]);\r\n            num |= value;\r\n        }\r\n        return num;\r\n    }\r\n}\r\n",
  "references": [],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/webgl/shader/ShaderDefinesBase.d.ts",
    "writeByteOrderMark": false,
    "text": "export declare class ShaderDefinesBase {\r\n    _value: number;\r\n    private _name2int;\r\n    private _int2name;\r\n    private _int2nameMap;\r\n    constructor(name2int: any, int2name: any[], int2nameMap: any[]);\r\n    add(value: any): number;\r\n    addInt(value: number): number;\r\n    remove(value: any): number;\r\n    isDefine(def: number): boolean;\r\n    getValue(): number;\r\n    setValue(value: number): void;\r\n    toNameDic(): any;\r\n    static _reg(name: string, value: number, _name2int: any, _int2name: any[]): void;\r\n    static _toText(value: number, _int2name: any[], _int2nameMap: any): any;\r\n    static _toInt(names: string, _name2int: any): number;\r\n}\r\n"
  }
}

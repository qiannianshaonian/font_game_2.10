{
  "code": "import { Point } from \"./Point\";\r\nimport { Utils } from \"../utils/Utils\";\r\nexport class GrahamScan {\r\n    static multiply(p1, p2, p0) {\r\n        return ((p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y));\r\n    }\r\n    static dis(p1, p2) {\r\n        return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);\r\n    }\r\n    static _getPoints(count, tempUse = false, rst = null) {\r\n        if (!GrahamScan._mPointList)\r\n            GrahamScan._mPointList = [];\r\n        while (GrahamScan._mPointList.length < count)\r\n            GrahamScan._mPointList.push(new Point());\r\n        if (!rst)\r\n            rst = [];\r\n        rst.length = 0;\r\n        if (tempUse) {\r\n            GrahamScan.getFrom(rst, GrahamScan._mPointList, count);\r\n        }\r\n        else {\r\n            GrahamScan.getFromR(rst, GrahamScan._mPointList, count);\r\n        }\r\n        return rst;\r\n    }\r\n    static getFrom(rst, src, count) {\r\n        var i;\r\n        for (i = 0; i < count; i++) {\r\n            rst.push(src[i]);\r\n        }\r\n        return rst;\r\n    }\r\n    static getFromR(rst, src, count) {\r\n        var i;\r\n        for (i = 0; i < count; i++) {\r\n            rst.push(src.pop());\r\n        }\r\n        return rst;\r\n    }\r\n    static pListToPointList(pList, tempUse = false) {\r\n        var i, len = pList.length / 2, rst = GrahamScan._getPoints(len, tempUse, GrahamScan._tempPointList);\r\n        for (i = 0; i < len; i++) {\r\n            rst[i].setTo(pList[i + i], pList[i + i + 1]);\r\n        }\r\n        return rst;\r\n    }\r\n    static pointListToPlist(pointList) {\r\n        var i, len = pointList.length, rst = GrahamScan._temPList, tPoint;\r\n        rst.length = 0;\r\n        for (i = 0; i < len; i++) {\r\n            tPoint = pointList[i];\r\n            rst.push(tPoint.x, tPoint.y);\r\n        }\r\n        return rst;\r\n    }\r\n    static scanPList(pList) {\r\n        return Utils.copyArray(pList, GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList, true))));\r\n    }\r\n    static scan(PointSet) {\r\n        var i, j, k = 0, top = 2, tmp, n = PointSet.length, ch;\r\n        var _tmpDic = {};\r\n        var key;\r\n        ch = GrahamScan._temArr;\r\n        ch.length = 0;\r\n        n = PointSet.length;\r\n        for (i = n - 1; i >= 0; i--) {\r\n            tmp = PointSet[i];\r\n            key = tmp.x + \"_\" + tmp.y;\r\n            if (!(key in _tmpDic)) {\r\n                _tmpDic[key] = true;\r\n                ch.push(tmp);\r\n            }\r\n        }\r\n        n = ch.length;\r\n        Utils.copyArray(PointSet, ch);\r\n        for (i = 1; i < n; i++)\r\n            if ((PointSet[i].y < PointSet[k].y) || ((PointSet[i].y == PointSet[k].y) && (PointSet[i].x < PointSet[k].x)))\r\n                k = i;\r\n        tmp = PointSet[0];\r\n        PointSet[0] = PointSet[k];\r\n        PointSet[k] = tmp;\r\n        for (i = 1; i < n - 1; i++) {\r\n            k = i;\r\n            for (j = i + 1; j < n; j++)\r\n                if ((GrahamScan.multiply(PointSet[j], PointSet[k], PointSet[0]) > 0) || ((GrahamScan.multiply(PointSet[j], PointSet[k], PointSet[0]) == 0) && (GrahamScan.dis(PointSet[0], PointSet[j]) < GrahamScan.dis(PointSet[0], PointSet[k]))))\r\n                    k = j;\r\n            tmp = PointSet[i];\r\n            PointSet[i] = PointSet[k];\r\n            PointSet[k] = tmp;\r\n        }\r\n        ch = GrahamScan._temArr;\r\n        ch.length = 0;\r\n        if (PointSet.length < 3) {\r\n            return Utils.copyArray(ch, PointSet);\r\n        }\r\n        ch.push(PointSet[0], PointSet[1], PointSet[2]);\r\n        for (i = 3; i < n; i++) {\r\n            while (ch.length >= 2 && GrahamScan.multiply(PointSet[i], ch[ch.length - 1], ch[ch.length - 2]) >= 0)\r\n                ch.pop();\r\n            PointSet[i] && ch.push(PointSet[i]);\r\n        }\r\n        return ch;\r\n    }\r\n}\r\nGrahamScan._tempPointList = [];\r\nGrahamScan._temPList = [];\r\nGrahamScan._temArr = [];\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Utils.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/maths/GrahamScan.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Point } from \"./Point\";\r\nexport declare class GrahamScan {\r\n    private static _mPointList;\r\n    private static _tempPointList;\r\n    private static _temPList;\r\n    private static _temArr;\r\n    static multiply(p1: Point, p2: Point, p0: Point): number;\r\n    static dis(p1: Point, p2: Point): number;\r\n    private static _getPoints;\r\n    static getFrom(rst: any[], src: any[], count: number): any[];\r\n    static getFromR(rst: any[], src: any[], count: number): any[];\r\n    static pListToPointList(pList: any[], tempUse?: boolean): any[];\r\n    static pointListToPlist(pointList: any[]): any[];\r\n    static scanPList(pList: any[]): any[];\r\n    static scan(PointSet: any[]): any[];\r\n}\r\n"
  }
}

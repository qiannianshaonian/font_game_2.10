{
  "code": "import { UIComponent } from \"./UIComponent\";\r\nimport { Label } from \"./Label\";\r\nimport { Image } from \"./Image\";\r\nimport { Button } from \"./Button\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Loader } from \"../net/Loader\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class Slider extends UIComponent {\r\n    constructor(skin = null) {\r\n        super();\r\n        this.isVertical = true;\r\n        this.showLabel = true;\r\n        this._max = 100;\r\n        this._min = 0;\r\n        this._tick = 1;\r\n        this._value = 0;\r\n        if (!Slider.label) {\r\n            Slider.label = new Label();\r\n        }\r\n        this.skin = skin;\r\n    }\r\n    destroy(destroyChild = true) {\r\n        super.destroy(destroyChild);\r\n        this._bg && this._bg.destroy(destroyChild);\r\n        this._bar && this._bar.destroy(destroyChild);\r\n        this._progress && this._progress.destroy(destroyChild);\r\n        this._bg = null;\r\n        this._bar = null;\r\n        this._progress = null;\r\n        this.changeHandler = null;\r\n    }\r\n    createChildren() {\r\n        this.addChild(this._bg = new Image());\r\n        this.addChild(this._bar = new Button());\r\n    }\r\n    initialize() {\r\n        this._bar.on(Event.MOUSE_DOWN, this, this.onBarMouseDown);\r\n        this._bg.sizeGrid = this._bar.sizeGrid = \"4,4,4,4,0\";\r\n        if (this._progress)\r\n            this._progress.sizeGrid = this._bar.sizeGrid;\r\n        this.allowClickBack = true;\r\n    }\r\n    onBarMouseDown(e) {\r\n        var Laya = ILaya;\r\n        this._globalSacle || (this._globalSacle = new Point());\r\n        this._globalSacle.setTo(this.globalScaleX || 0.01, this.globalScaleY || 0.01);\r\n        this._maxMove = this.isVertical ? (this.height - this._bar.height) : (this.width - this._bar.width);\r\n        this._tx = Laya.stage.mouseX;\r\n        this._ty = Laya.stage.mouseY;\r\n        Laya.stage.on(Event.MOUSE_MOVE, this, this.mouseMove);\r\n        Laya.stage.once(Event.MOUSE_UP, this, this.mouseUp);\r\n        Laya.stage.once(Event.MOUSE_OUT, this, this.mouseUp);\r\n        this.showValueText();\r\n    }\r\n    showValueText() {\r\n        if (this.showLabel) {\r\n            var label = Slider.label;\r\n            this.addChild(label);\r\n            label.textField.changeText(this._value + \"\");\r\n            if (this.isVertical) {\r\n                label.x = this._bar._x + 20;\r\n                label.y = (this._bar.height - label.height) * 0.5 + this._bar._y;\r\n            }\r\n            else {\r\n                label.y = this._bar._y - 20;\r\n                label.x = (this._bar.width - label.width) * 0.5 + this._bar._x;\r\n            }\r\n        }\r\n    }\r\n    hideValueText() {\r\n        Slider.label && Slider.label.removeSelf();\r\n    }\r\n    mouseUp(e) {\r\n        let stage = ILaya.stage;\r\n        stage.off(Event.MOUSE_MOVE, this, this.mouseMove);\r\n        stage.off(Event.MOUSE_UP, this, this.mouseUp);\r\n        stage.off(Event.MOUSE_OUT, this, this.mouseUp);\r\n        this.sendChangeEvent(Event.CHANGED);\r\n        this.hideValueText();\r\n    }\r\n    mouseMove(e) {\r\n        let stage = ILaya.stage;\r\n        var oldValue = this._value;\r\n        if (this.isVertical) {\r\n            this._bar.y += (stage.mouseY - this._ty) / this._globalSacle.y;\r\n            if (this._bar._y > this._maxMove)\r\n                this._bar.y = this._maxMove;\r\n            else if (this._bar._y < 0)\r\n                this._bar.y = 0;\r\n            this._value = this._bar._y / this._maxMove * (this._max - this._min) + this._min;\r\n            if (this._progress)\r\n                this._progress.height = this._bar._y + 0.5 * this._bar.height;\r\n        }\r\n        else {\r\n            this._bar.x += (stage.mouseX - this._tx) / this._globalSacle.x;\r\n            if (this._bar._x > this._maxMove)\r\n                this._bar.x = this._maxMove;\r\n            else if (this._bar._x < 0)\r\n                this._bar.x = 0;\r\n            this._value = this._bar._x / this._maxMove * (this._max - this._min) + this._min;\r\n            if (this._progress)\r\n                this._progress.width = this._bar._x + 0.5 * this._bar.width;\r\n        }\r\n        this._tx = stage.mouseX;\r\n        this._ty = stage.mouseY;\r\n        if (this._tick != 0) {\r\n            var pow = Math.pow(10, (this._tick + \"\").length - 1);\r\n            this._value = Math.round(Math.round(this._value / this._tick) * this._tick * pow) / pow;\r\n        }\r\n        if (this._value != oldValue) {\r\n            this.sendChangeEvent();\r\n        }\r\n        this.showValueText();\r\n    }\r\n    sendChangeEvent(type = Event.CHANGE) {\r\n        this.event(type);\r\n        this.changeHandler && this.changeHandler.runWith(this._value);\r\n    }\r\n    get skin() {\r\n        return this._skin;\r\n    }\r\n    set skin(value) {\r\n        if (this._skin != value) {\r\n            this._skin = value;\r\n            if (this._skin && !Loader.getRes(this._skin)) {\r\n                ILaya.loader.load([this._skin, this._skin.replace(\".png\", \"$bar.png\")], Handler.create(this, this._skinLoaded));\r\n            }\r\n            else {\r\n                this._skinLoaded();\r\n            }\r\n        }\r\n    }\r\n    _skinLoaded() {\r\n        this._bg.skin = this._skin;\r\n        this._bar.skin = this._skin.replace(\".png\", \"$bar.png\");\r\n        var progressSkin = this._skin.replace(\".png\", \"$progress.png\");\r\n        if (Loader.getRes(progressSkin)) {\r\n            if (!this._progress) {\r\n                this.addChild(this._progress = new Image());\r\n                this._progress.sizeGrid = this._bar.sizeGrid;\r\n                this.setChildIndex(this._progress, 1);\r\n            }\r\n            this._progress.skin = progressSkin;\r\n        }\r\n        this.setBarPoint();\r\n        this.callLater(this.changeValue);\r\n        this._sizeChanged();\r\n        this.event(Event.LOADED);\r\n    }\r\n    setBarPoint() {\r\n        if (this.isVertical)\r\n            this._bar.x = Math.round((this._bg.width - this._bar.width) * 0.5);\r\n        else\r\n            this._bar.y = Math.round((this._bg.height - this._bar.height) * 0.5);\r\n    }\r\n    measureWidth() {\r\n        return Math.max(this._bg.width, this._bar.width);\r\n    }\r\n    measureHeight() {\r\n        return Math.max(this._bg.height, this._bar.height);\r\n    }\r\n    _sizeChanged() {\r\n        super._sizeChanged();\r\n        if (this.isVertical)\r\n            this._bg.height = this.height;\r\n        else\r\n            this._bg.width = this.width;\r\n        this.setBarPoint();\r\n        this.changeValue();\r\n    }\r\n    get sizeGrid() {\r\n        return this._bg.sizeGrid;\r\n    }\r\n    set sizeGrid(value) {\r\n        this._bg.sizeGrid = value;\r\n        this._bar.sizeGrid = value;\r\n        if (this._progress)\r\n            this._progress.sizeGrid = this._bar.sizeGrid;\r\n    }\r\n    setSlider(min, max, value) {\r\n        this._value = -1;\r\n        this._min = min;\r\n        this._max = max > min ? max : min;\r\n        this.value = value < min ? min : value > max ? max : value;\r\n    }\r\n    get tick() {\r\n        return this._tick;\r\n    }\r\n    set tick(value) {\r\n        if (this._tick != value) {\r\n            this._tick = value;\r\n            this.callLater(this.changeValue);\r\n        }\r\n    }\r\n    changeValue() {\r\n        if (this.tick != 0) {\r\n            var pow = Math.pow(10, (this._tick + \"\").length - 1);\r\n            this._value = Math.round(Math.round(this._value / this._tick) * this._tick * pow) / pow;\r\n        }\r\n        this._value = this._value > this._max ? this._max : this._value < this._min ? this._min : this._value;\r\n        var num = this._max - this._min;\r\n        if (num === 0)\r\n            num = 1;\r\n        if (this.isVertical) {\r\n            this._bar.y = (this._value - this._min) / num * (this.height - this._bar.height);\r\n            if (this._progress)\r\n                this._progress.height = this._bar._y + 0.5 * this._bar.height;\r\n        }\r\n        else {\r\n            this._bar.x = (this._value - this._min) / num * (this.width - this._bar.width);\r\n            if (this._progress)\r\n                this._progress.width = this._bar._x + 0.5 * this._bar.width;\r\n        }\r\n    }\r\n    get max() {\r\n        return this._max;\r\n    }\r\n    set max(value) {\r\n        if (this._max != value) {\r\n            this._max = value;\r\n            this.callLater(this.changeValue);\r\n        }\r\n    }\r\n    get min() {\r\n        return this._min;\r\n    }\r\n    set min(value) {\r\n        if (this._min != value) {\r\n            this._min = value;\r\n            this.callLater(this.changeValue);\r\n        }\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(num) {\r\n        if (this._value != num) {\r\n            var oldValue = this._value;\r\n            this._value = num;\r\n            this.changeValue();\r\n            if (this._value != oldValue) {\r\n                this.sendChangeEvent();\r\n            }\r\n        }\r\n    }\r\n    get allowClickBack() {\r\n        return this._allowClickBack;\r\n    }\r\n    set allowClickBack(value) {\r\n        if (this._allowClickBack != value) {\r\n            this._allowClickBack = value;\r\n            if (value)\r\n                this._bg.on(Event.MOUSE_DOWN, this, this.onBgMouseDown);\r\n            else\r\n                this._bg.off(Event.MOUSE_DOWN, this, this.onBgMouseDown);\r\n        }\r\n    }\r\n    onBgMouseDown(e) {\r\n        var point = this._bg.getMousePoint();\r\n        if (this.isVertical)\r\n            this.value = point.y / (this.height - this._bar.height) * (this._max - this._min) + this._min;\r\n        else\r\n            this.value = point.x / (this.width - this._bar.width) * (this._max - this._min) + this._min;\r\n    }\r\n    set dataSource(value) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.value = Number(value);\r\n        else\r\n            super.dataSource = value;\r\n    }\r\n    get dataSource() {\r\n        return super.dataSource;\r\n    }\r\n    get bar() {\r\n        return this._bar;\r\n    }\r\n}\r\nSlider.label = null;\r\nILaya.regClass(Slider);\r\nClassUtils.regClass(\"laya.ui.Slider\", Slider);\r\nClassUtils.regClass(\"Laya.Slider\", Slider);\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/UIComponent.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/Label.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/Image.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/Button.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/net/Loader.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Handler.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/ui/Slider.d.ts",
    "writeByteOrderMark": false,
    "text": "import { UIComponent } from \"./UIComponent\";\r\nimport { Label } from \"./Label\";\r\nimport { Image } from \"./Image\";\r\nimport { Button } from \"./Button\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class Slider extends UIComponent {\r\n    static label: Label;\r\n    changeHandler: Handler;\r\n    isVertical: boolean;\r\n    showLabel: boolean;\r\n    protected _allowClickBack: boolean;\r\n    protected _max: number;\r\n    protected _min: number;\r\n    protected _tick: number;\r\n    protected _value: number;\r\n    protected _skin: string;\r\n    protected _bg: Image;\r\n    protected _progress: Image;\r\n    protected _bar: Button;\r\n    protected _tx: number;\r\n    protected _ty: number;\r\n    protected _maxMove: number;\r\n    protected _globalSacle: Point;\r\n    constructor(skin?: string);\r\n    destroy(destroyChild?: boolean): void;\r\n    protected createChildren(): void;\r\n    protected initialize(): void;\r\n    protected onBarMouseDown(e: Event): void;\r\n    protected showValueText(): void;\r\n    protected hideValueText(): void;\r\n    private mouseUp;\r\n    private mouseMove;\r\n    protected sendChangeEvent(type?: string): void;\r\n    skin: string;\r\n    protected _skinLoaded(): void;\r\n    protected setBarPoint(): void;\r\n    protected measureWidth(): number;\r\n    protected measureHeight(): number;\r\n    protected _sizeChanged(): void;\r\n    sizeGrid: string;\r\n    setSlider(min: number, max: number, value: number): void;\r\n    tick: number;\r\n    changeValue(): void;\r\n    max: number;\r\n    min: number;\r\n    value: number;\r\n    allowClickBack: boolean;\r\n    protected onBgMouseDown(e: Event): void;\r\n    dataSource: any;\r\n    readonly bar: Button;\r\n}\r\n"
  }
}

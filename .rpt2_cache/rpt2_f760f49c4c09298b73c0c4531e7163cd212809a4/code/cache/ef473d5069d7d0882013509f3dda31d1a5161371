{
  "code": "import { Matrix } from \"../maths/Matrix\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Rectangle } from \"../maths/Rectangle\";\r\nimport { RenderTexture2D } from \"../resource/RenderTexture2D\";\r\nimport { WebGLRTMgr } from \"../resource/WebGLRTMgr\";\r\nimport { BlendMode } from \"../webgl/canvas/BlendMode\";\r\nimport { ShaderDefines2D } from \"../webgl/shader/d2/ShaderDefines2D\";\r\nimport { Value2D } from \"../webgl/shader/d2/value/Value2D\";\r\nimport { SubmitCMD } from \"../webgl/submit/SubmitCMD\";\r\nexport class Filter {\r\n    constructor() {\r\n    }\r\n    get type() { return -1; }\r\n}\r\nFilter.BLUR = 0x10;\r\nFilter.COLOR = 0x20;\r\nFilter.GLOW = 0x08;\r\nFilter._filter = function (sprite, context, x, y) {\r\n    var webglctx = context;\r\n    var next = this._next;\r\n    if (next) {\r\n        var filters = sprite.filters, len = filters.length;\r\n        if (len == 1 && (filters[0].type == Filter.COLOR)) {\r\n            context.save();\r\n            context.setColorFilter(filters[0]);\r\n            next._fun.call(next, sprite, context, x, y);\r\n            context.restore();\r\n            return;\r\n        }\r\n        var svCP = Value2D.create(ShaderDefines2D.TEXTURE2D, 0);\r\n        var b;\r\n        var p = Point.TEMP;\r\n        var tMatrix = webglctx._curMat;\r\n        var mat = Matrix.create();\r\n        tMatrix.copyTo(mat);\r\n        var tPadding = 0;\r\n        var tHalfPadding = 0;\r\n        var tIsHaveGlowFilter = false;\r\n        var source = null;\r\n        var out = sprite._cacheStyle.filterCache || null;\r\n        if (!out || sprite.getRepaint() != 0) {\r\n            tIsHaveGlowFilter = sprite._isHaveGlowFilter();\r\n            if (tIsHaveGlowFilter) {\r\n                tPadding = 50;\r\n                tHalfPadding = 25;\r\n            }\r\n            b = new Rectangle();\r\n            b.copyFrom(sprite.getSelfBounds());\r\n            b.x += sprite.x;\r\n            b.y += sprite.y;\r\n            b.x -= sprite.pivotX + 4;\r\n            b.y -= sprite.pivotY + 4;\r\n            var tSX = b.x;\r\n            var tSY = b.y;\r\n            b.width += (tPadding + 8);\r\n            b.height += (tPadding + 8);\r\n            p.x = b.x * mat.a + b.y * mat.c;\r\n            p.y = b.y * mat.d + b.x * mat.b;\r\n            b.x = p.x;\r\n            b.y = p.y;\r\n            p.x = b.width * mat.a + b.height * mat.c;\r\n            p.y = b.height * mat.d + b.width * mat.b;\r\n            b.width = p.x;\r\n            b.height = p.y;\r\n            if (b.width <= 0 || b.height <= 0) {\r\n                return;\r\n            }\r\n            out && WebGLRTMgr.releaseRT(out);\r\n            source = WebGLRTMgr.getRT(b.width, b.height);\r\n            var outRT = out = WebGLRTMgr.getRT(b.width, b.height);\r\n            sprite._getCacheStyle().filterCache = out;\r\n            webglctx.pushRT();\r\n            webglctx.useRT(source);\r\n            var tX = sprite.x - tSX + tHalfPadding;\r\n            var tY = sprite.y - tSY + tHalfPadding;\r\n            next._fun.call(next, sprite, context, tX, tY);\r\n            webglctx.useRT(outRT);\r\n            for (var i = 0; i < len; i++) {\r\n                if (i != 0) {\r\n                    webglctx.useRT(source);\r\n                    webglctx.drawTarget(outRT, 0, 0, b.width, b.height, Matrix.TEMP.identity(), svCP, null, BlendMode.TOINT.overlay);\r\n                    webglctx.useRT(outRT);\r\n                }\r\n                var fil = filters[i];\r\n                switch (fil.type) {\r\n                    case Filter.BLUR:\r\n                        fil._glRender && fil._glRender.render(source, context, b.width, b.height, fil);\r\n                        break;\r\n                    case Filter.GLOW:\r\n                        fil._glRender && fil._glRender.render(source, context, b.width, b.height, fil);\r\n                        break;\r\n                    case Filter.COLOR:\r\n                        webglctx.setColorFilter(fil);\r\n                        webglctx.drawTarget(source, 0, 0, b.width, b.height, Matrix.EMPTY.identity(), Value2D.create(ShaderDefines2D.TEXTURE2D, 0));\r\n                        webglctx.setColorFilter(null);\r\n                        break;\r\n                }\r\n            }\r\n            webglctx.popRT();\r\n        }\r\n        else {\r\n            tIsHaveGlowFilter = sprite._cacheStyle.hasGlowFilter || false;\r\n            if (tIsHaveGlowFilter) {\r\n                tPadding = 50;\r\n                tHalfPadding = 25;\r\n            }\r\n            b = sprite.getBounds();\r\n            if (b.width <= 0 || b.height <= 0) {\r\n                return;\r\n            }\r\n            b.width += tPadding;\r\n            b.height += tPadding;\r\n            p.x = b.x * mat.a + b.y * mat.c;\r\n            p.y = b.y * mat.d + b.x * mat.b;\r\n            b.x = p.x;\r\n            b.y = p.y;\r\n            p.x = b.width * mat.a + b.height * mat.c;\r\n            p.y = b.height * mat.d + b.width * mat.b;\r\n            b.width = p.x;\r\n            b.height = p.y;\r\n        }\r\n        x = x - tHalfPadding - sprite.x;\r\n        y = y - tHalfPadding - sprite.y;\r\n        p.setTo(x, y);\r\n        mat.transformPoint(p);\r\n        x = p.x + b.x;\r\n        y = p.y + b.y;\r\n        webglctx._drawRenderTexture(out, x, y, b.width, b.height, Matrix.TEMP.identity(), 1.0, RenderTexture2D.defuv);\r\n        if (source) {\r\n            var submit = SubmitCMD.create([source], function (s) {\r\n                s.destroy();\r\n            }, this);\r\n            source = null;\r\n            context.addRenderObject(submit);\r\n        }\r\n        mat.destroy();\r\n    }\r\n};\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/filters/IFilter.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Sprite.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Matrix.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Rectangle.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/renders/RenderSprite.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/resource/Context.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/resource/RenderTexture2D.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/resource/Texture2D.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/resource/WebGLRTMgr.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/webgl/canvas/BlendMode.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/webgl/shader/d2/ShaderDefines2D.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/webgl/shader/d2/value/Value2D.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/webgl/submit/SubmitCMD.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/filters/ColorFilter.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/filters/Filter.d.ts",
    "writeByteOrderMark": false,
    "text": "import { IFilter } from \"./IFilter\";\r\nimport { Sprite } from \"../display/Sprite\";\r\nimport { Context } from \"../resource/Context\";\r\nexport declare class Filter implements IFilter {\r\n    static BLUR: number;\r\n    static COLOR: number;\r\n    static GLOW: number;\r\n    _glRender: any;\r\n    constructor();\r\n    readonly type: number;\r\n    static _filter: (sprite: Sprite, context: Context, x: number, y: number) => void;\r\n}\r\n"
  }
}

{
  "code": "import { Box } from \"./Box\";\r\nimport { VScrollBar } from \"./VScrollBar\";\r\nimport { HScrollBar } from \"./HScrollBar\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Rectangle } from \"../maths/Rectangle\";\r\nimport { SceneUtils } from \"../utils/SceneUtils\";\r\nimport { Tween } from \"../utils/Tween\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class List extends Box {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.selectEnable = false;\r\n        this.totalPage = 0;\r\n        this._$componentType = \"List\";\r\n        this._repeatX = 0;\r\n        this._repeatY = 0;\r\n        this._repeatX2 = 0;\r\n        this._repeatY2 = 0;\r\n        this._spaceX = 0;\r\n        this._spaceY = 0;\r\n        this._cells = [];\r\n        this._startIndex = 0;\r\n        this._selectedIndex = -1;\r\n        this._page = 0;\r\n        this._isVertical = true;\r\n        this._cellSize = 20;\r\n        this._cellOffset = 0;\r\n        this._createdLine = 0;\r\n        this._offset = new Point();\r\n        this._usedCache = null;\r\n        this._elasticEnabled = false;\r\n        this._preLen = 0;\r\n    }\r\n    destroy(destroyChild = true) {\r\n        this._content && this._content.destroy(destroyChild);\r\n        this._scrollBar && this._scrollBar.destroy(destroyChild);\r\n        super.destroy(destroyChild);\r\n        this._content = null;\r\n        this._scrollBar = null;\r\n        this._itemRender = null;\r\n        this._cells = null;\r\n        this._array = null;\r\n        this.selectHandler = this.renderHandler = this.mouseHandler = null;\r\n    }\r\n    createChildren() {\r\n        this.addChild(this._content = new Box());\r\n    }\r\n    set cacheAs(value) {\r\n        super.cacheAs = value;\r\n        if (this._scrollBar) {\r\n            this._usedCache = null;\r\n            if (value !== \"none\")\r\n                this._scrollBar.on(Event.START, this, this.onScrollStart);\r\n            else\r\n                this._scrollBar.off(Event.START, this, this.onScrollStart);\r\n        }\r\n    }\r\n    get cacheAs() {\r\n        return super.cacheAs;\r\n    }\r\n    onScrollStart() {\r\n        this._usedCache || (this._usedCache = super.cacheAs);\r\n        super.cacheAs = \"none\";\r\n        this._scrollBar.once(Event.END, this, this.onScrollEnd);\r\n    }\r\n    onScrollEnd() {\r\n        super.cacheAs = this._usedCache || 'none';\r\n    }\r\n    get content() {\r\n        return this._content;\r\n    }\r\n    get vScrollBarSkin() {\r\n        return this._scrollBar ? this._scrollBar.skin : null;\r\n    }\r\n    set vScrollBarSkin(value) {\r\n        this._removePreScrollBar();\r\n        var scrollBar = new VScrollBar();\r\n        scrollBar.name = \"scrollBar\";\r\n        scrollBar.right = 0;\r\n        scrollBar.skin = value;\r\n        scrollBar.elasticDistance = this._elasticEnabled ? 200 : 0;\r\n        this.scrollBar = scrollBar;\r\n        this.addChild(scrollBar);\r\n        this._setCellChanged();\r\n    }\r\n    _removePreScrollBar() {\r\n        var preNode = this.removeChildByName(\"scrollBar\");\r\n        if (preNode)\r\n            preNode.destroy(true);\r\n    }\r\n    get hScrollBarSkin() {\r\n        return this._scrollBar ? this._scrollBar.skin : null;\r\n    }\r\n    set hScrollBarSkin(value) {\r\n        this._removePreScrollBar();\r\n        var scrollBar = new HScrollBar();\r\n        scrollBar.name = \"scrollBar\";\r\n        scrollBar.bottom = 0;\r\n        scrollBar.skin = value;\r\n        scrollBar.elasticDistance = this._elasticEnabled ? 200 : 0;\r\n        this.scrollBar = scrollBar;\r\n        this.addChild(scrollBar);\r\n        this._setCellChanged();\r\n    }\r\n    get scrollBar() {\r\n        return this._scrollBar;\r\n    }\r\n    set scrollBar(value) {\r\n        if (this._scrollBar != value) {\r\n            this._scrollBar = value;\r\n            if (value) {\r\n                this._isVertical = this._scrollBar.isVertical;\r\n                this.addChild(this._scrollBar);\r\n                this._scrollBar.on(Event.CHANGE, this, this.onScrollBarChange);\r\n            }\r\n        }\r\n    }\r\n    get itemRender() {\r\n        return this._itemRender;\r\n    }\r\n    set itemRender(value) {\r\n        if (this._itemRender != value) {\r\n            this._itemRender = value;\r\n            for (var i = this._cells.length - 1; i > -1; i--) {\r\n                this._cells[i].destroy();\r\n            }\r\n            this._cells.length = 0;\r\n            this._setCellChanged();\r\n        }\r\n    }\r\n    set width(value) {\r\n        if (value != this._width) {\r\n            super.width = value;\r\n            this._setCellChanged();\r\n        }\r\n    }\r\n    get width() {\r\n        return super.width;\r\n    }\r\n    set height(value) {\r\n        if (value != this._height) {\r\n            super.height = value;\r\n            this._setCellChanged();\r\n        }\r\n    }\r\n    get height() {\r\n        return super.height;\r\n    }\r\n    get repeatX() {\r\n        return this._repeatX > 0 ? this._repeatX : this._repeatX2 > 0 ? this._repeatX2 : 1;\r\n    }\r\n    set repeatX(value) {\r\n        this._repeatX = value;\r\n        this._setCellChanged();\r\n    }\r\n    get repeatY() {\r\n        return this._repeatY > 0 ? this._repeatY : this._repeatY2 > 0 ? this._repeatY2 : 1;\r\n    }\r\n    set repeatY(value) {\r\n        this._repeatY = value;\r\n        this._setCellChanged();\r\n    }\r\n    get spaceX() {\r\n        return this._spaceX;\r\n    }\r\n    set spaceX(value) {\r\n        this._spaceX = value;\r\n        this._setCellChanged();\r\n    }\r\n    get spaceY() {\r\n        return this._spaceY;\r\n    }\r\n    set spaceY(value) {\r\n        this._spaceY = value;\r\n        this._setCellChanged();\r\n    }\r\n    changeCells() {\r\n        this._cellChanged = false;\r\n        if (this._itemRender) {\r\n            this.scrollBar = this.getChildByName(\"scrollBar\");\r\n            var cell = this._getOneCell();\r\n            var cellWidth = (cell.width + this._spaceX) || 1;\r\n            var cellHeight = (cell.height + this._spaceY) || 1;\r\n            if (this._width > 0)\r\n                this._repeatX2 = this._isVertical ? Math.round(this._width / cellWidth) : Math.ceil(this._width / cellWidth);\r\n            if (this._height > 0)\r\n                this._repeatY2 = this._isVertical ? Math.ceil(this._height / cellHeight) : Math.round(this._height / cellHeight);\r\n            var listWidth = this._width ? this._width : (cellWidth * this.repeatX - this._spaceX);\r\n            var listHeight = this._height ? this._height : (cellHeight * this.repeatY - this._spaceY);\r\n            this._cellSize = this._isVertical ? cellHeight : cellWidth;\r\n            this._cellOffset = this._isVertical ? (cellHeight * Math.max(this._repeatY2, this._repeatY) - listHeight - this._spaceY) : (cellWidth * Math.max(this._repeatX2, this._repeatX) - listWidth - this._spaceX);\r\n            if (this._isVertical && this.vScrollBarSkin)\r\n                this._scrollBar.height = listHeight;\r\n            else if (!this._isVertical && this.hScrollBarSkin)\r\n                this._scrollBar.width = listWidth;\r\n            this.setContentSize(listWidth, listHeight);\r\n            var numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            var numY = (this._isVertical ? this.repeatY : this.repeatX) + (this._scrollBar ? 1 : 0);\r\n            this._createItems(0, numX, numY);\r\n            this._createdLine = numY;\r\n            if (this._array) {\r\n                this.array = this._array;\r\n                this.runCallLater(this.renderItems);\r\n            }\r\n        }\r\n    }\r\n    _getOneCell() {\r\n        if (this._cells.length === 0) {\r\n            var item = this.createItem();\r\n            this._offset.setTo(item._x, item._y);\r\n            if (this.cacheContent)\r\n                return item;\r\n            this._cells.push(item);\r\n        }\r\n        return this._cells[0];\r\n    }\r\n    _createItems(startY, numX, numY) {\r\n        var box = this._content;\r\n        var cell = this._getOneCell();\r\n        var cellWidth = cell.width + this._spaceX;\r\n        var cellHeight = cell.height + this._spaceY;\r\n        if (this.cacheContent) {\r\n            var cacheBox = new Box();\r\n            cacheBox.cacheAs = \"normal\";\r\n            cacheBox.pos((this._isVertical ? 0 : startY) * cellWidth, (this._isVertical ? startY : 0) * cellHeight);\r\n            this._content.addChild(cacheBox);\r\n            box = cacheBox;\r\n        }\r\n        else {\r\n            var arr = [];\r\n            for (var i = this._cells.length - 1; i > -1; i--) {\r\n                var item = this._cells[i];\r\n                item.removeSelf();\r\n                arr.push(item);\r\n            }\r\n            this._cells.length = 0;\r\n        }\r\n        for (var k = startY; k < numY; k++) {\r\n            for (var l = 0; l < numX; l++) {\r\n                if (arr && arr.length) {\r\n                    cell = arr.pop();\r\n                }\r\n                else {\r\n                    cell = this.createItem();\r\n                }\r\n                cell.x = (this._isVertical ? l : k) * cellWidth - box._x;\r\n                cell.y = (this._isVertical ? k : l) * cellHeight - box._y;\r\n                cell.name = \"item\" + (k * numX + l);\r\n                box.addChild(cell);\r\n                this.addCell(cell);\r\n            }\r\n        }\r\n    }\r\n    createItem() {\r\n        var arr = [];\r\n        if (typeof (this._itemRender) == \"function\") {\r\n            var box = new this._itemRender();\r\n        }\r\n        else {\r\n            box = SceneUtils.createComp(this._itemRender, null, null, arr);\r\n        }\r\n        if (arr.length == 0 && box[\"_watchMap\"]) {\r\n            var watchMap = box[\"_watchMap\"];\r\n            for (var name in watchMap) {\r\n                var a = watchMap[name];\r\n                for (var i = 0; i < a.length; i++) {\r\n                    var watcher = a[i];\r\n                    arr.push(watcher.comp, watcher.prop, watcher.value);\r\n                }\r\n            }\r\n        }\r\n        if (arr.length)\r\n            box[\"_$bindData\"] = arr;\r\n        return box;\r\n    }\r\n    addCell(cell) {\r\n        cell.on(Event.CLICK, this, this.onCellMouse);\r\n        cell.on(Event.RIGHT_CLICK, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_OVER, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_OUT, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_DOWN, this, this.onCellMouse);\r\n        cell.on(Event.MOUSE_UP, this, this.onCellMouse);\r\n        this._cells.push(cell);\r\n    }\r\n    _afterInited() {\r\n        this.initItems();\r\n    }\r\n    initItems() {\r\n        if (!this._itemRender && this.getChildByName(\"item0\") != null) {\r\n            this.repeatX = 1;\r\n            var count;\r\n            count = 0;\r\n            for (var i = 0; i < 10000; i++) {\r\n                var cell = this.getChildByName(\"item\" + i);\r\n                if (cell) {\r\n                    this.addCell(cell);\r\n                    count++;\r\n                    continue;\r\n                }\r\n                break;\r\n            }\r\n            this.repeatY = count;\r\n        }\r\n    }\r\n    setContentSize(width, height) {\r\n        this._content.width = width;\r\n        this._content.height = height;\r\n        if (this._scrollBar || this._offset.x != 0 || this._offset.y != 0) {\r\n            this._content._style.scrollRect || (this._content.scrollRect = Rectangle.create());\r\n            this._content._style.scrollRect.setTo(-this._offset.x, -this._offset.y, width, height);\r\n            this._content.scrollRect = this._content.scrollRect;\r\n        }\r\n        this.event(Event.RESIZE);\r\n    }\r\n    onCellMouse(e) {\r\n        if (e.type === Event.MOUSE_DOWN)\r\n            this._isMoved = false;\r\n        var cell = e.currentTarget;\r\n        var index = this._startIndex + this._cells.indexOf(cell);\r\n        if (index < 0)\r\n            return;\r\n        if (e.type === Event.CLICK || e.type === Event.RIGHT_CLICK) {\r\n            if (this.selectEnable && !this._isMoved)\r\n                this.selectedIndex = index;\r\n            else\r\n                this.changeCellState(cell, true, 0);\r\n        }\r\n        else if ((e.type === Event.MOUSE_OVER || e.type === Event.MOUSE_OUT) && this._selectedIndex !== index) {\r\n            this.changeCellState(cell, e.type === Event.MOUSE_OVER, 0);\r\n        }\r\n        this.mouseHandler && this.mouseHandler.runWith([e, index]);\r\n    }\r\n    changeCellState(cell, visible, index) {\r\n        var selectBox = cell.getChildByName(\"selectBox\");\r\n        if (selectBox) {\r\n            this.selectEnable = true;\r\n            selectBox.visible = visible;\r\n            selectBox.index = index;\r\n        }\r\n    }\r\n    _sizeChanged() {\r\n        super._sizeChanged();\r\n        this.setContentSize(this.width, this.height);\r\n        if (this._scrollBar)\r\n            this.callLater(this.onScrollBarChange);\r\n    }\r\n    onScrollBarChange(e = null) {\r\n        this.runCallLater(this.changeCells);\r\n        var scrollValue = this._scrollBar.value;\r\n        var lineX = (this._isVertical ? this.repeatX : this.repeatY);\r\n        var lineY = (this._isVertical ? this.repeatY : this.repeatX);\r\n        var scrollLine = Math.floor(scrollValue / this._cellSize);\r\n        if (!this.cacheContent) {\r\n            var index = scrollLine * lineX;\r\n            var num = 0;\r\n            let down = true;\r\n            var toIndex = 0;\r\n            if (index > this._startIndex) {\r\n                num = index - this._startIndex;\r\n                toIndex = this._startIndex + lineX * (lineY + 1);\r\n                this._isMoved = true;\r\n            }\r\n            else if (index < this._startIndex) {\r\n                num = this._startIndex - index;\r\n                down = false;\r\n                toIndex = this._startIndex - 1;\r\n                this._isMoved = true;\r\n            }\r\n            for (var i = 0; i < num; i++) {\r\n                if (down) {\r\n                    var cell = this._cells.shift();\r\n                    this._cells[this._cells.length] = cell;\r\n                    var cellIndex = toIndex + i;\r\n                }\r\n                else {\r\n                    cell = this._cells.pop();\r\n                    this._cells.unshift(cell);\r\n                    cellIndex = toIndex - i;\r\n                }\r\n                var pos = Math.floor(cellIndex / lineX) * this._cellSize;\r\n                this._isVertical ? cell.y = pos : cell.x = pos;\r\n                this.renderItem(cell, cellIndex);\r\n            }\r\n            this._startIndex = index;\r\n            this.changeSelectStatus();\r\n        }\r\n        else {\r\n            num = (lineY + 1);\r\n            if (this._createdLine - scrollLine < num) {\r\n                this._createItems(this._createdLine, lineX, this._createdLine + num);\r\n                this.renderItems(this._createdLine * lineX, 0);\r\n                this._createdLine += num;\r\n            }\r\n        }\r\n        var r = this._content._style.scrollRect;\r\n        if (this._isVertical) {\r\n            r.y = scrollValue - this._offset.y;\r\n            r.x = -this._offset.x;\r\n        }\r\n        else {\r\n            r.y = -this._offset.y;\r\n            r.x = scrollValue - this._offset.x;\r\n        }\r\n        this._content.scrollRect = r;\r\n    }\r\n    posCell(cell, cellIndex) {\r\n        if (!this._scrollBar)\r\n            return;\r\n        var lineX = (this._isVertical ? this.repeatX : this.repeatY);\r\n        var pos = Math.floor(cellIndex / lineX) * this._cellSize;\r\n        this._isVertical ? cell._y = pos : cell.x = pos;\r\n    }\r\n    get selectedIndex() {\r\n        return this._selectedIndex;\r\n    }\r\n    set selectedIndex(value) {\r\n        if (this._selectedIndex != value) {\r\n            this._selectedIndex = value;\r\n            this.changeSelectStatus();\r\n            this.event(Event.CHANGE);\r\n            this.selectHandler && this.selectHandler.runWith(value);\r\n            this.startIndex = this._startIndex;\r\n        }\r\n    }\r\n    changeSelectStatus() {\r\n        for (var i = 0, n = this._cells.length; i < n; i++) {\r\n            this.changeCellState(this._cells[i], this._selectedIndex === this._startIndex + i, 1);\r\n        }\r\n    }\r\n    get selectedItem() {\r\n        if (!this._array)\r\n            return null;\r\n        return this._selectedIndex != -1 ? this._array[this._selectedIndex] : null;\r\n    }\r\n    set selectedItem(value) {\r\n        this._array && (this.selectedIndex = this._array.indexOf(value));\r\n    }\r\n    get selection() {\r\n        return this.getCell(this._selectedIndex);\r\n    }\r\n    set selection(value) {\r\n        this.selectedIndex = this._startIndex + this._cells.indexOf(value);\r\n    }\r\n    get startIndex() {\r\n        return this._startIndex;\r\n    }\r\n    set startIndex(value) {\r\n        this._startIndex = value > 0 ? value : 0;\r\n        this.callLater(this.renderItems);\r\n    }\r\n    renderItems(from = 0, to = 0) {\r\n        for (var i = from, n = to || this._cells.length; i < n; i++) {\r\n            this.renderItem(this._cells[i], this._startIndex + i);\r\n        }\r\n        this.changeSelectStatus();\r\n    }\r\n    renderItem(cell, index) {\r\n        if (this._array && index >= 0 && index < this._array.length) {\r\n            cell.visible = true;\r\n            if (cell[\"_$bindData\"]) {\r\n                cell[\"_dataSource\"] = this._array[index];\r\n                this._bindData(cell, this._array[index]);\r\n            }\r\n            else\r\n                cell.dataSource = this._array[index];\r\n            if (!this.cacheContent) {\r\n                this.posCell(cell, index);\r\n            }\r\n            if (this.hasListener(Event.RENDER))\r\n                this.event(Event.RENDER, [cell, index]);\r\n            if (this.renderHandler)\r\n                this.renderHandler.runWith([cell, index]);\r\n        }\r\n        else {\r\n            cell.visible = false;\r\n            cell.dataSource = null;\r\n        }\r\n    }\r\n    _bindData(cell, data) {\r\n        var arr = cell._$bindData;\r\n        for (var i = 0, n = arr.length; i < n; i++) {\r\n            var ele = arr[i++];\r\n            var prop = arr[i++];\r\n            var value = arr[i];\r\n            var fun = UIUtils.getBindFun(value);\r\n            ele[prop] = fun.call(this, data);\r\n        }\r\n    }\r\n    get array() {\r\n        return this._array;\r\n    }\r\n    set array(value) {\r\n        this.runCallLater(this.changeCells);\r\n        this._array = value || [];\r\n        this._preLen = this._array.length;\r\n        var length = this._array.length;\r\n        this.totalPage = Math.ceil(length / (this.repeatX * this.repeatY));\r\n        this._selectedIndex = this._selectedIndex < length ? this._selectedIndex : length - 1;\r\n        this.startIndex = this._startIndex;\r\n        if (this._scrollBar) {\r\n            this._scrollBar.stopScroll();\r\n            var numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            var numY = this._isVertical ? this.repeatY : this.repeatX;\r\n            var lineCount = Math.ceil(length / numX);\r\n            var total = this._cellOffset > 0 ? this.totalPage + 1 : this.totalPage;\r\n            if (total > 1 && lineCount >= numY) {\r\n                this._scrollBar.scrollSize = this._cellSize;\r\n                this._scrollBar.thumbPercent = numY / lineCount;\r\n                this._scrollBar.setScroll(0, (lineCount - numY) * this._cellSize + this._cellOffset, this._scrollBar.value);\r\n                this._scrollBar.target = this._content;\r\n            }\r\n            else {\r\n                this._scrollBar.setScroll(0, 0, 0);\r\n                this._scrollBar.target = this._content;\r\n            }\r\n        }\r\n    }\r\n    updateArray(array) {\r\n        this._array = array;\r\n        if (this._array) {\r\n            let freshStart = this._preLen - this._startIndex;\r\n            if (freshStart >= 0)\r\n                this.renderItems(freshStart);\r\n            this._preLen = this._array.length;\r\n        }\r\n        if (this._scrollBar) {\r\n            var length = array.length;\r\n            var numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            var numY = this._isVertical ? this.repeatY : this.repeatX;\r\n            var lineCount = Math.ceil(length / numX);\r\n            if (lineCount >= numY) {\r\n                this._scrollBar.thumbPercent = numY / lineCount;\r\n                this._scrollBar.slider[\"_max\"] = (lineCount - numY) * this._cellSize + this._cellOffset;\r\n            }\r\n        }\r\n    }\r\n    get page() {\r\n        return this._page;\r\n    }\r\n    set page(value) {\r\n        this._page = value;\r\n        if (this._array) {\r\n            this._page = value > 0 ? value : 0;\r\n            this._page = this._page < this.totalPage ? this._page : this.totalPage - 1;\r\n            this.startIndex = this._page * this.repeatX * this.repeatY;\r\n        }\r\n    }\r\n    get length() {\r\n        return this._array ? this._array.length : 0;\r\n    }\r\n    set dataSource(value) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.selectedIndex = parseInt(value);\r\n        else if (value instanceof Array)\r\n            this.array = value;\r\n        else\r\n            super.dataSource = value;\r\n    }\r\n    get dataSource() {\r\n        return super.dataSource;\r\n    }\r\n    get cells() {\r\n        this.runCallLater(this.changeCells);\r\n        return this._cells;\r\n    }\r\n    get elasticEnabled() {\r\n        return this._elasticEnabled;\r\n    }\r\n    set elasticEnabled(value) {\r\n        this._elasticEnabled = value;\r\n        if (this._scrollBar) {\r\n            this._scrollBar.elasticDistance = value ? 200 : 0;\r\n        }\r\n    }\r\n    refresh() {\r\n        this.array = this._array;\r\n    }\r\n    getItem(index) {\r\n        if (!this._array)\r\n            return null;\r\n        if (index > -1 && index < this._array.length) {\r\n            return this._array[index];\r\n        }\r\n        return null;\r\n    }\r\n    changeItem(index, source) {\r\n        if (index > -1 && this._array && index < this._array.length) {\r\n            this._array[index] = source;\r\n            if (index >= this._startIndex && index < this._startIndex + this._cells.length) {\r\n                this.renderItem(this.getCell(index), index);\r\n            }\r\n        }\r\n    }\r\n    setItem(index, source) {\r\n        this.changeItem(index, source);\r\n    }\r\n    addItem(source) {\r\n        if (!this.array) {\r\n            this.array = [source];\r\n        }\r\n        else {\r\n            this._array.push(source);\r\n        }\r\n        this.array = this._array;\r\n    }\r\n    addItemAt(souce, index) {\r\n        this._array.splice(index, 0, souce);\r\n        this.array = this._array;\r\n    }\r\n    deleteItem(index) {\r\n        if (this._array) {\r\n            this._array.splice(index, 1);\r\n            this.array = this._array;\r\n        }\r\n    }\r\n    getCell(index) {\r\n        this.runCallLater(this.changeCells);\r\n        if (index > -1 && this._cells) {\r\n            return this._cells[(index - this._startIndex) % this._cells.length];\r\n        }\r\n        return null;\r\n    }\r\n    scrollTo(index) {\r\n        if (this._scrollBar) {\r\n            var numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            this._scrollBar.value = Math.floor(index / numX) * this._cellSize;\r\n        }\r\n        else {\r\n            this.startIndex = index;\r\n        }\r\n    }\r\n    tweenTo(index, time = 200, complete = null) {\r\n        if (this._scrollBar) {\r\n            this._scrollBar.stopScroll();\r\n            var numX = this._isVertical ? this.repeatX : this.repeatY;\r\n            Tween.to(this._scrollBar, { value: Math.floor(index / numX) * this._cellSize }, time, null, complete, 0, true);\r\n        }\r\n        else {\r\n            this.startIndex = index;\r\n            if (complete)\r\n                complete.run();\r\n        }\r\n    }\r\n    _setCellChanged() {\r\n        if (!this._cellChanged) {\r\n            this._cellChanged = true;\r\n            this.callLater(this.changeCells);\r\n        }\r\n    }\r\n    commitMeasure() {\r\n        this.runCallLater(this.changeCells);\r\n    }\r\n}\r\nILaya.regClass(List);\r\nClassUtils.regClass(\"laya.ui.List\", List);\r\nClassUtils.regClass(\"Laya.List\", List);\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/Box.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/IRender.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/IItem.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/ScrollBar.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/VScrollBar.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/HScrollBar.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/Clip.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/ui/UIUtils.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/display/Node.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/maths/Rectangle.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Handler.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/SceneUtils.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/Tween.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/ILaya.ts",
    "F:/ProjectsWorks/font_game_2.10/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2.10/.rpt2_cache/placeholder/laya/ui/List.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Box } from \"./Box\";\r\nimport { IRender } from \"./IRender\";\r\nimport { IItem } from \"./IItem\";\r\nimport { ScrollBar } from \"./ScrollBar\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class List extends Box implements IRender, IItem {\r\n    selectHandler: Handler | null;\r\n    renderHandler: Handler | null;\r\n    mouseHandler: Handler | null;\r\n    selectEnable: boolean;\r\n    totalPage: number;\r\n    _$componentType: string;\r\n    protected _content: Box;\r\n    protected _scrollBar: ScrollBar | null;\r\n    protected _itemRender: any;\r\n    protected _repeatX: number;\r\n    protected _repeatY: number;\r\n    protected _repeatX2: number;\r\n    protected _repeatY2: number;\r\n    protected _spaceX: number;\r\n    protected _spaceY: number;\r\n    protected _cells: Box[];\r\n    protected _array: any[] | null;\r\n    protected _startIndex: number;\r\n    protected _selectedIndex: number;\r\n    protected _page: number;\r\n    protected _isVertical: boolean;\r\n    protected _cellSize: number;\r\n    protected _cellOffset: number;\r\n    protected _isMoved: boolean;\r\n    cacheContent: boolean;\r\n    protected _createdLine: number;\r\n    protected _cellChanged: boolean;\r\n    protected _offset: Point;\r\n    protected _usedCache: string | null;\r\n    protected _elasticEnabled: boolean;\r\n    destroy(destroyChild?: boolean): void;\r\n    protected createChildren(): void;\r\n    cacheAs: string;\r\n    private onScrollStart;\r\n    private onScrollEnd;\r\n    readonly content: Box;\r\n    vScrollBarSkin: string;\r\n    private _removePreScrollBar;\r\n    hScrollBarSkin: string;\r\n    scrollBar: ScrollBar | null;\r\n    itemRender: any;\r\n    width: number;\r\n    height: number;\r\n    repeatX: number;\r\n    repeatY: number;\r\n    spaceX: number;\r\n    spaceY: number;\r\n    protected changeCells(): void;\r\n    private _getOneCell;\r\n    private _createItems;\r\n    protected createItem(): Box;\r\n    protected addCell(cell: Box): void;\r\n    _afterInited(): void;\r\n    initItems(): void;\r\n    setContentSize(width: number, height: number): void;\r\n    protected onCellMouse(e: Event): void;\r\n    protected changeCellState(cell: Box, visible: boolean, index: number): void;\r\n    protected _sizeChanged(): void;\r\n    protected onScrollBarChange(e?: Event | null): void;\r\n    private posCell;\r\n    selectedIndex: number;\r\n    protected changeSelectStatus(): void;\r\n    selectedItem: any;\r\n    selection: Box;\r\n    startIndex: number;\r\n    protected renderItems(from?: number, to?: number): void;\r\n    protected renderItem(cell: Box, index: number): void;\r\n    private _bindData;\r\n    array: any[];\r\n    private _preLen;\r\n    updateArray(array: any[]): void;\r\n    page: number;\r\n    readonly length: number;\r\n    dataSource: any;\r\n    readonly cells: Box[];\r\n    elasticEnabled: boolean;\r\n    refresh(): void;\r\n    getItem(index: number): any;\r\n    changeItem(index: number, source: any): void;\r\n    setItem(index: number, source: any): void;\r\n    addItem(source: any): void;\r\n    addItemAt(souce: any, index: number): void;\r\n    deleteItem(index: number): void;\r\n    getCell(index: number): Box | null;\r\n    scrollTo(index: number): void;\r\n    tweenTo(index: number, time?: number, complete?: Handler | null): void;\r\n    protected _setCellChanged(): void;\r\n    protected commitMeasure(): void;\r\n}\r\n"
  }
}

{
  "code": "import MapFontInfo from \"../model/MapFontInfo\";\r\nimport StartGame from \"../prefeb/StartGame\";\r\nimport SceneBase from \"./SceneBase\";\r\nimport FontGrid from \"../prefeb/FontGrid\";\r\nimport PlayerController from \"../controller/PlayerController\";\r\nimport GameResult from \"../prefeb/GameResult\";\r\nimport AppConfig from \"../../AppConfig\";\r\nimport TipController from \"../controller/TipController\";\r\nimport ControllerMgr from \"../controller/ControllerMgr\";\r\nimport SoundTool from \"../tool/SoundTool\";\r\nimport GameSetting from \"../prefeb/GameSetting\";\r\nimport NativeBridgeAndroid from \"../tool/NativeBridgeAndroid\";\r\nimport { Image } from \"laya/ui/Image\";\r\nimport { Point } from \"laya/maths/Point\";\r\nimport { Laya } from \"Laya\";\r\nimport { Handler } from \"laya/utils/Handler\";\r\nimport { Event } from \"laya/events/Event\";\r\nimport { Pool } from \"laya/utils/Pool\";\r\nimport { Tween } from \"laya/utils/Tween\";\r\nimport { WxMiniUtil } from \"../tool/WxMiniUtil\";\r\nimport { TTMiniUtils } from \"../tool/TTMiniUtil\";\r\nvar GameState;\r\n(function (GameState) {\r\n    GameState[GameState[\"End\"] = 0] = \"End\";\r\n    GameState[GameState[\"Pause\"] = 1] = \"Pause\";\r\n    GameState[GameState[\"Playing\"] = 2] = \"Playing\";\r\n    GameState[GameState[\"init\"] = 3] = \"init\";\r\n    GameState[GameState[\"EffectPause\"] = 4] = \"EffectPause\";\r\n})(GameState || (GameState = {}));\r\nexport default class MainGameScene extends SceneBase {\r\n    constructor() {\r\n        super();\r\n        this._fonts = [];\r\n        this._sysDropingFontInfos = [];\r\n        this._sysDispelFontInfoStack = [];\r\n        this._startPoint = new Point(2, 0);\r\n        this._maxTickTime = 75;\r\n        this._sysTickTime = 0;\r\n        this._maxSysTickTime = 16;\r\n        this._words = [];\r\n        this._splitFontWords = [];\r\n        this._splitGroupWords = [];\r\n        this._minWordsLength = 5;\r\n        this._isMouseDown = false;\r\n        this._isQuickDrop = false;\r\n        this._score = 0;\r\n        this._debugMode = false;\r\n        this._debugFonts = [\r\n            null, null, null, null, null,\r\n            null, null, null, null, null,\r\n            null, null, null, null, null,\r\n            null, null, null, null, null,\r\n            null, null, null, null, null,\r\n            null, null, null, null, null,\r\n            null, null, null, null, null,\r\n            \"氵\", null, \"穴\", \"宀\", null,\r\n        ];\r\n        this._debugDropFonts = [\"工\", \"工\"];\r\n        this._guideDropFonts = [];\r\n        this._cacheProperties = [\"heCiSplitTimes\", \"heCizuRate\", \"ciZuRate\", \"_score\", \"_popularGroup\", \"_guideRate\", \"buShouRate\"];\r\n        this._stuntFontsCheckArr1 = [];\r\n        this._stuntFontsCheckArr2 = [];\r\n        this._checkIds = [];\r\n        this._guideImgs = {};\r\n        this._guideRate = 0;\r\n        this.heCiSplitTimes = 1;\r\n        this.heCizuRate = 40;\r\n        this.hanZiRate = 60;\r\n        this.ciZuRate = 60;\r\n        this.randRate = 0;\r\n        this.buShouRate = 0;\r\n        this._playerEffectInd = 0;\r\n    }\r\n    onAwake() {\r\n        super.onAwake();\r\n        this.owner[\"height\"] = Laya.stage.height;\r\n        switch (AppConfig.platform) {\r\n            case \"wx\":\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (!AppConfig.hadGuidanceHz()) {\r\n            this._guideDropFonts = [\"讠\", \"成\", \"言\", \"亻\", \"文\", \"日\", \"月\"];\r\n            AppConfig.setGuidanceHz(true);\r\n        }\r\n        this.list_grids.renderHandler = Handler.create(this, this.onGridRender, null, false);\r\n        this._myPlayerInfo = ControllerMgr.getInstance(PlayerController).myPlayerInfo;\r\n        this.btn_pauseOrStart.on(Event.CLICK, this, this.onPauseOrStartMouseEvent);\r\n        this.btn_setting.on(Event.CLICK, this, this.onSettingMouseEvent);\r\n        this.btn_point.on(Event.CLICK, this, this.onPointMouseEvent);\r\n        this.btn_wanneng.on(Event.CLICK, this, this.onWannengMouseEvent);\r\n        this.btn_vedio.on(Event.CLICK, this, this.onStopMouseEvent);\r\n        this.btn_vedio1.on(Event.CLICK, this, this.onGoShareMouseEvent);\r\n        if (!AppConfig.hadGuidance()) {\r\n            this.btn_point.visible = false;\r\n        }\r\n        if (AppConfig.platform == \"tt\") {\r\n            Laya.timer.once(500, this, function () {\r\n                TTMiniUtils.startGameRecorder();\r\n            });\r\n        }\r\n        this.changeGameStatue(GameState.init);\r\n        this.refresh();\r\n    }\r\n    onStopMouseEvent(e) {\r\n        this.btn_vedio.visible = false;\r\n        this.btn_vedio.disabled = true;\r\n        this.btn_vedio1.visible = true;\r\n        this.btn_vedio1.disabled = false;\r\n        TTMiniUtils.stopGameRecorder();\r\n    }\r\n    onGoShareMouseEvent(e) {\r\n        this.btn_vedio1.visible = false;\r\n        this.btn_vedio1.disabled = true;\r\n        TTMiniUtils.shareGameRecorder(Handler.create(this, this.onShareGameRecordComple));\r\n    }\r\n    onShareGameRecordComple(data) {\r\n        if (data != \"true\") {\r\n            ControllerMgr.getInstance(TipController).showCenterBottomTip(\"录屏时长不足3秒,请重新录制\");\r\n        }\r\n        this.btn_vedio.visible = true;\r\n        this.btn_vedio.disabled = false;\r\n        Laya.timer.once(500, this, function () {\r\n            TTMiniUtils.startGameRecorder();\r\n        });\r\n    }\r\n    onWannengMouseEvent(e) {\r\n        WxMiniUtil.showRewardedVideo(Handler.create(this, this.onWannengComple));\r\n    }\r\n    onWannengComple() {\r\n        if (this._myPlayerInfo.wannengUseTimes > 0) {\r\n            let callBk = () => {\r\n                this.changeGameStatue(GameState.Playing);\r\n                this._nextDropingFontInfo = MapFontInfo.create({ text: \"*\" });\r\n                this._myPlayerInfo.wannengUseTimes--;\r\n                this.randRate = -2;\r\n                this.refresh();\r\n            };\r\n            if (AppConfig.isNative) {\r\n                this.changeGameStatue(GameState.Pause);\r\n                NativeBridgeAndroid.showVedioAd(callBk);\r\n            }\r\n            else {\r\n                callBk();\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    onCPComple(data) {\r\n        let callBk = () => {\r\n            this.changeGameStatue(GameState.Playing);\r\n            if (data == \"true1\") {\r\n                this.randRate = -5;\r\n                this._nextDropingFontInfo = MapFontInfo.create({ text: \"*\" });\r\n            }\r\n            else if (data == \"true2\") {\r\n                this.randRate = -5;\r\n                this._myPlayerInfo.guideRemainTimes = 2;\r\n            }\r\n            else {\r\n                this.randRate = 0;\r\n            }\r\n            this.refresh();\r\n        };\r\n        if (AppConfig.isNative) {\r\n            this.changeGameStatue(GameState.Pause);\r\n            NativeBridgeAndroid.showVedioAd(callBk);\r\n        }\r\n        else {\r\n            callBk();\r\n        }\r\n        return;\r\n    }\r\n    onPointMouseEvent(e) {\r\n        WxMiniUtil.showRewardedVideo(Handler.create(this, this.onPointComple));\r\n    }\r\n    onPointComple() {\r\n        if (this._myPlayerInfo.guideRemainTimes > 0) {\r\n            return;\r\n        }\r\n        if (this._myPlayerInfo.guideUseTimes > 0) {\r\n            let callBk = () => {\r\n                this.changeGameStatue(GameState.Playing);\r\n                this._myPlayerInfo.guideRemainTimes = 3;\r\n                this._myPlayerInfo.guideUseTimes--;\r\n                this.randRate = -2;\r\n                this.refresh();\r\n            };\r\n            if (AppConfig.isNative) {\r\n                this.changeGameStatue(GameState.Pause);\r\n                NativeBridgeAndroid.showVedioAd(callBk);\r\n            }\r\n            else {\r\n                callBk();\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    onSettingMouseEvent(e) {\r\n        this.changeGameStatue(GameState.Pause);\r\n        this.showGameSetting();\r\n    }\r\n    onPauseOrStartMouseEvent(e) {\r\n        if (this._gameState == GameState.Pause) {\r\n            this.changeGameStatue(GameState.Playing);\r\n        }\r\n        else {\r\n            let str = \"\";\r\n            for (let j = 0; j < this.list_grids.repeatY; j++) {\r\n                for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n                    if (this._fonts[i][j] == null) {\r\n                        str += \"null,\";\r\n                    }\r\n                    else {\r\n                        str += \"'\" + this._fonts[i][j].text + \"',\";\r\n                    }\r\n                }\r\n                str += \"\\n\";\r\n            }\r\n            console.log(str);\r\n            this.changeGameStatue(GameState.Pause);\r\n        }\r\n    }\r\n    showStartGame() {\r\n        let startGameSpr = Pool.getItemByCreateFun(\"StartGame\", this.prefab_startGame.create, this.prefab_startGame);\r\n        let startGameScript = startGameSpr.getComponent(StartGame);\r\n        startGameScript.handler = Handler.create(this, this.changeGameStatue, [GameState.Playing], false);\r\n        startGameScript.onShowRank = Handler.create(this, this.showRank, null, false);\r\n        this.addPopUp(\"StartGame\", startGameSpr, false, false, false);\r\n    }\r\n    showGameResult() {\r\n        let gameResultSpr = Pool.getItemByCreateFun(\"GameResult\", this.prefab_gameResult.create, this.prefab_gameResult);\r\n        let gameResultScript = gameResultSpr.getComponent(GameResult);\r\n        let storageObj = {\r\n            \"wxgame\": {\r\n                \"score\": this._score,\r\n                \"update_time\": Date.now()\r\n            },\r\n            \"score\": this._score\r\n        };\r\n        this._dataViewer.postMsg({\r\n            cmd: \"wx.setUserCloudStorage\",\r\n            data: storageObj\r\n        });\r\n        gameResultScript.comeBackTime = this._myPlayerInfo.comeBackTimes;\r\n        gameResultScript.score = this._score;\r\n        gameResultScript.showHomeHandler = Handler.create(this, this.changeGameStatue, [GameState.init], false);\r\n        gameResultScript.restartHandler = Handler.create(this, this.restart, null, false);\r\n        gameResultScript.showAdHandler = Handler.create(this, this.onShowAd, null, false);\r\n        this.addPopUp(\"GameResult\", gameResultSpr, false, false, false);\r\n    }\r\n    showGameSetting() {\r\n        let gameSettingSpr = Pool.getItemByCreateFun(\"GameSetting\", this.prefab_gameSetting.create, this.prefab_gameSetting);\r\n        let gameSettingScript = gameSettingSpr.getComponent(GameSetting);\r\n        gameSettingScript.onCloseHandler = Handler.create(this, this.changeGameStatue, [GameState.Playing], false);\r\n        gameSettingScript.showHomeHandler = Handler.create(this, this.changeGameStatue, [GameState.init], false);\r\n        gameSettingScript.restartHandler = Handler.create(this, this.restart, null, false);\r\n        this.addPopUp(\"gameSetting\", gameSettingSpr, false, false, false);\r\n    }\r\n    onShowAd() {\r\n        if (AppConfig.platform == \"android\") {\r\n            NativeBridgeAndroid.showVedioAd(() => {\r\n                this.continueAfterAd();\r\n            });\r\n        }\r\n        else if (AppConfig.platform == \"tt\") {\r\n            this.continueAfterAd();\r\n        }\r\n        else {\r\n            this.continueAfterAd();\r\n        }\r\n    }\r\n    continueAfterAd() {\r\n        this.hidePopUp();\r\n        SoundTool.playXiaoChuEffect();\r\n        this.playEffectInc();\r\n        let time = 0;\r\n        let score = 0;\r\n        for (let j = this.list_grids.repeatY; j > this.list_grids.repeatY - 6; j--) {\r\n            for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n                let tempFontScript = this.getFontScript(i, j);\r\n                if (tempFontScript) {\r\n                    tempFontScript.playHeChengEffect();\r\n                }\r\n                let tempFont = this.getFontInfo(i, j);\r\n                if (tempFont != null) {\r\n                    time++;\r\n                    this.dispelFont(tempFont);\r\n                    if (tempFont.isStuntFont) {\r\n                        this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        score += (time * 10);\r\n        this._myPlayerInfo.comeBackTimes--;\r\n        this._score += score;\r\n        Laya.timer.once(1100, this, function () {\r\n            this.setDispelText(\"*\");\r\n            this.renderGridList();\r\n            this.updateScore();\r\n            this.setStar(this._myPlayerInfo.getStarInfo(this._score).star_num);\r\n        });\r\n        Laya.timer.once(1400, this, function () {\r\n            this.endEffectInc();\r\n        });\r\n    }\r\n    restart() {\r\n        localStorage.setItem(\"StorageVersion\", null);\r\n        localStorage.setItem(\"CacheData_1\", null);\r\n        this._gameState = GameState.End;\r\n        this.changeGameStatue(GameState.Playing);\r\n    }\r\n    changeGameStatue(gameState, nextState = -1) {\r\n        switch (gameState) {\r\n            case GameState.End:\r\n                localStorage.setItem(\"CacheData_1\", null);\r\n                this.showGameResult();\r\n                if (AppConfig.isNative) {\r\n                    NativeBridgeAndroid.showBannerAd(true);\r\n                }\r\n                break;\r\n            case GameState.Playing:\r\n                if (AppConfig.isNative) {\r\n                    NativeBridgeAndroid.showBannerAd(false);\r\n                }\r\n                WxMiniUtil.hideBanner();\r\n                this.btn_pauseOrStart.skin = \"map/btn_pause.png\";\r\n                this.hidePopUp();\r\n                if (this._gameState != GameState.Pause && this._gameState != GameState.EffectPause) {\r\n                    let bool;\r\n                    try {\r\n                        bool = this.restoreAll();\r\n                    }\r\n                    catch (_a) {\r\n                        localStorage.setItem(\"CacheData_1\", null);\r\n                        bool = false;\r\n                    }\r\n                    if (!bool) {\r\n                        this._score = 0;\r\n                        for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n                            for (let j = 0; j < this.list_grids.repeatY; j++) {\r\n                                if (this._fonts[i] == null) {\r\n                                    this._fonts[i] = [];\r\n                                }\r\n                                if (this._debugMode) {\r\n                                    let txt = this._debugFonts[i + j * 5];\r\n                                    if (txt == null) {\r\n                                        this._fonts[i][j] = null;\r\n                                    }\r\n                                    else {\r\n                                        let tempFontInfo = MapFontInfo.create({ text: txt });\r\n                                        tempFontInfo.x = i;\r\n                                        tempFontInfo.y = j;\r\n                                        this._fonts[i][j] = tempFontInfo;\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    this._fonts[i][j] = null;\r\n                                }\r\n                            }\r\n                        }\r\n                        this._words = [];\r\n                        this._popularGroup = null;\r\n                        this._sysDispelFontInfoStack = [];\r\n                        this._sysDropingFontInfos = [];\r\n                        this._splitFontWords = [];\r\n                        this._splitGroupWords = [];\r\n                        this._dropingFontInfo = null;\r\n                        this._nextDropingFontInfo = null;\r\n                        this.heCiSplitTimes = 0;\r\n                        this.heCizuRate = 10;\r\n                        this.hanZiRate = 10;\r\n                        this.ciZuRate = 10;\r\n                        this._myPlayerInfo.wannengUseTimes = 4;\r\n                        this._myPlayerInfo.guideUseTimes = 4;\r\n                        this._myPlayerInfo.comeBackTimes = 1;\r\n                        this.refresh();\r\n                        this.renderGridList();\r\n                    }\r\n                }\r\n                break;\r\n            case GameState.Pause:\r\n                this.btn_pauseOrStart.skin = \"map/btn_start.png\";\r\n                break;\r\n            case GameState.EffectPause:\r\n                break;\r\n            case GameState.init:\r\n                this.showStartGame();\r\n                if (AppConfig.isNative) {\r\n                    NativeBridgeAndroid.showBannerAd(true);\r\n                }\r\n                break;\r\n        }\r\n        this._gameState = gameState;\r\n        if (nextState != -1) {\r\n            this.changeGameStatue(nextState);\r\n        }\r\n    }\r\n    onGridRender(cell, index) {\r\n        let data = cell.dataSource;\r\n        let fontGridScrip = cell.getComponent(FontGrid);\r\n        if (data == null) {\r\n            fontGridScrip.font = null;\r\n            fontGridScrip.clearEffects();\r\n        }\r\n        else {\r\n            fontGridScrip.font = data.text;\r\n            fontGridScrip.addEffect(data.getStuntFontEffect());\r\n            fontGridScrip.quality = data.quality;\r\n        }\r\n    }\r\n    onStarRender(cell, index) {\r\n        let isShine = cell.dataSource;\r\n        if (isShine) {\r\n            cell.skin = \"map/img_star.png\";\r\n        }\r\n        else {\r\n            cell.skin = \"map/img_starBg.png\";\r\n        }\r\n    }\r\n    onMouseDown() {\r\n        if (this._gameState == GameState.Playing) {\r\n            this._mouseDownPoint = new Point(Laya.stage.mouseX, Laya.stage.mouseY);\r\n            this._isQuickDrop = false;\r\n        }\r\n    }\r\n    onMouseUp() {\r\n        if (this._gameState == GameState.Playing) {\r\n            if (this._mouseDownPoint == null) {\r\n                return;\r\n            }\r\n            let absX = Math.abs(Laya.stage.mouseX - this._mouseDownPoint.x);\r\n            let absY = Laya.stage.mouseY - this._mouseDownPoint.y;\r\n            if (absX > 10) {\r\n                if (absY > absX * 2.5) {\r\n                    this._isQuickDrop = true;\r\n                    SoundTool.playXiaHuaEffect();\r\n                }\r\n                else {\r\n                    this.moveDropingFont(Laya.stage.mouseX < this._mouseDownPoint.x);\r\n                    SoundTool.playYiDongEffect();\r\n                }\r\n            }\r\n            else if (absY > 25) {\r\n                this._isQuickDrop = true;\r\n                SoundTool.playXiaHuaEffect();\r\n            }\r\n            this._mouseDownPoint = null;\r\n        }\r\n    }\r\n    onEnable() {\r\n    }\r\n    onDisable() {\r\n        if (this._gameState == GameState.Playing)\r\n            this.changeGameStatue(GameState.Pause);\r\n    }\r\n    getGuideSpeedRate() {\r\n        let sppedrate = 100;\r\n        if (!AppConfig.hadGuidance()) {\r\n            if (this._score < 1500) {\r\n                sppedrate = 120;\r\n            }\r\n        }\r\n        return sppedrate;\r\n    }\r\n    onUpdate() {\r\n        if (this._gameState == GameState.Playing) {\r\n            let isEditList = false;\r\n            this.updatePopularGroup();\r\n            if (this._sysDropingFontInfos.length > 0) {\r\n                if (this._sysTickTime > 0) {\r\n                    this._sysTickTime--;\r\n                }\r\n                else {\r\n                    this._sysTickTime = this._maxSysTickTime;\r\n                    let sysDelArr = [];\r\n                    if (this._sysDropingFontInfos.length == this._sysDispelFontInfoStack.length) {\r\n                        this._sysDropingFontInfos = [];\r\n                        if (!this.invokeStuntFont()) {\r\n                            this.dispelCiZu(this._sysDispelFontInfoStack);\r\n                            this._sysDispelFontInfoStack.forEach(element => {\r\n                                if (this.getFontInfo(element.x, element.y) != element) {\r\n                                    return;\r\n                                }\r\n                                this.dispel(element.x, element.y);\r\n                            });\r\n                            this.checkSysDropFonts();\r\n                            this._sysDispelFontInfoStack = [];\r\n                        }\r\n                    }\r\n                    else {\r\n                        isEditList = true;\r\n                        this._sysDropingFontInfos.forEach(element => {\r\n                            if (this._sysDispelFontInfoStack.indexOf(element) != -1) {\r\n                                return;\r\n                            }\r\n                            if (this._fonts[element.x][element.y + 1] == null && element.y + 1 < this.list_grids.repeatY) {\r\n                                this.changeDropFontTo(element.x, element.y + 1, element);\r\n                            }\r\n                            else {\r\n                                this._sysDispelFontInfoStack.push(element);\r\n                                isEditList = true;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (this._score > 1200 && this.btn_point.visible == false) {\r\n                    this.btn_point.visible = true;\r\n                }\r\n                if (this._tickTime > 0) {\r\n                    if (this._isQuickDrop && this._tickTime > 1)\r\n                        this._tickTime = 1;\r\n                    this._tickTime--;\r\n                }\r\n                else {\r\n                    this._tickTime = (100 - this._myPlayerInfo.getStarInfo(this._score).speed_rate) * this._maxTickTime / 100 * this.getGuideSpeedRate() / 100;\r\n                    if (this._score > 1000) {\r\n                        AppConfig.setGuidance(true);\r\n                    }\r\n                    if (this._dropingFontInfo == null) {\r\n                        this._isQuickDrop = false;\r\n                        if (this._fonts[this._startPoint.x][this._startPoint.y] != null) {\r\n                            this.changeGameStatue(GameState.End);\r\n                            return;\r\n                        }\r\n                        else {\r\n                            if (this._nextDropingFontInfo != null && this._nextDropingFontInfo.text == \"*\") {\r\n                                this._dropingFontInfo = MapFontInfo.create({ text: \"*\" });\r\n                                this._dropingFontInfo.isStuntFont = false;\r\n                                this._nextDropingFontInfo = null;\r\n                            }\r\n                            else {\r\n                                this.randomNextFont();\r\n                                this._dropingFontInfo = MapFontInfo.create({ id: this._nextDropingFontInfo.id });\r\n                                this._dropingFontInfo.isStuntFont = this._nextDropingFontInfo.isStuntFont;\r\n                            }\r\n                            this.guideToGrid();\r\n                            this.setDispelText(this._dropingFontInfo.text);\r\n                            this.updateNextDropingFont();\r\n                            this._dropingFontInfo.x = this._startPoint.x;\r\n                            this._dropingFontInfo.y = this._startPoint.y;\r\n                            this._fonts[this._dropingFontInfo.x][this._dropingFontInfo.y] = this._dropingFontInfo;\r\n                            isEditList = true;\r\n                            this.cacheAll();\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this._isQuickDrop)\r\n                            this._tickTime = 1;\r\n                        if (this._dropingFontInfo != null) {\r\n                            if (this._fonts[this._dropingFontInfo.x][this._dropingFontInfo.y + 1] == null && this._dropingFontInfo.y + 1 < this.list_grids.repeatY) {\r\n                                this.changeDropFontTo(this._dropingFontInfo.x, this._dropingFontInfo.y + 1, this._dropingFontInfo);\r\n                            }\r\n                            else {\r\n                                this._mouseDownPoint = null;\r\n                                this.destroyGuideImgs();\r\n                                let isDispel = false;\r\n                                let cout;\r\n                                cout = this.dispelCiZu([this._dropingFontInfo]);\r\n                                if (cout == true) {\r\n                                    isDispel = true;\r\n                                }\r\n                                cout = this.dispel(this._dropingFontInfo.x, this._dropingFontInfo.y);\r\n                                if (cout == true) {\r\n                                    isDispel = true;\r\n                                }\r\n                                this._dropingFontInfo = null;\r\n                            }\r\n                            isEditList = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEditList) {\r\n                this.renderGridList();\r\n            }\r\n        }\r\n    }\r\n    getAllFonts() {\r\n        let cout = [];\r\n        for (let i = 0; i < this._fonts.length; i++) {\r\n            for (let j = this._fonts[0].length - 1; j >= 0; j--) {\r\n                if (this._fonts[i][j] != null) {\r\n                    cout.push(this._fonts[i][j]);\r\n                }\r\n            }\r\n        }\r\n        return cout;\r\n    }\r\n    cacheAll() {\r\n        let obj = {};\r\n        this._cacheProperties.forEach(element => {\r\n            obj[element] = this[element];\r\n        });\r\n        obj.guideRemainTimes = this._myPlayerInfo.guideRemainTimes;\r\n        obj.guideUseTimes = this._myPlayerInfo.guideUseTimes;\r\n        obj.wannengUseTimes = this._myPlayerInfo.wannengUseTimes;\r\n        obj.comeBackTimes = this._myPlayerInfo.comeBackTimes;\r\n        obj._wordTexts = [];\r\n        this._words.forEach(element => {\r\n            obj._wordTexts.push({ text: element.text, isStuntFont: element.isStuntFont });\r\n        });\r\n        obj._splitFontWordTexts = [];\r\n        this._splitFontWords.forEach(element => {\r\n            obj._splitFontWordTexts.push({ text: element.text, isStuntFont: element.isStuntFont });\r\n        });\r\n        obj._splitGroupWordTexts = [];\r\n        this._splitGroupWords.forEach(element => {\r\n            obj._splitGroupWordTexts.push({ text: element.text, isStuntFont: element.isStuntFont });\r\n        });\r\n        if (this._dropingFontInfo != null)\r\n            obj._dropingFontInfoText = { text: this._dropingFontInfo.text, isStuntFont: this._dropingFontInfo.isStuntFont };\r\n        if (this._nextDropingFontInfo != null)\r\n            obj._nextDropingFontInfoText = { text: this._nextDropingFontInfo.text, isStuntFont: this._nextDropingFontInfo.isStuntFont };\r\n        obj._sysDispelFontInfoStackPoses = [];\r\n        this._sysDispelFontInfoStack.forEach(element => {\r\n            obj._sysDispelFontInfoStackPoses.push(new Point(element.x, element.y));\r\n        });\r\n        obj._sysDropingFontInfosPoses = [];\r\n        this._sysDropingFontInfos.forEach(element => {\r\n            obj._sysDropingFontInfosPoses.push(new Point(element.x, element.y));\r\n        });\r\n        obj._fontTexts = [];\r\n        for (let i = 0; i < this._fonts.length; i++) {\r\n            obj._fontTexts[i] = [];\r\n            for (let j = 0; j < this._fonts[i].length; j++) {\r\n                if (this._fonts[i][j] == null) {\r\n                    obj._fontTexts[i][j] = null;\r\n                }\r\n                else {\r\n                    obj._fontTexts[i][j] = { text: this._fonts[i][j].text, isStuntFont: this._fonts[i][j].isStuntFont };\r\n                }\r\n            }\r\n        }\r\n        localStorage.setItem(\"StorageVersion\", AppConfig.version);\r\n        localStorage.setItem(\"CacheData_1\", JSON.stringify(obj));\r\n    }\r\n    restoreAll() {\r\n        if (this._debugMode) {\r\n            return false;\r\n        }\r\n        let storageVersion = localStorage.getItem(\"StorageVersion\");\r\n        if (storageVersion == AppConfig.version) {\r\n            let dataStr = localStorage.getItem(\"CacheData_1\");\r\n            if (dataStr == null) {\r\n                return false;\r\n            }\r\n            try {\r\n                let restoreObj = JSON.parse(dataStr);\r\n                let tempFontInfo;\r\n                this._fonts = [];\r\n                for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n                    this._fonts[i] = [];\r\n                    for (let j = 0; j < this.list_grids.repeatY; j++) {\r\n                        if (restoreObj._fontTexts[i] == null || restoreObj._fontTexts[i][j] == null) {\r\n                            this._fonts[i][j] = null;\r\n                        }\r\n                        else {\r\n                            tempFontInfo = this._fonts[i][j] = MapFontInfo.create({ text: restoreObj._fontTexts[i][j].text });\r\n                            tempFontInfo.isStuntFont = restoreObj._fontTexts[i][j].isStuntFont;\r\n                            tempFontInfo.x = i;\r\n                            tempFontInfo.y = j;\r\n                        }\r\n                    }\r\n                }\r\n                this._cacheProperties.forEach(element => {\r\n                    this[element] = restoreObj[element];\r\n                });\r\n                this._words = [];\r\n                restoreObj._wordTexts.forEach(element => {\r\n                    tempFontInfo = MapFontInfo.create({ text: element.text });\r\n                    if (tempFontInfo.text == null)\r\n                        return;\r\n                    tempFontInfo.isStuntFont = element.isStuntFont;\r\n                    this._words.push(tempFontInfo);\r\n                });\r\n                this._splitFontWords = [];\r\n                restoreObj._splitFontWordTexts.forEach(element => {\r\n                    tempFontInfo = MapFontInfo.create({ text: element.text });\r\n                    if (tempFontInfo.text == null)\r\n                        return;\r\n                    tempFontInfo.isStuntFont = element.isStuntFont;\r\n                    this._splitFontWords.push(tempFontInfo);\r\n                });\r\n                this._myPlayerInfo.wannengUseTimes = restoreObj.wannengUseTimes;\r\n                this._myPlayerInfo.guideRemainTimes = restoreObj.guideRemainTimes;\r\n                this._myPlayerInfo.guideUseTimes = restoreObj.guideUseTimes;\r\n                this._myPlayerInfo.comeBackTimes = restoreObj.comeBackTimes;\r\n                this._splitGroupWords = [];\r\n                restoreObj._splitGroupWordTexts.forEach(element => {\r\n                    tempFontInfo = MapFontInfo.create({ text: element.text });\r\n                    if (tempFontInfo.text == null)\r\n                        return;\r\n                    tempFontInfo.isStuntFont = element.isStuntFont;\r\n                    this._splitGroupWords.push(tempFontInfo);\r\n                });\r\n                if (restoreObj._dropingFontInfoText != null) {\r\n                    this._dropingFontInfo = MapFontInfo.create({ text: restoreObj._dropingFontInfoText.text });\r\n                    if (this._dropingFontInfo.text == null) {\r\n                        return false;\r\n                    }\r\n                    this._dropingFontInfo.isStuntFont = restoreObj._dropingFontInfoText.isStuntFont;\r\n                    this.setDispelText(this._dropingFontInfo.text);\r\n                    this._dropingFontInfo.x = this._startPoint.x;\r\n                    this._dropingFontInfo.y = this._startPoint.y;\r\n                }\r\n                else {\r\n                    this.randomNextFont();\r\n                    this._dropingFontInfo = this._nextDropingFontInfo;\r\n                    this._nextDropingFontInfo = null;\r\n                }\r\n                if (restoreObj._nextDropingFontInfoText != null)\r\n                    this._nextDropingFontInfo = MapFontInfo.create({ text: restoreObj._nextDropingFontInfoText.text });\r\n                if (this._nextDropingFontInfo == null || this._nextDropingFontInfo.text == null) {\r\n                    this.randomNextFont();\r\n                }\r\n                else {\r\n                    this._nextDropingFontInfo.isStuntFont = restoreObj._nextDropingFontInfoText.isStuntFont;\r\n                }\r\n                this._sysDispelFontInfoStack = [];\r\n                restoreObj._sysDispelFontInfoStackPoses.forEach(element => {\r\n                    tempFontInfo = this.getFontInfo(element.x, element.y);\r\n                    if (tempFontInfo != null) {\r\n                        this._sysDispelFontInfoStack.push(tempFontInfo);\r\n                    }\r\n                });\r\n                this._sysDropingFontInfos = [];\r\n                restoreObj._sysDropingFontInfosPoses.forEach(element => {\r\n                    tempFontInfo = this.getFontInfo(element.x, element.y);\r\n                    if (tempFontInfo != null) {\r\n                        this._sysDropingFontInfos.push(tempFontInfo);\r\n                    }\r\n                });\r\n                this._tickTime = (100 - this._myPlayerInfo.getStarInfo(this._score).speed_rate) * this._maxTickTime / 100;\r\n                this.renderGridList();\r\n                this.refresh();\r\n                return true;\r\n            }\r\n            catch (error) {\r\n                localStorage.setItem(\"CacheData_1\", null);\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    moveDropingFont(left) {\r\n        if (this._dropingFontInfo == null) {\r\n            return;\r\n        }\r\n        let minTickTime = 0.3 * (100 - this._myPlayerInfo.getStarInfo(this._score).speed_rate) * this._maxTickTime / 100;\r\n        if (left) {\r\n            if (this._dropingFontInfo.x > 0 && this._fonts[this._dropingFontInfo.x - 1][this._dropingFontInfo.y] == null) {\r\n                this.changeDropFontTo(this._dropingFontInfo.x - 1, this._dropingFontInfo.y);\r\n                this._tickTime = this._tickTime > minTickTime ? this._tickTime : minTickTime;\r\n            }\r\n        }\r\n        else {\r\n            if (this._dropingFontInfo.x < this.list_grids.repeatX - 1 && this._fonts[this._dropingFontInfo.x + 1][this._dropingFontInfo.y] == null) {\r\n                this.changeDropFontTo(this._dropingFontInfo.x + 1, this._dropingFontInfo.y);\r\n                this._tickTime = this._tickTime > minTickTime ? this._tickTime : minTickTime;\r\n            }\r\n        }\r\n        this.renderGridList();\r\n    }\r\n    checkSysDropFonts() {\r\n        for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n            let isAdd = false;\r\n            for (let j = this.list_grids.repeatY - 1; j >= 0; j--) {\r\n                if (this._fonts[i][j] != null && (isAdd || (j + 1 < this.list_grids.repeatY && this._fonts[i][j + 1] == null))) {\r\n                    isAdd = true;\r\n                    if (this._sysDropingFontInfos.indexOf(this._fonts[i][j]) == -1)\r\n                        this._sysDropingFontInfos.push(this._fonts[i][j]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    changeDropFontTo(x, y, fontInfo = null) {\r\n        if (y < 0 || x < 0) {\r\n            return;\r\n        }\r\n        if (x >= this.list_grids.repeatX || y >= this.list_grids.repeatY) {\r\n            return;\r\n        }\r\n        if (fontInfo == null) {\r\n            fontInfo = this._dropingFontInfo;\r\n        }\r\n        this._fonts[fontInfo.x][fontInfo.y] = null;\r\n        fontInfo.x = x;\r\n        fontInfo.y = y;\r\n        this._fonts[fontInfo.x][fontInfo.y] = fontInfo;\r\n    }\r\n    renderGridList() {\r\n        let arr = [];\r\n        for (let j = 0; j < this.list_grids.repeatY; j++) {\r\n            for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n                arr.push(this._fonts[i][j]);\r\n            }\r\n        }\r\n        this.list_grids.dataSource = arr;\r\n    }\r\n    dispelFont(x, y = 0) {\r\n        let dispelFontInfo;\r\n        let indX;\r\n        let indY;\r\n        if (x instanceof MapFontInfo) {\r\n            dispelFontInfo = x;\r\n            this._fonts[x.x][x.y] = null;\r\n            indX = x.x;\r\n            indY = x.y;\r\n        }\r\n        else {\r\n            dispelFontInfo = this.getFontInfo(x, y);\r\n            if (dispelFontInfo != null)\r\n                this._fonts[x][y] = null;\r\n            indX = x;\r\n            indY = y;\r\n        }\r\n        if (dispelFontInfo != null) {\r\n            let sysInd = this._sysDropingFontInfos.indexOf(dispelFontInfo);\r\n            if (sysInd != -1) {\r\n                this._sysDropingFontInfos.splice(sysInd, 1);\r\n            }\r\n            sysInd = this._sysDispelFontInfoStack.indexOf(dispelFontInfo);\r\n            if (sysInd != -1) {\r\n                this._sysDispelFontInfoStack.splice(sysInd, 1);\r\n            }\r\n            dispelFontInfo.destroyStuntEffect();\r\n        }\r\n    }\r\n    invokeStuntFont() {\r\n        let points1 = [];\r\n        let points2 = [];\r\n        let score = 0;\r\n        let tempFontInfo;\r\n        let effectObj = {};\r\n        let pushArrFun = function (x, y, arr) {\r\n            if (effectObj[x + \"_\" + y] == null) {\r\n                arr.push(new Point(x, y));\r\n                effectObj[x + \"_\" + y] = true;\r\n            }\r\n        };\r\n        this._stuntFontsCheckArr1.forEach(element => {\r\n            if (element.fontInfo != this.getFontInfo(element.fontInfo.x, element.fontInfo.y)) {\r\n                return;\r\n            }\r\n            pushArrFun(element.fontInfo.x - 1, element.fontInfo.y, points1);\r\n            pushArrFun(element.fontInfo.x + 1, element.fontInfo.y, points1);\r\n            pushArrFun(element.fontInfo.x, element.fontInfo.y - 1, points1);\r\n            pushArrFun(element.fontInfo.x, element.fontInfo.y + 1, points1);\r\n            for (let i = 0; i < this._fonts.length; i++) {\r\n                for (let j = 0; j < this._fonts[i].length; j++) {\r\n                    tempFontInfo = this._fonts[i][j];\r\n                    if (tempFontInfo != null) {\r\n                        if (tempFontInfo.getStructInfos(element.id, false).length > 0) {\r\n                            score += 10;\r\n                            pushArrFun(tempFontInfo.x, tempFontInfo.y, points2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this._stuntFontsCheckArr2.forEach(element => {\r\n            for (let i = 0; i < this._fonts.length; i++) {\r\n                for (let j = 0; j < this._fonts[i].length; j++) {\r\n                    tempFontInfo = this._fonts[i][j];\r\n                    if (tempFontInfo != null) {\r\n                        if (tempFontInfo.getStructInfos(element.id, false).length > 0) {\r\n                            score += 10;\r\n                            pushArrFun(tempFontInfo.x, tempFontInfo.y, points2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        let timeToUpdate;\r\n        if (points1.length > 0) {\r\n            this.playEffectInc();\r\n            timeToUpdate = 700;\r\n            points1.forEach(element2 => {\r\n                tempFontInfo = this.getFontInfo(element2.x, element2.y);\r\n                if (tempFontInfo != null) {\r\n                    score += 10;\r\n                    this.dispelFont(tempFontInfo);\r\n                }\r\n                let tempFontScript = this.getFontScript(element2.x, element2.y);\r\n                if (tempFontScript != null)\r\n                    tempFontScript.playHeChengEffect();\r\n            });\r\n            Laya.timer.once(500, this, function () {\r\n                points1.forEach(element3 => {\r\n                    let tempFontScript = this.getFontScript(element3.x, element3.y);\r\n                    if (tempFontScript != null) {\r\n                        tempFontScript.font = null;\r\n                        tempFontScript.clearEffects();\r\n                        tempFontScript.onUpdate();\r\n                    }\r\n                });\r\n            });\r\n            Laya.timer.once(700, this, function () {\r\n                this.renderGridList();\r\n                this.updateScore();\r\n                this.setStar(this._myPlayerInfo.getStarInfo(this._score).star_num);\r\n            });\r\n            Laya.timer.once(850, this, function () {\r\n                this.endEffectInc();\r\n            });\r\n        }\r\n        if (points2.length > 0) {\r\n            this.playEffectInc();\r\n            timeToUpdate = 1000;\r\n            Laya.timer.once(300, this, function () {\r\n                points2.forEach(element2 => {\r\n                    tempFontInfo = this.getFontInfo(element2.x, element2.y);\r\n                    if (tempFontInfo != null) {\r\n                        this.dispelFont(tempFontInfo);\r\n                    }\r\n                    let tempFontScript = this.getFontScript(element2.x, element2.y);\r\n                    if (tempFontScript != null)\r\n                        tempFontScript.playHeChengEffect();\r\n                });\r\n            });\r\n            Laya.timer.once(800, this, function () {\r\n                points2.forEach(element3 => {\r\n                    let tempFontScript = this.getFontScript(element3.x, element3.y);\r\n                    if (tempFontScript != null) {\r\n                        tempFontScript.font = null;\r\n                        tempFontScript.clearEffects();\r\n                        tempFontScript.onUpdate();\r\n                    }\r\n                });\r\n            });\r\n            Laya.timer.once(1150, this, function () {\r\n                this.endEffectInc();\r\n            });\r\n        }\r\n        this._score += score;\r\n        if (timeToUpdate > 0) {\r\n            Laya.timer.once(timeToUpdate, this, function () {\r\n                this.renderGridList();\r\n                this.updateScore();\r\n                this.setStar(this._myPlayerInfo.getStarInfo(this._score).star_num);\r\n            });\r\n        }\r\n        this._stuntFontsCheckArr1 = [];\r\n        this._stuntFontsCheckArr2 = [];\r\n        return points1.length > 0 || points2.length > 0;\r\n    }\r\n    dispelCiZu(changeFontInfos) {\r\n        let checkFontTxts = [];\r\n        for (let j = 0; j < this.list_grids.repeatY; j++) {\r\n            for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n                let tempFontInfo = this.getFontInfo(i, j);\r\n                if (tempFontInfo != null) {\r\n                    let txt = tempFontInfo.text;\r\n                    if (checkFontTxts.indexOf(txt) == -1) {\r\n                        checkFontTxts.push(txt);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let checkArr = [];\r\n        checkFontTxts.forEach(element1 => {\r\n            let tempArr = MapFontInfo.getGroup(element1);\r\n            tempArr.forEach(element2 => {\r\n                if (checkArr.indexOf(element2) != -1) {\r\n                    return;\r\n                }\r\n                let chars = element2.split(\"\");\r\n                let isFix = true;\r\n                for (let i = 0; i < chars.length; i++) {\r\n                    if (checkFontTxts.indexOf(chars[i]) == -1) {\r\n                        isFix = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (isFix) {\r\n                    if (element2 == this._popularGroup) {\r\n                        checkArr.unshift(element2);\r\n                    }\r\n                    else {\r\n                        checkArr.push(element2);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        let isDispel = false;\r\n        changeFontInfos.forEach(element => {\r\n            if (this.getFontInfo(element.x, element.y) != element) {\r\n                return;\r\n            }\r\n            let cout = this.dispelCiZuItem(element.x, element.y, checkArr);\r\n            if (cout == true) {\r\n                isDispel = true;\r\n            }\r\n        });\r\n        return isDispel;\r\n    }\r\n    dispelCiZuItem(x, y, checkArr) {\r\n        let root = this.getFontInfo(x, y);\r\n        if (root == null) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < checkArr.length; i++) {\r\n            let group = checkArr[i];\r\n            if (group.indexOf(root.text) == -1) {\r\n                continue;\r\n            }\r\n            this._checkChars = group.split(\"\");\r\n            let aStarInfo = this.dispelCiZuItemSure(x, y, null);\r\n            if (aStarInfo != null) {\r\n                SoundTool.playXiaoChuEffect();\r\n                this.playEffectInc();\r\n                if (group == this._popularGroup) {\r\n                    this._popularGroup = null;\r\n                }\r\n                let score = 40;\r\n                let points = aStarInfo.getSureList();\r\n                let time = 0;\r\n                let ciZuObj = {};\r\n                points.forEach(element => {\r\n                    ciZuObj[element.x + \"_\" + element.y] = true;\r\n                    let tempFontScript = this.getFontScript(element.x, element.y);\r\n                    tempFontScript.playHeChengEffect();\r\n                    let tempFont = this.getFontInfo(element.x, element.y);\r\n                    if (tempFont != null) {\r\n                        this.dispelFont(tempFont);\r\n                        if (tempFont.isStuntFont) {\r\n                            this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                        }\r\n                        time++;\r\n                    }\r\n                });\r\n                points.forEach(element => {\r\n                    let tempFont = this.getFontInfo(element.x - 1, element.y);\r\n                    if (tempFont != null) {\r\n                        this.dispelFont(tempFont);\r\n                        if (tempFont.isStuntFont) {\r\n                            this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                        }\r\n                        time++;\r\n                    }\r\n                    tempFont = this.getFontInfo(element.x + 1, element.y);\r\n                    if (tempFont != null) {\r\n                        this.dispelFont(tempFont);\r\n                        if (tempFont.isStuntFont) {\r\n                            this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                        }\r\n                        time++;\r\n                    }\r\n                    tempFont = this.getFontInfo(element.x, element.y - 1);\r\n                    if (tempFont != null) {\r\n                        this.dispelFont(tempFont);\r\n                        if (tempFont.isStuntFont) {\r\n                            this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                        }\r\n                        time++;\r\n                    }\r\n                    tempFont = this.getFontInfo(element.x, element.y + 1);\r\n                    if (tempFont != null) {\r\n                        this.dispelFont(tempFont);\r\n                        if (tempFont.isStuntFont) {\r\n                            this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                        }\r\n                        time++;\r\n                    }\r\n                });\r\n                score += (time * 10);\r\n                this._score += score;\r\n                Laya.timer.once(500, this, function () {\r\n                    points.forEach(element => {\r\n                        let tempFontScript = this.getFontScript(element.x, element.y);\r\n                        tempFontScript.font = null;\r\n                        tempFontScript.clearEffects();\r\n                        tempFontScript.onUpdate();\r\n                    });\r\n                });\r\n                Laya.timer.once(300, this, function () {\r\n                    points.forEach(element => {\r\n                        let tempFontScript;\r\n                        let tempX = element.x - 1;\r\n                        let tempY = element.y;\r\n                        if (ciZuObj[tempX + \"_\" + tempY] != true) {\r\n                            tempFontScript = this.getFontScript(tempX, tempY);\r\n                            if (tempFontScript != null) {\r\n                                tempFontScript.playHeChengEffect();\r\n                            }\r\n                        }\r\n                        tempX = element.x + 1;\r\n                        tempY = element.y;\r\n                        if (ciZuObj[tempX + \"_\" + tempY] != true) {\r\n                            tempFontScript = this.getFontScript(tempX, tempY);\r\n                            if (tempFontScript != null) {\r\n                                tempFontScript.playHeChengEffect();\r\n                            }\r\n                        }\r\n                        tempX = element.x;\r\n                        tempY = element.y - 1;\r\n                        if (ciZuObj[tempX + \"_\" + tempY] != true) {\r\n                            tempFontScript = this.getFontScript(tempX, tempY);\r\n                            if (tempFontScript != null) {\r\n                                tempFontScript.playHeChengEffect();\r\n                            }\r\n                        }\r\n                        tempX = element.x;\r\n                        tempY = element.y + 1;\r\n                        if (ciZuObj[tempX + \"_\" + tempY] != true) {\r\n                            tempFontScript = this.getFontScript(tempX, tempY);\r\n                            if (tempFontScript != null) {\r\n                                tempFontScript.playHeChengEffect();\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                Laya.timer.once(1200, this, function () {\r\n                    this.setDispelText(group);\r\n                    this.renderGridList();\r\n                    this.updateScore();\r\n                    this.setStar(this._myPlayerInfo.getStarInfo(this._score).star_num);\r\n                });\r\n                Laya.timer.once(2400, this, function () {\r\n                    this.endEffectInc();\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    dispelCiZuItemSure(x, y, parentAStarInfo) {\r\n        let currentFontInfo = this.getFontInfo(x, y);\r\n        if (currentFontInfo == null) {\r\n            return null;\r\n        }\r\n        let chars = parentAStarInfo == null ? this._checkChars.concat() : parentAStarInfo.chars.concat();\r\n        if (chars.indexOf(currentFontInfo.text) == -1) {\r\n            return null;\r\n        }\r\n        let aStarInfo = new SearchInfo();\r\n        aStarInfo.currentPoint.x = x;\r\n        aStarInfo.currentPoint.y = y;\r\n        aStarInfo.setOpenList(parentAStarInfo == null ? [] : parentAStarInfo.getOpenList().concat());\r\n        aStarInfo.setSureList(parentAStarInfo == null ? [] : parentAStarInfo.getSureList().concat());\r\n        aStarInfo.open(x, y, false);\r\n        aStarInfo.sure(x, y);\r\n        aStarInfo.chars = chars;\r\n        aStarInfo.chars.splice(aStarInfo.chars.indexOf(currentFontInfo.text), 1);\r\n        if (aStarInfo.chars.length == 0) {\r\n            return aStarInfo;\r\n        }\r\n        if (!aStarInfo.isOpen(x - 1, y) && !aStarInfo.isSure(x - 1, y)) {\r\n            aStarInfo.open(x - 1, y);\r\n        }\r\n        if (!aStarInfo.isOpen(x + 1, y) && !aStarInfo.isSure(x + 1, y)) {\r\n            aStarInfo.open(x + 1, y);\r\n        }\r\n        if (!aStarInfo.isOpen(x, y - 1) && !aStarInfo.isSure(x, y - 1)) {\r\n            aStarInfo.open(x, y - 1);\r\n        }\r\n        if (!aStarInfo.isOpen(x, y + 1) && !aStarInfo.isSure(x, y + 1)) {\r\n            aStarInfo.open(x, y + 1);\r\n        }\r\n        let openList = aStarInfo.getOpenList();\r\n        for (let i = 0; i < openList.length; i++) {\r\n            let element = openList[i];\r\n            let cout = this.dispelCiZuItemSure(element.x, element.y, aStarInfo);\r\n            if (cout != null) {\r\n                return cout;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    dispelStar(x, y) {\r\n        SoundTool.playXiaoChuEffect();\r\n        this.playEffectInc();\r\n        let score = 40;\r\n        let points = [{ x, y }];\r\n        let time = 0;\r\n        let cout = points.concat();\r\n        points.forEach(element => {\r\n            let tempFont = this.getFontInfo(element.x - 1, element.y);\r\n            let tempFontGrid = this.getFontScript(element.x - 1, element.y);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n            tempFont = this.getFontInfo(element.x + 1, element.y);\r\n            tempFontGrid = this.getFontScript(element.x + 1, element.y);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n            tempFont = this.getFontInfo(element.x, element.y - 1);\r\n            tempFontGrid = this.getFontScript(element.x, element.y - 1);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n            tempFont = this.getFontInfo(element.x, element.y + 1);\r\n            tempFontGrid = this.getFontScript(element.x, element.y + 1);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n            tempFont = this.getFontInfo(element.x - 2, element.y);\r\n            tempFontGrid = this.getFontScript(element.x - 2, element.y);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n            tempFont = this.getFontInfo(element.x + 2, element.y);\r\n            tempFontGrid = this.getFontScript(element.x + 2, element.y);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n            tempFont = this.getFontInfo(element.x, element.y - 2);\r\n            tempFontGrid = this.getFontScript(element.x, element.y - 2);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n            tempFont = this.getFontInfo(element.x, element.y + 2);\r\n            tempFontGrid = this.getFontScript(element.x, element.y + 2);\r\n            if (tempFont != null) {\r\n                this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n                if (tempFont.isStuntFont) {\r\n                    this._stuntFontsCheckArr2.push({ fontInfo: tempFont, id: tempFont.id });\r\n                }\r\n                time++;\r\n            }\r\n        });\r\n        score += (time * 10);\r\n        this._score += score;\r\n        Laya.timer.once(500, this, function () {\r\n            points.forEach(element => {\r\n                let tempFontScript = this.getFontScript(element.x, element.y);\r\n                tempFontScript.font = null;\r\n                tempFontScript.clearEffects();\r\n                tempFontScript.onUpdate();\r\n            });\r\n        });\r\n        Laya.timer.once(200, this, function () {\r\n            points.forEach(element => {\r\n                let tempFont = this.getFontInfo(element.x, element.y);\r\n                let tempFontGrid = this.getFontScript(element.x, element.y);\r\n                if (tempFont)\r\n                    this.dispelFont(tempFont);\r\n                if (tempFontGrid) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n            });\r\n        });\r\n        Laya.timer.once(1100, this, function () {\r\n            this.setDispelText(\"*\");\r\n            this.renderGridList();\r\n            this.updateScore();\r\n            this.setStar(this._myPlayerInfo.getStarInfo(this._score).star_num);\r\n        });\r\n        Laya.timer.once(1400, this, function () {\r\n            this.endEffectInc();\r\n        });\r\n    }\r\n    dispel(x, y) {\r\n        let targetFontInfo = this.getFontInfo(x, y);\r\n        if (targetFontInfo == null)\r\n            return false;\r\n        if (targetFontInfo.text == \"*\") {\r\n            this.dispelStar(x, y);\r\n            return false;\r\n        }\r\n        let canHeChengFontInfos = targetFontInfo.canHeChengFontInfos;\r\n        if (canHeChengFontInfos.length == 0)\r\n            return false;\r\n        let popularGroup = this._popularGroup;\r\n        if (popularGroup != null) {\r\n            canHeChengFontInfos.sort(function (a, b) {\r\n                if (popularGroup.indexOf(a.text) != -1) {\r\n                    return -1;\r\n                }\r\n                else if (popularGroup.indexOf(b.text) != -1) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n        }\r\n        let hasHeCheng = false;\r\n        for (let i = 0; i < canHeChengFontInfos.length; i++) {\r\n            if (hasHeCheng) {\r\n                break;\r\n            }\r\n            let tempFontInfo = canHeChengFontInfos[i];\r\n            let structInfoList = tempFontInfo.structInfo.split(\",\");\r\n            for (let j = 0; j < structInfoList.length; j++) {\r\n                let structList = structInfoList[j].split(\"_\");\r\n                if (structList.length > 1 && structList.indexOf(targetFontInfo.id.toString()) != -1) {\r\n                    let cout = this.dispelItem(targetFontInfo.x, targetFontInfo.y, structList, tempFontInfo.id);\r\n                    if (cout) {\r\n                        hasHeCheng = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return hasHeCheng;\r\n    }\r\n    dispelItem(x, y, checkArr, fontId) {\r\n        let root = this.getFontInfo(x, y);\r\n        if (root == null) {\r\n            return;\r\n        }\r\n        this._checkIds = checkArr;\r\n        let searchInfo = this.dispelItemSure(x, y, null);\r\n        if (searchInfo != null) {\r\n            SoundTool.playHeChengEffect();\r\n            this.playEffectInc();\r\n            let maxQuality = 0;\r\n            let points = searchInfo.getSureList();\r\n            points.forEach(element => {\r\n                let tempFontGrid = this.getFontScript(element.x, element.y);\r\n                let tempFontInfo = this.getFontInfo(element.x, element.y);\r\n                if (maxQuality < tempFontInfo.quality) {\r\n                    maxQuality = tempFontInfo.quality;\r\n                }\r\n                if (tempFontGrid != null) {\r\n                    tempFontGrid.playHeChengEffect();\r\n                }\r\n            });\r\n            let coutFontInfo = MapFontInfo.create({ id: fontId });\r\n            this.setDispelText(coutFontInfo.text);\r\n            coutFontInfo.x = x;\r\n            coutFontInfo.y = y;\r\n            coutFontInfo.quality = maxQuality + 1;\r\n            let targetCell = this.getFontCell(x, y);\r\n            let targetPoint = new Point(targetCell.x, targetCell.y);\r\n            Laya.timer.once(1410, this, function (par_points) {\r\n                par_points.forEach(element => {\r\n                    let tempFontInfo = this.getFontInfo(element.x, element.y);\r\n                    if (tempFontInfo == null)\r\n                        return;\r\n                    if (element.x != x || element.y != y) {\r\n                        let moveStartCell = this.getFontCell(element.x, element.y);\r\n                        let moveStartFontGridScript = this.getFontScript(element.x, element.y);\r\n                        moveStartFontGridScript.font = null;\r\n                        moveStartFontGridScript.clearEffects();\r\n                        let moveCell = Pool.getItemByCreateFun(\"FontGrid\", this.prefab_fontGrid.create, this.prefab_fontGrid);\r\n                        moveCell[\"x\"] = moveStartCell[\"x\"];\r\n                        moveCell[\"y\"] = moveStartCell[\"y\"];\r\n                        let moveFontGridScript = moveCell.getComponent(FontGrid);\r\n                        moveFontGridScript.font = tempFontInfo.text;\r\n                        moveFontGridScript.addEffect(tempFontInfo.getStuntFontEffect());\r\n                        moveFontGridScript.onUpdate();\r\n                        this.list_grids.addChild(moveCell);\r\n                        Tween.to(moveCell, { x: targetPoint.x, y: targetPoint.y }, 100, null, Handler.create(this, function (targetMc) {\r\n                            targetMc.destroy(true);\r\n                        }, [moveCell]));\r\n                    }\r\n                    this.dispelFont(tempFontInfo);\r\n                    if (tempFontInfo && tempFontInfo.isStuntFont) {\r\n                        this._stuntFontsCheckArr1.push({ fontInfo: coutFontInfo, id: tempFontInfo.id });\r\n                    }\r\n                });\r\n            }, [points]);\r\n            let score = 30;\r\n            let time = points.length;\r\n            score += 10 * time;\r\n            this._score += score;\r\n            ControllerMgr.getInstance(TipController).showLeftBottomTip(\"+\" + score);\r\n            Laya.timer.once(1500, this, function () {\r\n                this._fonts[x][y] = coutFontInfo;\r\n                let targetFontScript = this.getFontScript(x, y);\r\n                targetFontScript.font = coutFontInfo.text;\r\n                targetFontScript.addEffect(coutFontInfo.getStuntFontEffect());\r\n                this.updateScore();\r\n                this.setStar(this._myPlayerInfo.getStarInfo(this._score).star_num);\r\n            });\r\n            Laya.timer.once(2000, this, function () {\r\n                this.endEffectInc();\r\n            });\r\n            this._sysDropingFontInfos.push(coutFontInfo);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    dispelItemSure(x, y, parentAStarInfo) {\r\n        let currentFontInfo = this.getFontInfo(x, y);\r\n        if (currentFontInfo == null) {\r\n            return null;\r\n        }\r\n        let chars = parentAStarInfo == null ? this._checkIds.concat() : parentAStarInfo.chars.concat();\r\n        if (chars.indexOf(currentFontInfo.id.toString()) == -1) {\r\n            return null;\r\n        }\r\n        let aStarInfo = new SearchInfo();\r\n        aStarInfo.currentPoint.x = x;\r\n        aStarInfo.currentPoint.y = y;\r\n        aStarInfo.setOpenList(parentAStarInfo == null ? [] : parentAStarInfo.getOpenList().concat());\r\n        aStarInfo.setSureList(parentAStarInfo == null ? [] : parentAStarInfo.getSureList().concat());\r\n        aStarInfo.open(x, y, false);\r\n        aStarInfo.sure(x, y);\r\n        aStarInfo.chars = chars;\r\n        aStarInfo.chars.splice(aStarInfo.chars.indexOf(currentFontInfo.id.toString()), 1);\r\n        if (aStarInfo.chars.length == 0) {\r\n            return aStarInfo;\r\n        }\r\n        if (!aStarInfo.isOpen(x - 1, y) && !aStarInfo.isSure(x - 1, y)) {\r\n            aStarInfo.open(x - 1, y);\r\n        }\r\n        if (!aStarInfo.isOpen(x + 1, y) && !aStarInfo.isSure(x + 1, y)) {\r\n            aStarInfo.open(x + 1, y);\r\n        }\r\n        if (!aStarInfo.isOpen(x, y - 1) && !aStarInfo.isSure(x, y - 1)) {\r\n            aStarInfo.open(x, y - 1);\r\n        }\r\n        if (!aStarInfo.isOpen(x, y + 1) && !aStarInfo.isSure(x, y + 1)) {\r\n            aStarInfo.open(x, y + 1);\r\n        }\r\n        let openList = aStarInfo.getOpenList();\r\n        for (let i = 0; i < openList.length; i++) {\r\n            let element = openList[i];\r\n            let cout = this.dispelItemSure(element.x, element.y, aStarInfo);\r\n            if (cout != null) {\r\n                return cout;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    destroyGuideImgs() {\r\n        for (let tempProperty in this._guideImgs) {\r\n            let tempImg = this._guideImgs[tempProperty];\r\n            Laya.timer.clearAll(tempImg);\r\n            Tween.clearAll(tempImg);\r\n            tempImg.destroy(true);\r\n        }\r\n        this._guideImgs = {};\r\n    }\r\n    setNextGuideRate() {\r\n        if (!AppConfig.hadGuidance()) {\r\n            if (this._score < 300) {\r\n                this._guideRate = 100;\r\n            }\r\n            else if (this._score < 500) {\r\n                this._guideRate = 40;\r\n            }\r\n            else if (this._score < 800) {\r\n                this._guideRate = 15;\r\n            }\r\n            else {\r\n                this._guideRate = Math.min(this._guideRate + 1, 6);\r\n            }\r\n            return;\r\n        }\r\n        this._guideRate = Math.min(this._guideRate + 1, 6);\r\n    }\r\n    guideToGrid() {\r\n        for (let tempProperty in this._guideImgs) {\r\n            let tempImg = this._guideImgs[tempProperty];\r\n            Laya.timer.clearAll(tempImg);\r\n            Tween.clearAll(tempImg);\r\n            tempImg.destroy(true);\r\n        }\r\n        if (this._dropingFontInfo.text == \"*\")\r\n            return;\r\n        this._guideImgs = {};\r\n        let rate = Math.random() * 100;\r\n        if (this._myPlayerInfo.guideRemainTimes > 0) {\r\n            rate = 0;\r\n        }\r\n        if (rate > this._guideRate) {\r\n            this.setNextGuideRate();\r\n            return;\r\n        }\r\n        let dropingFontCanHeChengFontInfos = this._dropingFontInfo.canHeChengFontInfos;\r\n        let dropingFontCanHeChengGroups = this._dropingFontInfo.canHeChengGroups;\r\n        let topFontInfos = this.getTopFontInfos();\r\n        let points = [];\r\n        topFontInfos.forEach(tempFontInfo => {\r\n            if (tempFontInfo.id == null) {\r\n                return;\r\n            }\r\n            dropingFontCanHeChengGroups.forEach(tempGroup => {\r\n                if (tempGroup.length != 2) {\r\n                    return;\r\n                }\r\n                let groupArr = tempGroup.split(\"\");\r\n                groupArr.splice(groupArr.indexOf(this._dropingFontInfo.text), 1);\r\n                if (groupArr.indexOf(tempFontInfo.text) != -1) {\r\n                    points.push(new Point(tempFontInfo.x, tempFontInfo.y));\r\n                    return;\r\n                }\r\n            });\r\n            dropingFontCanHeChengFontInfos.forEach(tempMergeFontInfo => {\r\n                let structInfos = tempMergeFontInfo.getStructInfos(tempFontInfo.id);\r\n                for (let i = 0; i < structInfos.length; i++) {\r\n                    let tempStruckInfo = structInfos[i];\r\n                    let tempStruckArr = tempStruckInfo.split(\"_\");\r\n                    if (tempStruckArr.length != 2) {\r\n                        continue;\r\n                    }\r\n                    tempStruckArr.splice(tempStruckArr.indexOf(tempFontInfo.id.toString()), 1);\r\n                    if (tempStruckArr.indexOf(this._dropingFontInfo.id.toString()) != -1) {\r\n                        points.push(new Point(tempFontInfo.x, tempFontInfo.y));\r\n                        return;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        if (points.length > 0) {\r\n            this._guideRate = 1;\r\n            this.setNextGuideRate();\r\n            if (this._myPlayerInfo.guideRemainTimes > 0) {\r\n                this._myPlayerInfo.guideRemainTimes--;\r\n            }\r\n            points.forEach(element => {\r\n                if (this._guideImgs[element.x + \"-\" + element.y] != null) {\r\n                    return;\r\n                }\r\n                let tempGrid = this.getFontCell(element.x, element.y);\r\n                let tempImg = new Image(\"map/tz_jiantou.png\");\r\n                tempImg.scaleX = tempImg.scaleY = 0.7;\r\n                tempImg.rotation = 90;\r\n                tempImg.x = 75;\r\n                tempImg.y = -75;\r\n                tempGrid.addChild(tempImg);\r\n                this._guideImgs[element.x + \"-\" + element.y] = tempImg;\r\n                Laya.timer.loop(1000, tempImg, function (par_img) {\r\n                    let targetY = par_img.y == -75 ? -85 : -75;\r\n                    Tween.to(par_img, { y: targetY }, 750);\r\n                }, [tempImg]);\r\n            });\r\n        }\r\n    }\r\n    getFontInfo(x, y) {\r\n        if (this._fonts[x] == null) {\r\n            return null;\r\n        }\r\n        return this._fonts[x][y];\r\n    }\r\n    getFontCell(x, y) {\r\n        if (y < 0 || y >= this.list_grids.repeatY || x < 0 || x >= this.list_grids.repeatX) {\r\n            return null;\r\n        }\r\n        return this.list_grids.getCell(y * this.list_grids.repeatX + x);\r\n    }\r\n    getFontScript(x, y) {\r\n        let fontCell = this.getFontCell(x, y);\r\n        if (fontCell == null)\r\n            return null;\r\n        return fontCell.getComponent(FontGrid);\r\n    }\r\n    refresh() {\r\n        this.setStar(this._myPlayerInfo.getStarInfo(this._score).star_num);\r\n        this.updateNextDropingFont();\r\n        this.updateScore();\r\n        this.updatePopularGroup();\r\n        if (this._myPlayerInfo.wannengUseTimes > 0) {\r\n            this.btn_wanneng.mouseEnabled = true;\r\n            this.btn_wanneng.gray = false;\r\n        }\r\n        else {\r\n            this.btn_wanneng.mouseEnabled = false;\r\n            this.btn_wanneng.gray = true;\r\n        }\r\n        if (this._myPlayerInfo.guideUseTimes > 0) {\r\n            this.btn_point.mouseEnabled = true;\r\n            this.btn_point.gray = false;\r\n        }\r\n        else {\r\n            this.btn_point.mouseEnabled = false;\r\n            this.btn_point.gray = true;\r\n        }\r\n    }\r\n    updateScore() {\r\n        this.txt_score.text = this._score.toString();\r\n    }\r\n    updatePopularGroup() {\r\n        if (this._popularGroup == null) {\r\n            let bank = MapFontInfo.DataSource[\"bank\"];\r\n            this._popularGroup = bank[Math.floor(Math.random() * bank.length)];\r\n            this.heCiSplitTimes = 0;\r\n        }\r\n        if (this._popularGroup != null) {\r\n            this.txt_popularGroup.text = this._popularGroup;\r\n            this.img_popularGroupBg.height = this.txt_popularGroup.displayHeight + 16;\r\n        }\r\n    }\r\n    updateNextDropingFont() {\r\n        if (this._nextDropingFontInfo == null) {\r\n            this.txt_nextFont.text = \"\";\r\n        }\r\n        else {\r\n            this.txt_nextFont.text = this._nextDropingFontInfo.text;\r\n        }\r\n    }\r\n    setDispelText(text) {\r\n        Tween.clearAll(this.mc_dispelText);\r\n        this.mc_dispelText.scaleX = this.mc_dispelText.scaleY = 0.4;\r\n        this.txt_dispelText.text = text;\r\n        switch (text.length) {\r\n            case 1:\r\n                this.txt_dispelText.fontSize = 120;\r\n                this.txt_dispelText.size(120, 120);\r\n                break;\r\n            case 2:\r\n                this.txt_dispelText.fontSize = 60;\r\n                this.txt_dispelText.size(120, 60);\r\n                break;\r\n            case 3:\r\n                this.txt_dispelText.fontSize = 40;\r\n                this.txt_dispelText.size(120, 40);\r\n                break;\r\n            case 4:\r\n                this.txt_dispelText.fontSize = 30;\r\n                this.txt_dispelText.size(120, 30);\r\n                break;\r\n        }\r\n        Tween.to(this.mc_dispelText, { scaleX: 1, scaleY: 1 }, 300);\r\n    }\r\n    setStar(star) {\r\n        let list = [];\r\n        while (star > 0 || list.length < 5) {\r\n            if (star > 0)\r\n                list.push(true);\r\n            else\r\n                list.push(false);\r\n            star--;\r\n        }\r\n    }\r\n    reduceNanDu(kunNan) {\r\n        if (!AppConfig.hadGuidance()) {\r\n            if (this._score < 300) {\r\n                kunNan = Math.floor(kunNan * 250 / 100);\r\n            }\r\n            else if (this._score < 500) {\r\n                kunNan = Math.floor(kunNan * 160 / 100);\r\n            }\r\n            else if (this._score < 700) {\r\n                kunNan = Math.floor(kunNan * 130 / 100);\r\n            }\r\n        }\r\n        return kunNan;\r\n    }\r\n    randomNextFont() {\r\n        let fontGridNum = this.getFontGridNum();\r\n        if (this._score > 700) {\r\n            this.randRate = Math.min(this.randRate + 1, 10);\r\n            if (fontGridNum > 20 && this.randRate > 0 && this.getRandomResult(this.randRate)) {\r\n                this.changeGameStatue(GameState.Pause);\r\n                WxMiniUtil.showInterstitialAd(Handler.create(this, this.onCPComple));\r\n            }\r\n        }\r\n        if (this._debugMode) {\r\n            let txt = this._debugDropFonts.shift();\r\n            this._nextDropingFontInfo = MapFontInfo.create({ text: txt });\r\n            if (this._nextDropingFontInfo.text != null) {\r\n                return;\r\n            }\r\n        }\r\n        if (Math.random() * 100 > this.buShouRate) {\r\n            this.buShouRate = Math.min(this.buShouRate + 0.3, 3);\r\n        }\r\n        else {\r\n            if (this._score > 1500) {\r\n                this.buShouRate = 0;\r\n                let txt = this.getRandomElement(MapFontInfo.DataSource[\"stunt_font\"]);\r\n                this._nextDropingFontInfo = MapFontInfo.create({ text: txt });\r\n                if (this._nextDropingFontInfo.text != null) {\r\n                    this._nextDropingFontInfo.isStuntFont = true;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        if (this._myPlayerInfo.guideRemainTimes === undefined) {\r\n            this._myPlayerInfo.guideRemainTimes = 0;\r\n        }\r\n        if (this._guideDropFonts.length > 0) {\r\n            let txt = this._guideDropFonts.shift();\r\n            this._nextDropingFontInfo = MapFontInfo.create({ text: txt });\r\n            if (this._nextDropingFontInfo.text != null) {\r\n                return;\r\n            }\r\n        }\r\n        if (!(this._myPlayerInfo.guideRemainTimes > 0) && this._splitFontWords.length > 0) {\r\n            this._nextDropingFontInfo = this.getRandomElement(this._splitFontWords);\r\n            this._splitFontWords.splice(this._splitFontWords.indexOf(this._nextDropingFontInfo), 1);\r\n            if (this._nextDropingFontInfo != null) {\r\n                return;\r\n            }\r\n        }\r\n        if (!(this._myPlayerInfo.guideRemainTimes > 0) && this._splitGroupWords.length > 0) {\r\n            this._nextDropingFontInfo = this.getRandomElement(this._splitGroupWords);\r\n            this._splitGroupWords.splice(this._splitGroupWords.indexOf(this._nextDropingFontInfo), 1);\r\n            if (this._nextDropingFontInfo != null) {\r\n                return;\r\n            }\r\n        }\r\n        let kunNan = this.getNanDuXiShu(fontGridNum) * this._myPlayerInfo.getStarInfo(this._score).split_rate;\r\n        let result = Math.min(100, Math.floor(this.heCizuRate * kunNan / 10000));\r\n        if (!(this._myPlayerInfo.guideRemainTimes > 0) && this.getRandomResult(result)) {\r\n            if (this._words.length == 0) {\r\n                this.heCiSplitTimes++;\r\n                this._words = this.splitGroupToFontInfos(this._popularGroup, null, this.heCiSplitTimes > 2 ? \"special\" : \"commen\");\r\n            }\r\n            this._nextDropingFontInfo = this.getRandomElement(this._words);\r\n            this._words.splice(this._words.indexOf(this._nextDropingFontInfo), 1);\r\n            if (this._nextDropingFontInfo != null) {\r\n                if (fontGridNum < 10) {\r\n                    this.hanZiRate += 16;\r\n                }\r\n                else if (fontGridNum < 22) {\r\n                    this.hanZiRate += 10;\r\n                    this.ciZuRate += 2;\r\n                }\r\n                else if (fontGridNum < 28) {\r\n                    this.hanZiRate += 5;\r\n                    this.ciZuRate += 5;\r\n                }\r\n                else {\r\n                    this.hanZiRate += 5;\r\n                    this.ciZuRate += 7;\r\n                }\r\n                this.heCizuRate = 10;\r\n                return;\r\n            }\r\n        }\r\n        this.heCizuRate += 10;\r\n        let topFontInfos = this.getTopFontInfos();\r\n        if (this._myPlayerInfo.guideRemainTimes > 0) {\r\n            this.hanZiRate = 10000;\r\n            this.ciZuRate = 10000;\r\n        }\r\n        if (topFontInfos.length > 0) {\r\n            let topFontInfo = this.getRandomElement(topFontInfos);\r\n            for (let index = 0; index < 5; index++) {\r\n                if (topFontInfo.canHeChengFont) {\r\n                    break;\r\n                }\r\n                topFontInfo = this.getRandomElement(topFontInfos);\r\n            }\r\n            if (topFontInfo.canHeChengFont && this.getRandomResult(this.reduceNanDu(this.hanZiRate * kunNan / 10000))) {\r\n                let fontInfos = topFontInfo.canHeChengFontInfos;\r\n                let splitFontInfo = this.getRandomElement(fontInfos);\r\n                this._splitFontWords = this.splitFontToFontInfos(splitFontInfo, topFontInfo.id);\r\n                this._nextDropingFontInfo = this.getRandomElement(this._splitFontWords);\r\n                this._splitFontWords.splice(this._splitFontWords.indexOf(this._nextDropingFontInfo), 1);\r\n                if (this._nextDropingFontInfo != null) {\r\n                    if (this._myPlayerInfo.guideRemainTimes > 0) {\r\n                        this._dropingFontInfo = MapFontInfo.create({ id: this._nextDropingFontInfo.id });\r\n                        this._dropingFontInfo.isStuntFont = this._nextDropingFontInfo.isStuntFont;\r\n                    }\r\n                    if (fontGridNum < 10) {\r\n                        this.hanZiRate = 20;\r\n                    }\r\n                    else if (fontGridNum < 22) {\r\n                        this.hanZiRate = 16;\r\n                        this.ciZuRate += 2;\r\n                    }\r\n                    else if (fontGridNum < 28) {\r\n                        this.hanZiRate = 10;\r\n                        this.ciZuRate += 3;\r\n                    }\r\n                    else {\r\n                        this.hanZiRate = 5;\r\n                        this.ciZuRate += 6;\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            for (let index = 0; index < 5; index++) {\r\n                if (topFontInfo.canHeChengGroup) {\r\n                    break;\r\n                }\r\n                topFontInfo = this.getRandomElement(topFontInfos);\r\n            }\r\n            if (topFontInfo.canHeChengGroup && this.getRandomResult(this.reduceNanDu(this.ciZuRate * kunNan / 10000))) {\r\n                let groups = topFontInfo.canHeChengGroups;\r\n                let splitGroup = this.getRandomElement(groups);\r\n                this._splitGroupWords = this.splitGroupToFontInfos(splitGroup, topFontInfo.text, \"sp\");\r\n                this._nextDropingFontInfo = this.getRandomElement(this._splitGroupWords);\r\n                this._splitGroupWords.splice(this._splitGroupWords.indexOf(this._nextDropingFontInfo), 1);\r\n                if (this._nextDropingFontInfo != null) {\r\n                    if (this._myPlayerInfo.guideRemainTimes > 0) {\r\n                        this._dropingFontInfo = MapFontInfo.create({ id: this._nextDropingFontInfo.id });\r\n                        this._dropingFontInfo.isStuntFont = this._nextDropingFontInfo.isStuntFont;\r\n                    }\r\n                    if (fontGridNum < 10) {\r\n                        this.hanZiRate += 15;\r\n                        this.ciZuRate = 1;\r\n                    }\r\n                    else if (fontGridNum < 22) {\r\n                        this.hanZiRate += 11;\r\n                        this.ciZuRate = 4;\r\n                    }\r\n                    else if (fontGridNum < 28) {\r\n                        this.hanZiRate += 6;\r\n                        this.ciZuRate = 8;\r\n                    }\r\n                    else if (fontGridNum < 35) {\r\n                        this.hanZiRate += 3;\r\n                        this.ciZuRate = 11;\r\n                    }\r\n                    else {\r\n                        this.hanZiRate += 3;\r\n                        this.ciZuRate = 13;\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        if (fontGridNum < 10) {\r\n            this.hanZiRate += 14;\r\n        }\r\n        else if (fontGridNum < 22) {\r\n            this.hanZiRate += 10;\r\n            this.ciZuRate += 1;\r\n        }\r\n        else if (fontGridNum < 30) {\r\n            this.hanZiRate += 5;\r\n            this.ciZuRate += 6;\r\n        }\r\n        else {\r\n            this.hanZiRate += 4;\r\n            this.ciZuRate += 7;\r\n        }\r\n        let fontDataArr = this.getRandHzBySocore(MapFontInfo.DataSource[\"font\"]);\r\n        let mapFontInfo = MapFontInfo.create();\r\n        mapFontInfo.setDataByValueArr(fontDataArr);\r\n        this._nextDropingFontInfo = mapFontInfo;\r\n    }\r\n    getRandHzBySocore(arr) {\r\n        if (arr.length == 0)\r\n            return null;\r\n        let randNum = 100;\r\n        if (this._score > 3000 && this._score <= 20000) {\r\n            randNum += (this._score - 2000) / 15;\r\n        }\r\n        else if (this._score > 20000) {\r\n            randNum += (this._score - 2000) / 10;\r\n        }\r\n        if (randNum > arr.length) {\r\n            randNum = arr.length - 1 - 200;\r\n        }\r\n        randNum = Math.floor(Math.random() * randNum) + 200;\r\n        if (randNum > arr.length) {\r\n            randNum = arr.length - 1;\r\n        }\r\n        return arr[randNum];\r\n    }\r\n    getTopFontInfos() {\r\n        let cout = [];\r\n        let font = null;\r\n        for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n            font = null;\r\n            for (let j = 0; j < this.list_grids.repeatY; j++) {\r\n                if (this._fonts[i][j] != null) {\r\n                    font = this._fonts[i][j];\r\n                    break;\r\n                }\r\n            }\r\n            if (font != null) {\r\n                cout.push(font);\r\n            }\r\n        }\r\n        return cout;\r\n    }\r\n    splitGroupToFontInfos(str, removeFontText = null, splitType = \"commen\") {\r\n        let cout = [];\r\n        str.split('').forEach(element => {\r\n            if (element == removeFontText) {\r\n                return;\r\n            }\r\n            let fontInfo = MapFontInfo.create({ text: element });\r\n            if (fontInfo.id == null) {\r\n                console.log(\"lack font:\" + element);\r\n                return;\r\n            }\r\n            if (splitType == \"commen\") {\r\n                cout = cout.concat(this.splitFontToFontInfos(fontInfo, null, splitType));\r\n            }\r\n            else {\r\n                cout.push(fontInfo);\r\n            }\r\n        });\r\n        return cout;\r\n    }\r\n    splitFontToFontInfos(fontTxt, removeFontId = null, splitType = \"commen\") {\r\n        let fontInfo;\r\n        if (fontTxt instanceof MapFontInfo) {\r\n            fontInfo = fontTxt;\r\n        }\r\n        else {\r\n            fontInfo = MapFontInfo.create({ text: fontTxt });\r\n        }\r\n        if (splitType != \"commen\") {\r\n            return [fontInfo];\r\n        }\r\n        let cout = [];\r\n        let structInfos = fontInfo.structInfo.split(\",\");\r\n        let structInfo = structInfos[Math.floor(Math.random() * structInfos.length)];\r\n        if (structInfo == fontInfo.id.toString()) {\r\n            cout.push(fontInfo);\r\n        }\r\n        else {\r\n            structInfo.split(\"_\").forEach(element2 => {\r\n                if (element2 == \"\" || (removeFontId != null && element2 == removeFontId.toString())) {\r\n                    return;\r\n                }\r\n                let splitFontInfo = MapFontInfo.create({ id: element2 });\r\n                if (splitFontInfo.id == null) {\r\n                    console.log(\"lack font id:\" + element2);\r\n                    return;\r\n                }\r\n                cout.push(splitFontInfo);\r\n            });\r\n        }\r\n        return cout;\r\n    }\r\n    getRandomResult(val) {\r\n        if (Math.floor(Math.random() * 100) < val) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getNanDuXiShu(fontGridNum) {\r\n        return MapFontInfo.DataSource[\"degree_difficulty\"][fontGridNum];\r\n    }\r\n    getFontGridNum() {\r\n        let fontGridNum = 0;\r\n        for (let i = 0; i < this.list_grids.repeatX; i++) {\r\n            for (let j = 0; j < this.list_grids.repeatY; j++) {\r\n                if (this._fonts[i][j] != null) {\r\n                    fontGridNum += this.list_grids.repeatY - j;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return fontGridNum;\r\n    }\r\n    getRandomElement(arr) {\r\n        if (arr.length == 0)\r\n            return null;\r\n        return arr[Math.floor(Math.random() * arr.length)];\r\n    }\r\n    playEffectInc() {\r\n        this._playerEffectInd++;\r\n        this.changeGameStatue(GameState.EffectPause);\r\n    }\r\n    endEffectInc() {\r\n        this._playerEffectInd--;\r\n        if (this._playerEffectInd < 0) {\r\n            this._playerEffectInd = 0;\r\n        }\r\n        if (this._playerEffectInd == 0 && this._gameState == GameState.EffectPause) {\r\n            this.changeGameStatue(GameState.Playing);\r\n            this.checkSysDropFonts();\r\n            this._sysDispelFontInfoStack = [];\r\n            if (this._sysDropingFontInfos.length == 0) {\r\n                this.invokeStuntFont();\r\n            }\r\n        }\r\n    }\r\n}\r\nclass SearchInfo {\r\n    constructor() {\r\n        this.currentPoint = new Point();\r\n        this._openList = [];\r\n        this._openObj = {};\r\n        this._sureList = [];\r\n        this._sureObj = {};\r\n    }\r\n    setOpenList(points) {\r\n        points.forEach(element => {\r\n            this.open(element.x, element.y);\r\n        });\r\n    }\r\n    getOpenList() {\r\n        return this._openList;\r\n    }\r\n    setSureList(points) {\r\n        points.forEach(element => {\r\n            this.sure(element.x, element.y);\r\n        });\r\n    }\r\n    getSureList() {\r\n        return this._sureList;\r\n    }\r\n    open(x, y, isOpen = true) {\r\n        let key = x.toString() + \"_\" + y.toString();\r\n        if (isOpen) {\r\n            let point = new Point(x, y);\r\n            this._openList.push(point);\r\n            this._openObj[key] = point;\r\n        }\r\n        else {\r\n            if (this._openObj[key] != null) {\r\n                this._openList.splice(this._openList.indexOf(this._openObj[key]), 1);\r\n                delete this._openObj[key];\r\n            }\r\n        }\r\n    }\r\n    isOpen(x, y) {\r\n        let key = x.toString() + \"_\" + y.toString();\r\n        return this._openObj[key] != null;\r\n    }\r\n    sure(x, y) {\r\n        let key = x.toString() + \"_\" + y.toString();\r\n        let point = new Point(x, y);\r\n        this._sureList.push(point);\r\n        this._sureObj[key] = point;\r\n    }\r\n    isSure(x, y) {\r\n        let key = x.toString() + \"_\" + y.toString();\r\n        return this._sureObj[key] != null;\r\n    }\r\n}\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/model/MapFontInfo.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/prefeb/StartGame.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/scene/SceneBase.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/prefeb/FontGrid.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/model/PlayerInfo.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/controller/PlayerController.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/prefeb/GameResult.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/AppConfig.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/controller/TipController.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/controller/ControllerMgr.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/tool/SoundTool.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/prefeb/GameSetting.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/tool/NativeBridgeAndroid.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/components/Prefab.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/List.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Image.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Button.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/maths/Point.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/Laya.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Handler.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Pool.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Tween.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Text.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Box.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/tool/WxMiniUtil.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/src/script/tool/TTMiniUtil.ts"
  ]
}

{
  "code": "import { Laya } from \"Laya\";\r\nimport { Skeleton } from \"laya/ani/bone/Skeleton\";\r\nimport { Templet } from \"laya/ani/bone/Templet\";\r\nimport { Sprite } from \"laya/display/Sprite\";\r\nimport { Event } from \"laya/events/Event\";\r\nimport { Loader } from \"laya/net/Loader\";\r\nimport { Texture2D } from \"laya/resource/Texture2D\";\r\nimport { Image } from \"laya/ui/Image\";\r\nimport { Handler } from \"laya/utils/Handler\";\r\nexport class ResMgr {\r\n    constructor() {\r\n        this.spineList = {};\r\n        this.textureList = {};\r\n        this.animationList = {};\r\n        this.modelDelayList = {};\r\n        this.idx = 0;\r\n    }\r\n    static Instance() {\r\n        if (ResMgr.instance == null) {\r\n            ResMgr.instance = new ResMgr();\r\n        }\r\n        return ResMgr.instance;\r\n    }\r\n    releaseSpine(url) {\r\n        if (this.spineList[url]) {\r\n            let spine = this.spineList[url];\r\n            for (let i = 0; i < spine[\"_loadList\"].length; i++) {\r\n                let texture = spine.getTexture(spine[\"_loadList\"][i]);\r\n                if (texture) {\r\n                    texture.disposeBitmap();\r\n                    texture.destroy();\r\n                }\r\n            }\r\n            spine.destroy();\r\n            Laya.loader.clearRes(url);\r\n            this.spineList[url] = null;\r\n        }\r\n    }\r\n    loadSpine(url, callbk) {\r\n        var self = this;\r\n        var num = 0;\r\n        var loadFunc = function (spine) {\r\n            var complete = function () {\r\n                self.spineList[spine] = factory;\r\n                if ((url instanceof Array)) {\r\n                    num++;\r\n                    if (num == url.length) {\r\n                        callbk.run();\r\n                    }\r\n                }\r\n                else {\r\n                    callbk.run();\r\n                }\r\n            };\r\n            var factory = new Templet();\r\n            factory.on(Event.COMPLETE, self, complete);\r\n            factory.loadAni(spine);\r\n        };\r\n        if ((url instanceof Array)) {\r\n            for (var i = 0; i < url.length; i++) {\r\n                loadFunc(url[i]);\r\n            }\r\n        }\r\n        else {\r\n            loadFunc(url);\r\n        }\r\n    }\r\n    loadTexture(url, callbk) {\r\n        var self = this;\r\n        if ((url instanceof Array)) {\r\n            for (var i = 0; i < url.length; i++) {\r\n                if (i == (url.length - 1)) {\r\n                    Texture2D.load(url[i], callbk);\r\n                }\r\n                else {\r\n                    Texture2D.load(url[i], null);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            Texture2D.load(url, callbk);\r\n        }\r\n    }\r\n    loadPNG(url, callbk) {\r\n        if (Laya.loader.getRes(url) != null) {\r\n            callbk.run();\r\n            return;\r\n        }\r\n        Laya.loader.load(url, callbk, null, \"image\");\r\n    }\r\n    getPNG(url) {\r\n        return Laya.loader.getRes(url);\r\n    }\r\n    createSprite(url, sprite) {\r\n        let sp = sprite || new Sprite();\r\n        let tex;\r\n        if (Laya.loader.getRes(url) == null) {\r\n            this.loadPNG(url, Handler.create(this, function () {\r\n                tex = this.getPNG(url);\r\n                sp.graphics.drawTexture(tex);\r\n                if (tex) {\r\n                    sp.size(tex.sourceWidth, tex.sourceHeight);\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            tex = this.getPNG(url);\r\n            sp.graphics.drawTexture(tex);\r\n            if (tex) {\r\n                sp.size(tex.sourceWidth, tex.sourceHeight);\r\n            }\r\n        }\r\n        return sp;\r\n    }\r\n    createImg(url, img) {\r\n        if (!img) {\r\n            img = new Image();\r\n        }\r\n        this.loadPNG(url, Handler.create(this, function () {\r\n            img.skin = url;\r\n        }));\r\n        return img;\r\n    }\r\n    loadModel(url, callbk) {\r\n        if (Laya.loader.getRes(url) && Laya.loader.getRes(url)[\"_children\"] && Laya.loader.getRes(url).getChildAt(0)) {\r\n            callbk.run();\r\n            return;\r\n        }\r\n        Laya.loader.create(url, callbk);\r\n    }\r\n    load(url, callbk) {\r\n        if (Laya.loader.getRes(url) != null) {\r\n            callbk.run();\r\n            return;\r\n        }\r\n        Laya.loader.load(url, callbk);\r\n    }\r\n    loadJson(url, callbk) {\r\n        if (Laya.loader.getRes(url) != null) {\r\n            callbk.run();\r\n            return;\r\n        }\r\n        Laya.loader.load(url, callbk, null, Loader.JSON);\r\n    }\r\n    loadAtlas(url, callbk) {\r\n        if (Laya.loader.getRes(url) != null) {\r\n            callbk.run();\r\n            return;\r\n        }\r\n        Laya.loader.load(url, callbk, null, Laya.Loader.ATLAS);\r\n    }\r\n    loadAnimation(aniUrl, atlasUrl, callbk) {\r\n        if (atlasUrl != \"\" && atlasUrl != null) {\r\n            if (Laya.loader.getRes(aniUrl) != null && Laya.loader.getRes(atlasUrl) != null) {\r\n                callbk.run();\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            if (Laya.loader.getRes(aniUrl) != null) {\r\n                callbk.run();\r\n                return;\r\n            }\r\n        }\r\n        Laya.loader.load(aniUrl, Handler.create(this, function () {\r\n            if (atlasUrl != null && atlasUrl != \"\") {\r\n                Laya.loader.load(atlasUrl, Handler.create(this, function () {\r\n                    this.animationList[aniUrl] = atlasUrl;\r\n                    callbk.run();\r\n                }), null, Loader.ATLAS);\r\n            }\r\n            else {\r\n                callbk.run();\r\n            }\r\n        }, null, false), null, Loader.JSON);\r\n    }\r\n    getSpine(url) {\r\n        return this.spineList[url];\r\n    }\r\n    createSpine(url, animation, loop = true, callbk = null) {\r\n        var sk;\r\n        if (this.spineList[url]) {\r\n            sk = this.spineList[url].buildArmature(0);\r\n            if (animation != null) {\r\n                sk.play(animation, loop);\r\n            }\r\n            if (callbk != null) {\r\n                callbk.runWith(sk);\r\n            }\r\n        }\r\n        else {\r\n            sk = new Skeleton();\r\n            this.loadSpine(url, Handler.create(this, function () {\r\n                sk.init(this.spineList[url], 0);\r\n                if (animation != null) {\r\n                    sk.play(animation, loop);\r\n                }\r\n                if (callbk != null) {\r\n                    callbk.runWith(sk);\r\n                }\r\n            }));\r\n        }\r\n        return sk;\r\n    }\r\n    getTexture(url, callbk) {\r\n        let res = Laya.loader.getRes(url);\r\n        if (res) {\r\n            callbk.runWith(res);\r\n        }\r\n        else {\r\n            this.loadTexture(url, callbk);\r\n        }\r\n    }\r\n    tryGetTexture(url) {\r\n        let res = Laya.loader.getRes(url);\r\n        if (res) {\r\n            return res;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    loadList(urls, caller, onProgress, onComplete) {\r\n        if (urls.length == 0) {\r\n            onComplete.call(caller);\r\n            return;\r\n        }\r\n        let item = {\r\n            id: this.idx,\r\n            urls: urls,\r\n            caller: caller,\r\n            index: 0,\r\n            onProgress: onProgress,\r\n            onComplete: onComplete\r\n        };\r\n        this.idx++;\r\n        this.startLoad(item);\r\n    }\r\n    startLoad(item) {\r\n        if (item.urls.length <= item.index) {\r\n            if (item.onComplete != null) {\r\n                item.onComplete.call(item.caller);\r\n            }\r\n            return;\r\n        }\r\n        let url = item.urls[item.index];\r\n        item.index++;\r\n        if (item.onProgress != null) {\r\n            item.onProgress.call(item.caller, item.index, item.urls.length);\r\n        }\r\n        this.loadOnce(url, this.startLoad, item);\r\n    }\r\n    loadOnce(url, callBack, item) {\r\n        if (url instanceof Object) {\r\n            url = url.url;\r\n        }\r\n        let type = url.substr(url.indexOf('.') + 1).toLowerCase();\r\n        let f = Handler.create(this, function (par_callBk, par_this, par_item, par_url) {\r\n            par_callBk.call(par_this, par_item);\r\n        }, [callBack, this, item, url]);\r\n        switch (type) {\r\n            case \"png\":\r\n                if (url.indexOf(\"texture/\") == -1) {\r\n                    this.loadPNG(url, f);\r\n                }\r\n                else {\r\n                    this.loadTexture(url, f);\r\n                }\r\n                break;\r\n            case \"sk\":\r\n                this.loadSpine(url, f);\r\n                break;\r\n            case \"lh\":\r\n                this.loadModel(url, f);\r\n                break;\r\n            case \"json\":\r\n            case \"lang\":\r\n                this.loadJson(url, f);\r\n                break;\r\n            case \"atlas\":\r\n                this.loadAtlas(url, f);\r\n                break;\r\n            case \"ani\":\r\n                this.loadAnimation(url, null, f);\r\n                break;\r\n            default:\r\n                this.load(url, f);\r\n                break;\r\n        }\r\n    }\r\n}\r\nResMgr.instance = null;\r\n",
  "references": [
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/Laya.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/Skeleton.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ani/bone/Templet.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/display/Sprite.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/events/Event.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/net/Loader.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/resource/Texture.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/resource/Texture2D.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/ui/Image.ts",
    "/Users/zonst/Documents/font2.0/font_game_2.10/libs/laya/utils/Handler.ts"
  ]
}

{
  "code": "import { ICharRender } from \"./ICharRender\";\r\nimport { Browser } from \"../../utils/Browser\";\r\nexport class CharRender_Canvas extends ICharRender {\r\n    constructor(maxw, maxh, scalefont = true, useImageData = true, showdbg = false) {\r\n        super();\r\n        this.ctx = null;\r\n        this.lastScaleX = 1.0;\r\n        this.lastScaleY = 1.0;\r\n        this.maxTexW = 0;\r\n        this.maxTexH = 0;\r\n        this.scaleFontSize = true;\r\n        this.showDbgInfo = false;\r\n        this.supportImageData = true;\r\n        this.maxTexW = maxw;\r\n        this.maxTexH = maxh;\r\n        this.scaleFontSize = scalefont;\r\n        this.supportImageData = useImageData;\r\n        this.showDbgInfo = showdbg;\r\n        if (!CharRender_Canvas.canvas) {\r\n            CharRender_Canvas.canvas = Browser.createElement('canvas');\r\n            CharRender_Canvas.canvas.width = 1024;\r\n            CharRender_Canvas.canvas.height = 512;\r\n            CharRender_Canvas.canvas.style.left = \"-10000px\";\r\n            CharRender_Canvas.canvas.style.position = \"absolute\";\r\n            document.body.appendChild(CharRender_Canvas.canvas);\r\n            ;\r\n            this.ctx = CharRender_Canvas.canvas.getContext('2d');\r\n        }\r\n    }\r\n    get canvasWidth() {\r\n        return CharRender_Canvas.canvas.width;\r\n    }\r\n    set canvasWidth(w) {\r\n        if (CharRender_Canvas.canvas.width == w)\r\n            return;\r\n        CharRender_Canvas.canvas.width = w;\r\n        if (w > 2048) {\r\n            console.warn(\"画文字设置的宽度太大，超过2048了\");\r\n        }\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        this.ctx.scale(this.lastScaleX, this.lastScaleY);\r\n    }\r\n    getWidth(font, str) {\r\n        if (!this.ctx)\r\n            return 0;\r\n        if (this.ctx._lastFont != font) {\r\n            this.ctx.font = font;\r\n            this.ctx._lastFont = font;\r\n        }\r\n        return this.ctx.measureText(str).width;\r\n    }\r\n    scale(sx, sy) {\r\n        if (!this.supportImageData) {\r\n            this.lastScaleX = sx;\r\n            this.lastScaleY = sy;\r\n            return;\r\n        }\r\n        if (this.lastScaleX != sx || this.lastScaleY != sy) {\r\n            this.ctx.setTransform(sx, 0, 0, sy, 0, 0);\r\n            this.lastScaleX = sx;\r\n            this.lastScaleY = sy;\r\n        }\r\n    }\r\n    getCharBmp(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom, rect = null) {\r\n        if (!this.supportImageData)\r\n            return this.getCharCanvas(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom);\r\n        var ctx = this.ctx;\r\n        var sz = this.fontsz;\r\n        if (ctx.font != font) {\r\n            ctx.font = font;\r\n            ctx._lastFont = font;\r\n        }\r\n        cri.width = ctx.measureText(char).width;\r\n        var w = cri.width * this.lastScaleX;\r\n        var h = cri.height * this.lastScaleY;\r\n        w += (margin_left + margin_right) * this.lastScaleX;\r\n        h += (margin_top + margin_bottom) * this.lastScaleY;\r\n        w = Math.ceil(w);\r\n        h = Math.ceil(h);\r\n        w = Math.min(w, CharRender_Canvas.canvas.width);\r\n        h = Math.min(h, CharRender_Canvas.canvas.height);\r\n        var clearW = w + lineWidth * 2 + 1;\r\n        var clearH = h + lineWidth * 2 + 1;\r\n        if (rect) {\r\n            clearW = Math.max(clearW, rect[0] + rect[2] + 1);\r\n            clearH = Math.max(clearH, rect[1] + rect[3] + 1);\r\n        }\r\n        ctx.clearRect(0, 0, clearW / this.lastScaleX + 1, clearH / this.lastScaleY + 1);\r\n        ctx.save();\r\n        ctx.textBaseline = \"middle\";\r\n        if (lineWidth > 0) {\r\n            ctx.strokeStyle = strokeColStr;\r\n            ctx.lineWidth = lineWidth;\r\n            ctx.strokeText(char, margin_left, margin_top + sz / 2);\r\n        }\r\n        if (colStr) {\r\n            ctx.fillStyle = colStr;\r\n            ctx.fillText(char, margin_left, margin_top + sz / 2);\r\n        }\r\n        if (this.showDbgInfo) {\r\n            ctx.strokeStyle = '#ff0000';\r\n            ctx.strokeRect(1, 1, w - 2, h - 2);\r\n            ctx.strokeStyle = '#00ff00';\r\n            ctx.strokeRect(margin_left, margin_top, cri.width, cri.height);\r\n        }\r\n        if (rect) {\r\n            if (rect[2] == -1)\r\n                rect[2] = Math.ceil((cri.width + lineWidth * 2) * this.lastScaleX);\r\n            if (rect[2] <= 0)\r\n                rect[2] = 1;\r\n        }\r\n        var imgdt = rect ? (ctx.getImageData(rect[0], rect[1], rect[2], rect[3] + 1)) : (ctx.getImageData(0, 0, w, h + 1));\r\n        ctx.restore();\r\n        cri.bmpWidth = imgdt.width;\r\n        cri.bmpHeight = imgdt.height;\r\n        return imgdt;\r\n    }\r\n    getCharCanvas(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom) {\r\n        var ctx = this.ctx;\r\n        if (ctx.font != font) {\r\n            ctx.font = font;\r\n            ctx._lastFont = font;\r\n        }\r\n        cri.width = ctx.measureText(char).width;\r\n        var w = cri.width * this.lastScaleX;\r\n        var h = cri.height * this.lastScaleY;\r\n        w += (margin_left + margin_right) * this.lastScaleX;\r\n        h += ((margin_top + margin_bottom) * this.lastScaleY + 1);\r\n        w = Math.min(w, this.maxTexW);\r\n        h = Math.min(h, this.maxTexH);\r\n        CharRender_Canvas.canvas.width = Math.min(w + 1, this.maxTexW);\r\n        CharRender_Canvas.canvas.height = Math.min(h + 1, this.maxTexH);\r\n        ctx.font = font;\r\n        ctx.clearRect(0, 0, w + 1 + lineWidth, h + 1 + lineWidth);\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n        ctx.save();\r\n        if (this.scaleFontSize) {\r\n            ctx.scale(this.lastScaleX, this.lastScaleY);\r\n        }\r\n        ctx.translate(margin_left, margin_top);\r\n        ctx.textAlign = \"left\";\r\n        var sz = this.fontsz;\r\n        ctx.textBaseline = \"middle\";\r\n        if (lineWidth > 0) {\r\n            ctx.strokeStyle = strokeColStr;\r\n            ctx.fillStyle = colStr;\r\n            ctx.lineWidth = lineWidth;\r\n            if (ctx.fillAndStrokeText) {\r\n                ctx.fillAndStrokeText(char, 0, sz / 2);\r\n            }\r\n            else {\r\n                ctx.strokeText(char, 0, sz / 2);\r\n                ctx.fillText(char, 0, sz / 2);\r\n            }\r\n        }\r\n        else if (colStr) {\r\n            ctx.fillStyle = colStr;\r\n            ctx.fillText(char, 0, sz / 2);\r\n        }\r\n        if (this.showDbgInfo) {\r\n            ctx.strokeStyle = '#ff0000';\r\n            ctx.strokeRect(0, 0, w, h);\r\n            ctx.strokeStyle = '#00ff00';\r\n            ctx.strokeRect(0, 0, cri.width, cri.height);\r\n        }\r\n        ctx.restore();\r\n        cri.bmpWidth = CharRender_Canvas.canvas.width;\r\n        cri.bmpHeight = CharRender_Canvas.canvas.height;\r\n        return CharRender_Canvas.canvas;\r\n    }\r\n}\r\nCharRender_Canvas.canvas = null;\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/webgl/text/CharRenderInfo.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/webgl/text/ICharRender.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/Browser.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/webgl/text/CharRender_Canvas.d.ts",
    "writeByteOrderMark": false,
    "text": "import { CharRenderInfo } from \"./CharRenderInfo\";\r\nimport { ICharRender } from \"./ICharRender\";\r\nexport declare class CharRender_Canvas extends ICharRender {\r\n    private static canvas;\r\n    private ctx;\r\n    private lastScaleX;\r\n    private lastScaleY;\r\n    private maxTexW;\r\n    private maxTexH;\r\n    private scaleFontSize;\r\n    private showDbgInfo;\r\n    private supportImageData;\r\n    constructor(maxw: number, maxh: number, scalefont?: boolean, useImageData?: boolean, showdbg?: boolean);\r\n    canvasWidth: number;\r\n    getWidth(font: string, str: string): number;\r\n    scale(sx: number, sy: number): void;\r\n    getCharBmp(char: string, font: string, lineWidth: number, colStr: string, strokeColStr: string, cri: CharRenderInfo, margin_left: number, margin_top: number, margin_right: number, margin_bottom: number, rect?: any[] | null): ImageData | null;\r\n    getCharCanvas(char: string, font: string, lineWidth: number, colStr: string, strokeColStr: string, cri: CharRenderInfo, margin_left: number, margin_top: number, margin_right: number, margin_bottom: number): ImageData;\r\n}\r\n"
  }
}

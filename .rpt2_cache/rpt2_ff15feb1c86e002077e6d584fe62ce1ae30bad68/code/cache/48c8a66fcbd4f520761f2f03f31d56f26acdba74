{
  "code": "import { ILaya } from \"../../../ILaya\";\r\nexport class ShaderNode {\r\n    constructor(includefiles) {\r\n        this.childs = [];\r\n        this.text = \"\";\r\n        this.useFuns = \"\";\r\n        this.z = 0;\r\n        this.includefiles = includefiles;\r\n    }\r\n    setParent(parent) {\r\n        parent.childs.push(this);\r\n        this.z = parent.z + 1;\r\n        this.parent = parent;\r\n    }\r\n    setCondition(condition, type) {\r\n        if (condition) {\r\n            this.conditionType = type;\r\n            condition = condition.replace(/(\\s*$)/g, \"\");\r\n            this.condition = function () {\r\n                return this[condition];\r\n            };\r\n            this.condition.__condition = condition;\r\n        }\r\n    }\r\n    toscript(def, out) {\r\n        return this._toscript(def, out, ++ShaderNode.__id);\r\n    }\r\n    _toscript(def, out, id) {\r\n        if (this.childs.length < 1 && !this.text)\r\n            return out;\r\n        var outIndex = out.length;\r\n        if (this.condition) {\r\n            var ifdef = !!this.condition.call(def);\r\n            this.conditionType === ILaya.ShaderCompile.IFDEF_ELSE && (ifdef = !ifdef);\r\n            if (!ifdef)\r\n                return out;\r\n        }\r\n        if (this.noCompile)\r\n            this.text && out.push(this.text);\r\n        this.childs.length > 0 && this.childs.forEach(function (o, index, arr) {\r\n            o._toscript(def, out, id);\r\n        });\r\n        if (this.includefiles.length > 0 && this.useFuns.length > 0) {\r\n            var funsCode;\r\n            for (var i = 0, n = this.includefiles.length; i < n; i++) {\r\n                if (this.includefiles[i].curUseID == id) {\r\n                    continue;\r\n                }\r\n                funsCode = this.includefiles[i].file.getFunsScript(this.useFuns);\r\n                if (funsCode.length > 0) {\r\n                    this.includefiles[i].curUseID = id;\r\n                    out[0] = funsCode + out[0];\r\n                }\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n}\r\nShaderNode.__id = 1;\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/ILaya.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/webgl/utils/ShaderNode.d.ts",
    "writeByteOrderMark": false,
    "text": "export declare class ShaderNode {\r\n    private static __id;\r\n    childs: any[];\r\n    text: string;\r\n    parent: ShaderNode;\r\n    name: string;\r\n    noCompile: boolean;\r\n    includefiles: any[];\r\n    condition: any;\r\n    conditionType: number;\r\n    useFuns: string;\r\n    z: number;\r\n    src: string;\r\n    constructor(includefiles: any[]);\r\n    setParent(parent: ShaderNode): void;\r\n    setCondition(condition: string, type: number): void;\r\n    toscript(def: any, out: any[]): any[];\r\n    private _toscript;\r\n}\r\n"
  }
}

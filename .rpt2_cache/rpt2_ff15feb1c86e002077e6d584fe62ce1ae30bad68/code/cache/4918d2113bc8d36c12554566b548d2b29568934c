{
  "code": "import { Point } from \"../../maths/Point\";\r\nimport { Rectangle } from \"../../maths/Rectangle\";\r\nimport { HTMLCanvas } from \"../../resource/HTMLCanvas\";\r\nimport { Pool } from \"../../utils/Pool\";\r\nexport class CacheStyle {\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n    needBitmapCache() {\r\n        return this.cacheForFilters || !!this.mask;\r\n    }\r\n    needEnableCanvasRender() {\r\n        return this.userSetCache != \"none\" || this.cacheForFilters || !!this.mask;\r\n    }\r\n    releaseContext() {\r\n        if (this.canvas && this.canvas.size) {\r\n            Pool.recover(\"CacheCanvas\", this.canvas);\r\n            this.canvas.size(0, 0);\r\n            try {\r\n                this.canvas.width = 0;\r\n                this.canvas.height = 0;\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        this.canvas = null;\r\n    }\r\n    createContext() {\r\n        if (!this.canvas) {\r\n            this.canvas = Pool.getItem(\"CacheCanvas\") || new HTMLCanvas(false);\r\n            var tx = this.canvas.context;\r\n            if (!tx) {\r\n                tx = this.canvas.getContext('2d');\r\n            }\r\n        }\r\n    }\r\n    releaseFilterCache() {\r\n        var fc = this.filterCache;\r\n        if (fc) {\r\n            fc.destroy();\r\n            fc.recycle();\r\n            this.filterCache = null;\r\n        }\r\n    }\r\n    recover() {\r\n        if (this === CacheStyle.EMPTY)\r\n            return;\r\n        Pool.recover(\"SpriteCache\", this.reset());\r\n    }\r\n    reset() {\r\n        this.releaseContext();\r\n        this.releaseFilterCache();\r\n        this.cacheAs = \"none\";\r\n        this.enableCanvasRender = false;\r\n        this.userSetCache = \"none\";\r\n        this.cacheForFilters = false;\r\n        this.staticCache = false;\r\n        this.reCache = true;\r\n        this.mask = null;\r\n        this.maskParent = null;\r\n        this.filterCache = null;\r\n        this.filters = null;\r\n        this.hasGlowFilter = false;\r\n        if (this.cacheRect)\r\n            this.cacheRect.recover();\r\n        this.cacheRect = null;\r\n        return this;\r\n    }\r\n    static create() {\r\n        return Pool.getItemByClass(\"SpriteCache\", CacheStyle);\r\n    }\r\n    _calculateCacheRect(sprite, tCacheType, x, y) {\r\n        var _cacheStyle = sprite._cacheStyle;\r\n        if (!_cacheStyle.cacheRect)\r\n            _cacheStyle.cacheRect = Rectangle.create();\r\n        var tRec;\r\n        if (tCacheType === \"bitmap\") {\r\n            tRec = sprite.getSelfBounds();\r\n            tRec.width = tRec.width + CacheStyle.CANVAS_EXTEND_EDGE * 2;\r\n            tRec.height = tRec.height + CacheStyle.CANVAS_EXTEND_EDGE * 2;\r\n            tRec.x = tRec.x - sprite.pivotX;\r\n            tRec.y = tRec.y - sprite.pivotY;\r\n            tRec.x = tRec.x - CacheStyle.CANVAS_EXTEND_EDGE;\r\n            tRec.y = tRec.y - CacheStyle.CANVAS_EXTEND_EDGE;\r\n            tRec.x = Math.floor(tRec.x + x) - x;\r\n            tRec.y = Math.floor(tRec.y + y) - y;\r\n            tRec.width = Math.floor(tRec.width);\r\n            tRec.height = Math.floor(tRec.height);\r\n            _cacheStyle.cacheRect.copyFrom(tRec);\r\n        }\r\n        else {\r\n            _cacheStyle.cacheRect.setTo(-sprite._style.pivotX, -sprite._style.pivotY, 1, 1);\r\n        }\r\n        tRec = _cacheStyle.cacheRect;\r\n        if (sprite._style.scrollRect) {\r\n            var scrollRect = sprite._style.scrollRect;\r\n            tRec.x -= scrollRect.x;\r\n            tRec.y -= scrollRect.y;\r\n        }\r\n        CacheStyle._scaleInfo.setTo(1, 1);\r\n        return CacheStyle._scaleInfo;\r\n    }\r\n}\r\nCacheStyle.EMPTY = new CacheStyle();\r\nCacheStyle._scaleInfo = new Point();\r\nCacheStyle.CANVAS_EXTEND_EDGE = 16;\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/Sprite.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/maths/Rectangle.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/Context.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/HTMLCanvas.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/Pool.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/display/css/CacheStyle.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Sprite } from \"../Sprite\";\r\nimport { Point } from \"../../maths/Point\";\r\nimport { Rectangle } from \"../../maths/Rectangle\";\r\nimport { HTMLCanvas } from \"../../resource/HTMLCanvas\";\r\nexport declare class CacheStyle {\r\n    static EMPTY: CacheStyle;\r\n    cacheAs: string;\r\n    enableCanvasRender: boolean;\r\n    userSetCache: string;\r\n    cacheForFilters: boolean;\r\n    staticCache: boolean;\r\n    reCache: boolean;\r\n    mask: Sprite;\r\n    maskParent: Sprite;\r\n    filters: any[];\r\n    cacheRect: Rectangle;\r\n    canvas: HTMLCanvas;\r\n    filterCache: any;\r\n    hasGlowFilter: boolean;\r\n    constructor();\r\n    needBitmapCache(): boolean;\r\n    needEnableCanvasRender(): boolean;\r\n    releaseContext(): void;\r\n    createContext(): void;\r\n    releaseFilterCache(): void;\r\n    recover(): void;\r\n    reset(): CacheStyle;\r\n    static create(): CacheStyle;\r\n    private static _scaleInfo;\r\n    static CANVAS_EXTEND_EDGE: number;\r\n    _calculateCacheRect(sprite: Sprite, tCacheType: string, x: number, y: number): Point;\r\n}\r\n"
  }
}

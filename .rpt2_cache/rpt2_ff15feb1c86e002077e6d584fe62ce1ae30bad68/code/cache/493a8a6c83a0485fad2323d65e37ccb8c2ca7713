{
  "code": "import { Styles } from \"./Styles\";\r\nimport { Text } from \"../display/Text\";\r\nimport { Event } from \"../events/Event\";\r\nimport { UIComponent } from \"./UIComponent\";\r\nimport { UIUtils } from \"./UIUtils\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nexport class Label extends UIComponent {\r\n    constructor(text = \"\") {\r\n        super();\r\n        this.text = text;\r\n    }\r\n    destroy(destroyChild = true) {\r\n        super.destroy(destroyChild);\r\n        this._tf = null;\r\n    }\r\n    createChildren() {\r\n        this.addChild(this._tf = new Text());\r\n    }\r\n    get text() {\r\n        return this._tf.text;\r\n    }\r\n    set text(value) {\r\n        if (this._tf.text != value) {\r\n            if (value)\r\n                value = UIUtils.adptString(value + \"\");\r\n            this._tf.text = value;\r\n            this.event(Event.CHANGE);\r\n            if (!this._width || !this._height)\r\n                this.onCompResize();\r\n        }\r\n    }\r\n    changeText(text) {\r\n        this._tf.changeText(text);\r\n    }\r\n    get wordWrap() {\r\n        return this._tf.wordWrap;\r\n    }\r\n    set wordWrap(value) {\r\n        this._tf.wordWrap = value;\r\n    }\r\n    get color() {\r\n        return this._tf.color;\r\n    }\r\n    set color(value) {\r\n        this._tf.color = value;\r\n    }\r\n    get font() {\r\n        return this._tf.font;\r\n    }\r\n    set font(value) {\r\n        this._tf.font = value;\r\n    }\r\n    get align() {\r\n        return this._tf.align;\r\n    }\r\n    set align(value) {\r\n        this._tf.align = value;\r\n    }\r\n    get valign() {\r\n        return this._tf.valign;\r\n    }\r\n    set valign(value) {\r\n        this._tf.valign = value;\r\n    }\r\n    get bold() {\r\n        return this._tf.bold;\r\n    }\r\n    set bold(value) {\r\n        this._tf.bold = value;\r\n    }\r\n    get italic() {\r\n        return this._tf.italic;\r\n    }\r\n    set italic(value) {\r\n        this._tf.italic = value;\r\n    }\r\n    get leading() {\r\n        return this._tf.leading;\r\n    }\r\n    set leading(value) {\r\n        this._tf.leading = value;\r\n    }\r\n    get fontSize() {\r\n        return this._tf.fontSize;\r\n    }\r\n    set fontSize(value) {\r\n        this._tf.fontSize = value;\r\n    }\r\n    get padding() {\r\n        return this._tf.padding.join(\",\");\r\n    }\r\n    set padding(value) {\r\n        this._tf.padding = UIUtils.fillArray(Styles.labelPadding, value, Number);\r\n    }\r\n    get bgColor() {\r\n        return this._tf.bgColor;\r\n    }\r\n    set bgColor(value) {\r\n        this._tf.bgColor = value;\r\n    }\r\n    get borderColor() {\r\n        return this._tf.borderColor;\r\n    }\r\n    set borderColor(value) {\r\n        this._tf.borderColor = value;\r\n    }\r\n    get stroke() {\r\n        return this._tf.stroke;\r\n    }\r\n    set stroke(value) {\r\n        this._tf.stroke = value;\r\n    }\r\n    get strokeColor() {\r\n        return this._tf.strokeColor;\r\n    }\r\n    set strokeColor(value) {\r\n        this._tf.strokeColor = value;\r\n    }\r\n    get textField() {\r\n        return this._tf;\r\n    }\r\n    measureWidth() {\r\n        return this._tf.width;\r\n    }\r\n    measureHeight() {\r\n        return this._tf.height;\r\n    }\r\n    get width() {\r\n        if (this._width || this._tf.text)\r\n            return super.width;\r\n        return 0;\r\n    }\r\n    set width(value) {\r\n        super.width = value;\r\n        this._tf.width = value;\r\n    }\r\n    get height() {\r\n        if (this._height || this._tf.text)\r\n            return super.height;\r\n        return 0;\r\n    }\r\n    set height(value) {\r\n        super.height = value;\r\n        this._tf.height = value;\r\n    }\r\n    set dataSource(value) {\r\n        this._dataSource = value;\r\n        if (typeof (value) == 'number' || typeof (value) == 'string')\r\n            this.text = value + \"\";\r\n        else\r\n            super.dataSource = value;\r\n    }\r\n    get dataSource() {\r\n        return super.dataSource;\r\n    }\r\n    get overflow() {\r\n        return this._tf.overflow;\r\n    }\r\n    set overflow(value) {\r\n        this._tf.overflow = value;\r\n    }\r\n    get underline() {\r\n        return this._tf.underline;\r\n    }\r\n    set underline(value) {\r\n        this._tf.underline = value;\r\n    }\r\n    get underlineColor() {\r\n        return this._tf.underlineColor;\r\n    }\r\n    set underlineColor(value) {\r\n        this._tf.underlineColor = value;\r\n    }\r\n}\r\nILaya.regClass(Label);\r\nClassUtils.regClass(\"laya.ui.Label\", Label);\r\nClassUtils.regClass(\"Laya.Label\", Label);\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/ui/Styles.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/Text.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/ui/UIComponent.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/ui/UIUtils.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/ILaya.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/ClassUtils.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/ui/Label.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Text } from \"../display/Text\";\r\nimport { UIComponent } from \"./UIComponent\";\r\nexport declare class Label extends UIComponent {\r\n    protected _tf: Text;\r\n    constructor(text?: string);\r\n    destroy(destroyChild?: boolean): void;\r\n    protected createChildren(): void;\r\n    text: string;\r\n    changeText(text: string): void;\r\n    wordWrap: boolean;\r\n    color: string;\r\n    font: string;\r\n    align: string;\r\n    valign: string;\r\n    bold: boolean;\r\n    italic: boolean;\r\n    leading: number;\r\n    fontSize: number;\r\n    padding: string;\r\n    bgColor: string;\r\n    borderColor: string;\r\n    stroke: number;\r\n    strokeColor: string;\r\n    readonly textField: Text;\r\n    protected measureWidth(): number;\r\n    protected measureHeight(): number;\r\n    width: number;\r\n    height: number;\r\n    dataSource: any;\r\n    overflow: string;\r\n    underline: boolean;\r\n    underlineColor: string;\r\n}\r\n"
  }
}

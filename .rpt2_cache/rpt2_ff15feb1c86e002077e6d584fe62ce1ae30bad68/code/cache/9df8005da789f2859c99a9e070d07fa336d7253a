{
  "code": "import { Pool } from \"../utils/Pool\";\r\nexport class Matrix {\r\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0, nums = 0) {\r\n        this._bTransform = false;\r\n        if (Matrix._createFun != null) {\r\n            return Matrix._createFun(a, b, c, d, tx, ty, nums);\r\n        }\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n        this._checkTransform();\r\n    }\r\n    identity() {\r\n        this.a = this.d = 1;\r\n        this.b = this.tx = this.ty = this.c = 0;\r\n        this._bTransform = false;\r\n        return this;\r\n    }\r\n    _checkTransform() {\r\n        return this._bTransform = (this.a !== 1 || this.b !== 0 || this.c !== 0 || this.d !== 1);\r\n    }\r\n    setTranslate(x, y) {\r\n        this.tx = x;\r\n        this.ty = y;\r\n        return this;\r\n    }\r\n    translate(x, y) {\r\n        this.tx += x;\r\n        this.ty += y;\r\n        return this;\r\n    }\r\n    scale(x, y) {\r\n        this.a *= x;\r\n        this.d *= y;\r\n        this.c *= x;\r\n        this.b *= y;\r\n        this.tx *= x;\r\n        this.ty *= y;\r\n        this._bTransform = true;\r\n        return this;\r\n    }\r\n    rotate(angle) {\r\n        var cos = Math.cos(angle);\r\n        var sin = Math.sin(angle);\r\n        var a1 = this.a;\r\n        var c1 = this.c;\r\n        var tx1 = this.tx;\r\n        this.a = a1 * cos - this.b * sin;\r\n        this.b = a1 * sin + this.b * cos;\r\n        this.c = c1 * cos - this.d * sin;\r\n        this.d = c1 * sin + this.d * cos;\r\n        this.tx = tx1 * cos - this.ty * sin;\r\n        this.ty = tx1 * sin + this.ty * cos;\r\n        this._bTransform = true;\r\n        return this;\r\n    }\r\n    skew(x, y) {\r\n        var tanX = Math.tan(x);\r\n        var tanY = Math.tan(y);\r\n        var a1 = this.a;\r\n        var b1 = this.b;\r\n        this.a += tanY * this.c;\r\n        this.b += tanY * this.d;\r\n        this.c += tanX * a1;\r\n        this.d += tanX * b1;\r\n        return this;\r\n    }\r\n    invertTransformPoint(out) {\r\n        var a1 = this.a;\r\n        var b1 = this.b;\r\n        var c1 = this.c;\r\n        var d1 = this.d;\r\n        var tx1 = this.tx;\r\n        var n = a1 * d1 - b1 * c1;\r\n        var a2 = d1 / n;\r\n        var b2 = -b1 / n;\r\n        var c2 = -c1 / n;\r\n        var d2 = a1 / n;\r\n        var tx2 = (c1 * this.ty - d1 * tx1) / n;\r\n        var ty2 = -(a1 * this.ty - b1 * tx1) / n;\r\n        return out.setTo(a2 * out.x + c2 * out.y + tx2, b2 * out.x + d2 * out.y + ty2);\r\n    }\r\n    transformPoint(out) {\r\n        return out.setTo(this.a * out.x + this.c * out.y + this.tx, this.b * out.x + this.d * out.y + this.ty);\r\n    }\r\n    transformPointN(out) {\r\n        return out.setTo(this.a * out.x + this.c * out.y, this.b * out.x + this.d * out.y);\r\n    }\r\n    getScaleX() {\r\n        return this.b === 0 ? this.a : Math.sqrt(this.a * this.a + this.b * this.b);\r\n    }\r\n    getScaleY() {\r\n        return this.c === 0 ? this.d : Math.sqrt(this.c * this.c + this.d * this.d);\r\n    }\r\n    invert() {\r\n        var a1 = this.a;\r\n        var b1 = this.b;\r\n        var c1 = this.c;\r\n        var d1 = this.d;\r\n        var tx1 = this.tx;\r\n        var n = a1 * d1 - b1 * c1;\r\n        this.a = d1 / n;\r\n        this.b = -b1 / n;\r\n        this.c = -c1 / n;\r\n        this.d = a1 / n;\r\n        this.tx = (c1 * this.ty - d1 * tx1) / n;\r\n        this.ty = -(a1 * this.ty - b1 * tx1) / n;\r\n        return this;\r\n    }\r\n    setTo(a, b, c, d, tx, ty) {\r\n        this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty;\r\n        return this;\r\n    }\r\n    concat(matrix) {\r\n        var a = this.a;\r\n        var c = this.c;\r\n        var tx = this.tx;\r\n        this.a = a * matrix.a + this.b * matrix.c;\r\n        this.b = a * matrix.b + this.b * matrix.d;\r\n        this.c = c * matrix.a + this.d * matrix.c;\r\n        this.d = c * matrix.b + this.d * matrix.d;\r\n        this.tx = tx * matrix.a + this.ty * matrix.c + matrix.tx;\r\n        this.ty = tx * matrix.b + this.ty * matrix.d + matrix.ty;\r\n        return this;\r\n    }\r\n    static mul(m1, m2, out) {\r\n        var aa = m1.a, ab = m1.b, ac = m1.c, ad = m1.d, atx = m1.tx, aty = m1.ty;\r\n        var ba = m2.a, bb = m2.b, bc = m2.c, bd = m2.d, btx = m2.tx, bty = m2.ty;\r\n        if (bb !== 0 || bc !== 0) {\r\n            out.a = aa * ba + ab * bc;\r\n            out.b = aa * bb + ab * bd;\r\n            out.c = ac * ba + ad * bc;\r\n            out.d = ac * bb + ad * bd;\r\n            out.tx = ba * atx + bc * aty + btx;\r\n            out.ty = bb * atx + bd * aty + bty;\r\n        }\r\n        else {\r\n            out.a = aa * ba;\r\n            out.b = ab * bd;\r\n            out.c = ac * ba;\r\n            out.d = ad * bd;\r\n            out.tx = ba * atx + btx;\r\n            out.ty = bd * aty + bty;\r\n        }\r\n        return out;\r\n    }\r\n    static mul16(m1, m2, out) {\r\n        var aa = m1.a, ab = m1.b, ac = m1.c, ad = m1.d, atx = m1.tx, aty = m1.ty;\r\n        var ba = m2.a, bb = m2.b, bc = m2.c, bd = m2.d, btx = m2.tx, bty = m2.ty;\r\n        if (bb !== 0 || bc !== 0) {\r\n            out[0] = aa * ba + ab * bc;\r\n            out[1] = aa * bb + ab * bd;\r\n            out[4] = ac * ba + ad * bc;\r\n            out[5] = ac * bb + ad * bd;\r\n            out[12] = ba * atx + bc * aty + btx;\r\n            out[13] = bb * atx + bd * aty + bty;\r\n        }\r\n        else {\r\n            out[0] = aa * ba;\r\n            out[1] = ab * bd;\r\n            out[4] = ac * ba;\r\n            out[5] = ad * bd;\r\n            out[12] = ba * atx + btx;\r\n            out[13] = bd * aty + bty;\r\n        }\r\n        return out;\r\n    }\r\n    scaleEx(x, y) {\r\n        var ba = this.a, bb = this.b, bc = this.c, bd = this.d;\r\n        if (bb !== 0 || bc !== 0) {\r\n            this.a = x * ba;\r\n            this.b = x * bb;\r\n            this.c = y * bc;\r\n            this.d = y * bd;\r\n        }\r\n        else {\r\n            this.a = x * ba;\r\n            this.b = 0 * bd;\r\n            this.c = 0 * ba;\r\n            this.d = y * bd;\r\n        }\r\n        this._bTransform = true;\r\n    }\r\n    rotateEx(angle) {\r\n        var cos = Math.cos(angle);\r\n        var sin = Math.sin(angle);\r\n        var ba = this.a, bb = this.b, bc = this.c, bd = this.d;\r\n        if (bb !== 0 || bc !== 0) {\r\n            this.a = cos * ba + sin * bc;\r\n            this.b = cos * bb + sin * bd;\r\n            this.c = -sin * ba + cos * bc;\r\n            this.d = -sin * bb + cos * bd;\r\n        }\r\n        else {\r\n            this.a = cos * ba;\r\n            this.b = sin * bd;\r\n            this.c = -sin * ba;\r\n            this.d = cos * bd;\r\n        }\r\n        this._bTransform = true;\r\n    }\r\n    clone() {\r\n        var dec = Matrix.create();\r\n        dec.a = this.a;\r\n        dec.b = this.b;\r\n        dec.c = this.c;\r\n        dec.d = this.d;\r\n        dec.tx = this.tx;\r\n        dec.ty = this.ty;\r\n        dec._bTransform = this._bTransform;\r\n        return dec;\r\n    }\r\n    copyTo(dec) {\r\n        dec.a = this.a;\r\n        dec.b = this.b;\r\n        dec.c = this.c;\r\n        dec.d = this.d;\r\n        dec.tx = this.tx;\r\n        dec.ty = this.ty;\r\n        dec._bTransform = this._bTransform;\r\n        return dec;\r\n    }\r\n    toString() {\r\n        return this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d + \",\" + this.tx + \",\" + this.ty;\r\n    }\r\n    destroy() {\r\n        this.recover();\r\n    }\r\n    recover() {\r\n        Pool.recover(\"Matrix\", this.identity());\r\n    }\r\n    static create() {\r\n        return Pool.getItemByClass(\"Matrix\", Matrix);\r\n    }\r\n}\r\nMatrix.EMPTY = new Matrix();\r\nMatrix.TEMP = new Matrix();\r\nMatrix._createFun = null;\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/Pool.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/maths/Matrix.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Point } from \"./Point\";\r\nexport declare class Matrix {\r\n    static EMPTY: Matrix;\r\n    static TEMP: Matrix;\r\n    static _createFun: Function | null;\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    d: number;\r\n    tx: number;\r\n    ty: number;\r\n    _bTransform: boolean;\r\n    constructor(a?: number, b?: number, c?: number, d?: number, tx?: number, ty?: number, nums?: number);\r\n    identity(): Matrix;\r\n    _checkTransform(): boolean;\r\n    setTranslate(x: number, y: number): Matrix;\r\n    translate(x: number, y: number): Matrix;\r\n    scale(x: number, y: number): Matrix;\r\n    rotate(angle: number): Matrix;\r\n    skew(x: number, y: number): Matrix;\r\n    invertTransformPoint(out: Point): Point;\r\n    transformPoint(out: Point): Point;\r\n    transformPointN(out: Point): Point;\r\n    getScaleX(): number;\r\n    getScaleY(): number;\r\n    invert(): Matrix;\r\n    setTo(a: number, b: number, c: number, d: number, tx: number, ty: number): Matrix;\r\n    concat(matrix: Matrix): Matrix;\r\n    static mul(m1: Matrix, m2: Matrix, out: Matrix): Matrix;\r\n    static mul16(m1: Matrix, m2: Matrix, out: any[]): any[];\r\n    scaleEx(x: number, y: number): void;\r\n    rotateEx(angle: number): void;\r\n    clone(): Matrix;\r\n    copyTo(dec: Matrix): Matrix;\r\n    toString(): string;\r\n    destroy(): void;\r\n    recover(): void;\r\n    static create(): Matrix;\r\n}\r\n"
  }
}

{
  "code": "import { GraphicsBounds } from \"./GraphicsBounds\";\r\nimport { SpriteConst } from \"./SpriteConst\";\r\nimport { AlphaCmd } from \"./cmd/AlphaCmd\";\r\nimport { ClipRectCmd } from \"./cmd/ClipRectCmd\";\r\nimport { Draw9GridTexture } from \"./cmd/Draw9GridTexture\";\r\nimport { DrawCircleCmd } from \"./cmd/DrawCircleCmd\";\r\nimport { DrawCurvesCmd } from \"./cmd/DrawCurvesCmd\";\r\nimport { DrawImageCmd } from \"./cmd/DrawImageCmd\";\r\nimport { DrawLineCmd } from \"./cmd/DrawLineCmd\";\r\nimport { DrawLinesCmd } from \"./cmd/DrawLinesCmd\";\r\nimport { DrawPathCmd } from \"./cmd/DrawPathCmd\";\r\nimport { DrawPieCmd } from \"./cmd/DrawPieCmd\";\r\nimport { DrawPolyCmd } from \"./cmd/DrawPolyCmd\";\r\nimport { DrawRectCmd } from \"./cmd/DrawRectCmd\";\r\nimport { DrawTextureCmd } from \"./cmd/DrawTextureCmd\";\r\nimport { DrawTexturesCmd } from \"./cmd/DrawTexturesCmd\";\r\nimport { DrawTrianglesCmd } from \"./cmd/DrawTrianglesCmd\";\r\nimport { FillTextCmd } from \"./cmd/FillTextCmd\";\r\nimport { FillTextureCmd } from \"./cmd/FillTextureCmd\";\r\nimport { RestoreCmd } from \"./cmd/RestoreCmd\";\r\nimport { RotateCmd } from \"./cmd/RotateCmd\";\r\nimport { SaveCmd } from \"./cmd/SaveCmd\";\r\nimport { ScaleCmd } from \"./cmd/ScaleCmd\";\r\nimport { TransformCmd } from \"./cmd/TransformCmd\";\r\nimport { TranslateCmd } from \"./cmd/TranslateCmd\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Render } from \"../renders/Render\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { VectorGraphManager } from \"../utils/VectorGraphManager\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class Graphics {\r\n    constructor() {\r\n        this._sp = null;\r\n        this._one = null;\r\n        this._render = this._renderEmpty;\r\n        this._cmds = null;\r\n        this._vectorgraphArray = null;\r\n        this._graphicBounds = null;\r\n        this.autoDestroy = false;\r\n        this._createData();\r\n    }\r\n    _createData() {\r\n    }\r\n    _clearData() {\r\n    }\r\n    _destroyData() {\r\n    }\r\n    destroy() {\r\n        this.clear(true);\r\n        if (this._graphicBounds)\r\n            this._graphicBounds.destroy();\r\n        this._graphicBounds = null;\r\n        this._vectorgraphArray = null;\r\n        if (this._sp) {\r\n            this._sp._renderType = 0;\r\n            this._sp._setRenderType(0);\r\n            this._sp = null;\r\n        }\r\n        this._destroyData();\r\n    }\r\n    clear(recoverCmds = true) {\r\n        if (recoverCmds) {\r\n            var tCmd = this._one;\r\n            if (this._cmds) {\r\n                var i, len = this._cmds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tCmd = this._cmds[i];\r\n                    tCmd.recover();\r\n                }\r\n                this._cmds.length = 0;\r\n            }\r\n            else if (tCmd) {\r\n                tCmd.recover();\r\n            }\r\n        }\r\n        else {\r\n            this._cmds = null;\r\n        }\r\n        this._one = null;\r\n        this._render = this._renderEmpty;\r\n        this._clearData();\r\n        if (this._sp) {\r\n            this._sp._renderType &= ~SpriteConst.GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        this._repaint();\r\n        if (this._vectorgraphArray) {\r\n            for (i = 0, len = this._vectorgraphArray.length; i < len; i++) {\r\n                VectorGraphManager.getInstance().deleteShape(this._vectorgraphArray[i]);\r\n            }\r\n            this._vectorgraphArray.length = 0;\r\n        }\r\n    }\r\n    _clearBoundsCache() {\r\n        if (this._graphicBounds)\r\n            this._graphicBounds.reset();\r\n    }\r\n    _initGraphicBounds() {\r\n        if (!this._graphicBounds) {\r\n            this._graphicBounds = GraphicsBounds.create();\r\n            this._graphicBounds._graphics = this;\r\n        }\r\n    }\r\n    _repaint() {\r\n        this._clearBoundsCache();\r\n        this._sp && this._sp.repaint();\r\n    }\r\n    _isOnlyOne() {\r\n        return !this._cmds || this._cmds.length === 0;\r\n    }\r\n    get cmds() {\r\n        return this._cmds;\r\n    }\r\n    set cmds(value) {\r\n        if (this._sp) {\r\n            this._sp._renderType |= SpriteConst.GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        this._cmds = value;\r\n        this._render = this._renderAll;\r\n        this._repaint();\r\n    }\r\n    getBounds(realSize = false) {\r\n        this._initGraphicBounds();\r\n        return this._graphicBounds.getBounds(realSize);\r\n    }\r\n    getBoundPoints(realSize = false) {\r\n        this._initGraphicBounds();\r\n        return this._graphicBounds.getBoundPoints(realSize);\r\n    }\r\n    drawImage(texture, x = 0, y = 0, width = 0, height = 0) {\r\n        if (!texture)\r\n            return null;\r\n        if (!width)\r\n            width = texture.sourceWidth;\r\n        if (!height)\r\n            height = texture.sourceHeight;\r\n        if (texture.getIsReady()) {\r\n            var wRate = width / texture.sourceWidth;\r\n            var hRate = height / texture.sourceHeight;\r\n            width = texture.width * wRate;\r\n            height = texture.height * hRate;\r\n            if (width <= 0 || height <= 0)\r\n                return null;\r\n            x += texture.offsetX * wRate;\r\n            y += texture.offsetY * hRate;\r\n        }\r\n        if (this._sp) {\r\n            this._sp._renderType |= SpriteConst.GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        var args = DrawImageCmd.create.call(this, texture, x, y, width, height);\r\n        if (this._one == null) {\r\n            this._one = args;\r\n            this._render = this._renderOneImg;\r\n        }\r\n        else {\r\n            this._saveToCmd(null, args);\r\n        }\r\n        this._repaint();\r\n        return args;\r\n    }\r\n    drawTexture(texture, x = 0, y = 0, width = 0, height = 0, matrix = null, alpha = 1, color = null, blendMode = null, uv) {\r\n        if (!texture || alpha < 0.01)\r\n            return null;\r\n        if (!texture.getIsReady())\r\n            return null;\r\n        if (!width)\r\n            width = texture.sourceWidth;\r\n        if (!height)\r\n            height = texture.sourceHeight;\r\n        if (texture.getIsReady()) {\r\n            var wRate = width / texture.sourceWidth;\r\n            var hRate = height / texture.sourceHeight;\r\n            width = texture.width * wRate;\r\n            height = texture.height * hRate;\r\n            if (width <= 0 || height <= 0)\r\n                return null;\r\n            x += texture.offsetX * wRate;\r\n            y += texture.offsetY * hRate;\r\n        }\r\n        if (this._sp) {\r\n            this._sp._renderType |= SpriteConst.GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        var args = DrawTextureCmd.create.call(this, texture, x, y, width, height, matrix, alpha, color, blendMode, uv);\r\n        this._repaint();\r\n        return this._saveToCmd(null, args);\r\n    }\r\n    drawTextures(texture, pos) {\r\n        if (!texture)\r\n            return null;\r\n        return this._saveToCmd(Render._context.drawTextures, DrawTexturesCmd.create.call(this, texture, pos));\r\n    }\r\n    drawTriangles(texture, x, y, vertices, uvs, indices, matrix = null, alpha = 1, color = null, blendMode = null, colorNum = 0xffffffff) {\r\n        return this._saveToCmd(Render._context.drawTriangles, DrawTrianglesCmd.create.call(this, texture, x, y, vertices, uvs, indices, matrix, alpha, color, blendMode, colorNum));\r\n    }\r\n    fillTexture(texture, x, y, width = 0, height = 0, type = \"repeat\", offset = null) {\r\n        if (texture && texture.getIsReady())\r\n            return this._saveToCmd(Render._context._fillTexture, FillTextureCmd.create.call(this, texture, x, y, width, height, type, offset || Point.EMPTY, {}));\r\n        else\r\n            return null;\r\n    }\r\n    _saveToCmd(fun, args) {\r\n        if (this._sp) {\r\n            this._sp._renderType |= SpriteConst.GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        if (this._one == null) {\r\n            this._one = args;\r\n            this._render = this._renderOne;\r\n        }\r\n        else {\r\n            this._render = this._renderAll;\r\n            (this._cmds || (this._cmds = [])).length === 0 && this._cmds.push(this._one);\r\n            this._cmds.push(args);\r\n        }\r\n        this._repaint();\r\n        return args;\r\n    }\r\n    clipRect(x, y, width, height) {\r\n        return this._saveToCmd(Render._context.clipRect, ClipRectCmd.create.call(this, x, y, width, height));\r\n    }\r\n    fillText(text, x, y, font, color, textAlign) {\r\n        return this._saveToCmd(Render._context.fillText, FillTextCmd.create.call(this, text, null, x, y, font || ILaya.Text.defaultFontStr(), color, textAlign, 0, \"\"));\r\n    }\r\n    fillBorderText(text, x, y, font, fillColor, textAlign, lineWidth, borderColor) {\r\n        return this._saveToCmd(Render._context.fillText, FillTextCmd.create.call(this, text, null, x, y, font || ILaya.Text.defaultFontStr(), fillColor, textAlign, lineWidth, borderColor));\r\n    }\r\n    fillWords(words, x, y, font, color) {\r\n        return this._saveToCmd(Render._context.fillText, FillTextCmd.create.call(this, null, words, x, y, font || ILaya.Text.defaultFontStr(), color, '', 0, null));\r\n    }\r\n    fillBorderWords(words, x, y, font, fillColor, borderColor, lineWidth) {\r\n        return this._saveToCmd(Render._context.fillText, FillTextCmd.create.call(this, null, words, x, y, font || ILaya.Text.defaultFontStr(), fillColor, \"\", lineWidth, borderColor));\r\n    }\r\n    strokeText(text, x, y, font, color, lineWidth, textAlign) {\r\n        return this._saveToCmd(Render._context.fillText, FillTextCmd.create.call(this, text, null, x, y, font || ILaya.Text.defaultFontStr(), null, textAlign, lineWidth, color));\r\n    }\r\n    alpha(alpha) {\r\n        return this._saveToCmd(Render._context.alpha, AlphaCmd.create.call(this, alpha));\r\n    }\r\n    transform(matrix, pivotX = 0, pivotY = 0) {\r\n        return this._saveToCmd(Render._context._transform, TransformCmd.create.call(this, matrix, pivotX, pivotY));\r\n    }\r\n    rotate(angle, pivotX = 0, pivotY = 0) {\r\n        return this._saveToCmd(Render._context._rotate, RotateCmd.create.call(this, angle, pivotX, pivotY));\r\n    }\r\n    scale(scaleX, scaleY, pivotX = 0, pivotY = 0) {\r\n        return this._saveToCmd(Render._context._scale, ScaleCmd.create.call(this, scaleX, scaleY, pivotX, pivotY));\r\n    }\r\n    translate(tx, ty) {\r\n        return this._saveToCmd(Render._context.translate, TranslateCmd.create.call(this, tx, ty));\r\n    }\r\n    save() {\r\n        return this._saveToCmd(Render._context._save, SaveCmd.create.call(this));\r\n    }\r\n    restore() {\r\n        return this._saveToCmd(Render._context.restore, RestoreCmd.create.call(this));\r\n    }\r\n    replaceText(text) {\r\n        this._repaint();\r\n        var cmds = this._cmds;\r\n        if (!cmds) {\r\n            if (this._one && this._isTextCmd(this._one)) {\r\n                this._one.text = text;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = cmds.length - 1; i > -1; i--) {\r\n                if (this._isTextCmd(cmds[i])) {\r\n                    cmds[i].text = text;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    _isTextCmd(cmd) {\r\n        var cmdID = cmd.cmdID;\r\n        return cmdID == FillTextCmd.ID;\r\n    }\r\n    replaceTextColor(color) {\r\n        this._repaint();\r\n        var cmds = this._cmds;\r\n        if (!cmds) {\r\n            if (this._one && this._isTextCmd(this._one)) {\r\n                this._setTextCmdColor(this._one, color);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = cmds.length - 1; i > -1; i--) {\r\n                if (this._isTextCmd(cmds[i])) {\r\n                    this._setTextCmdColor(cmds[i], color);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _setTextCmdColor(cmdO, color) {\r\n        var cmdID = cmdO.cmdID;\r\n        switch (cmdID) {\r\n            case FillTextCmd.ID:\r\n                cmdO.color = color;\r\n                break;\r\n        }\r\n    }\r\n    loadImage(url, x = 0, y = 0, width = 0, height = 0, complete = null) {\r\n        var tex = ILaya.Loader.getRes(url);\r\n        if (!tex) {\r\n            tex = new Texture();\r\n            tex.load(url);\r\n            ILaya.Loader.cacheTexture(url, tex);\r\n            tex.once(Event.READY, this, this.drawImage, [tex, x, y, width, height]);\r\n        }\r\n        else {\r\n            if (!tex.getIsReady()) {\r\n                tex.once(Event.READY, this, this.drawImage, [tex, x, y, width, height]);\r\n            }\r\n            else\r\n                this.drawImage(tex, x, y, width, height);\r\n        }\r\n        if (complete != null) {\r\n            tex.getIsReady() ? complete.call(this._sp) : tex.on(Event.READY, this._sp, complete);\r\n        }\r\n    }\r\n    _renderEmpty(sprite, context, x, y) {\r\n    }\r\n    _renderAll(sprite, context, x, y) {\r\n        var cmds = this._cmds;\r\n        for (var i = 0, n = cmds.length; i < n; i++) {\r\n            cmds[i].run(context, x, y);\r\n        }\r\n    }\r\n    _renderOne(sprite, context, x, y) {\r\n        context.sprite = sprite;\r\n        this._one.run(context, x, y);\r\n    }\r\n    _renderOneImg(sprite, context, x, y) {\r\n        context.sprite = sprite;\r\n        this._one.run(context, x, y);\r\n    }\r\n    drawLine(fromX, fromY, toX, toY, lineColor, lineWidth = 1) {\r\n        var offset = (lineWidth < 1 || lineWidth % 2 === 0) ? 0 : 0.5;\r\n        return this._saveToCmd(Render._context._drawLine, DrawLineCmd.create.call(this, fromX + offset, fromY + offset, toX + offset, toY + offset, lineColor, lineWidth, 0));\r\n    }\r\n    drawLines(x, y, points, lineColor, lineWidth = 1) {\r\n        if (!points || points.length < 4)\r\n            return null;\r\n        var offset = (lineWidth < 1 || lineWidth % 2 === 0) ? 0 : 0.5;\r\n        return this._saveToCmd(Render._context._drawLines, DrawLinesCmd.create.call(this, x + offset, y + offset, points, lineColor, lineWidth, 0));\r\n    }\r\n    drawCurves(x, y, points, lineColor, lineWidth = 1) {\r\n        return this._saveToCmd(Render._context.drawCurves, DrawCurvesCmd.create.call(this, x, y, points, lineColor, lineWidth));\r\n    }\r\n    drawRect(x, y, width, height, fillColor, lineColor = null, lineWidth = 1) {\r\n        var offset = (lineWidth >= 1 && lineColor) ? lineWidth / 2 : 0;\r\n        var lineOffset = lineColor ? lineWidth : 0;\r\n        return this._saveToCmd(Render._context.drawRect, DrawRectCmd.create.call(this, x + offset, y + offset, width - lineOffset, height - lineOffset, fillColor, lineColor, lineWidth));\r\n    }\r\n    drawCircle(x, y, radius, fillColor, lineColor = null, lineWidth = 1) {\r\n        var offset = (lineWidth >= 1 && lineColor) ? lineWidth / 2 : 0;\r\n        return this._saveToCmd(Render._context._drawCircle, DrawCircleCmd.create.call(this, x, y, radius - offset, fillColor, lineColor, lineWidth, 0));\r\n    }\r\n    drawPie(x, y, radius, startAngle, endAngle, fillColor, lineColor = null, lineWidth = 1) {\r\n        var offset = (lineWidth >= 1 && lineColor) ? lineWidth / 2 : 0;\r\n        var lineOffset = lineColor ? lineWidth : 0;\r\n        return this._saveToCmd(Render._context._drawPie, DrawPieCmd.create.call(this, x + offset, y + offset, radius - lineOffset, Utils.toRadian(startAngle), Utils.toRadian(endAngle), fillColor, lineColor, lineWidth, 0));\r\n    }\r\n    drawPoly(x, y, points, fillColor, lineColor = null, lineWidth = 1) {\r\n        var tIsConvexPolygon = false;\r\n        if (points.length > 6) {\r\n            tIsConvexPolygon = false;\r\n        }\r\n        else {\r\n            tIsConvexPolygon = true;\r\n        }\r\n        var offset = (lineWidth >= 1 && lineColor) ? (lineWidth % 2 === 0 ? 0 : 0.5) : 0;\r\n        return this._saveToCmd(Render._context._drawPoly, DrawPolyCmd.create.call(this, x + offset, y + offset, points, fillColor, lineColor, lineWidth, tIsConvexPolygon, 0));\r\n    }\r\n    drawPath(x, y, paths, brush = null, pen = null) {\r\n        return this._saveToCmd(Render._context._drawPath, DrawPathCmd.create.call(this, x, y, paths, brush, pen));\r\n    }\r\n    draw9Grid(texture, x = 0, y = 0, width = 0, height = 0, sizeGrid) {\r\n        this._saveToCmd(null, Draw9GridTexture.create(texture, x, y, width, height, sizeGrid));\r\n    }\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/Sprite.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/GraphicsBounds.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/SpriteConst.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/AlphaCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/ClipRectCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/Draw9GridTexture.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawCircleCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawCurvesCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawImageCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawLineCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawLinesCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawPathCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawPieCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawPolyCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawRectCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawTextureCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawTexturesCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/DrawTrianglesCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/FillTextCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/FillTextureCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/RestoreCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/RotateCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/SaveCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/ScaleCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/TransformCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/display/cmd/TranslateCmd.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/maths/Matrix.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/maths/Point.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/maths/Rectangle.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/renders/Render.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/Context.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/Texture.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/Utils.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/VectorGraphManager.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/ILaya.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/display/Graphics.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Sprite } from \"./Sprite\";\r\nimport { AlphaCmd } from \"./cmd/AlphaCmd\";\r\nimport { ClipRectCmd } from \"./cmd/ClipRectCmd\";\r\nimport { DrawCircleCmd } from \"./cmd/DrawCircleCmd\";\r\nimport { DrawCurvesCmd } from \"./cmd/DrawCurvesCmd\";\r\nimport { DrawImageCmd } from \"./cmd/DrawImageCmd\";\r\nimport { DrawLineCmd } from \"./cmd/DrawLineCmd\";\r\nimport { DrawLinesCmd } from \"./cmd/DrawLinesCmd\";\r\nimport { DrawPathCmd } from \"./cmd/DrawPathCmd\";\r\nimport { DrawPieCmd } from \"./cmd/DrawPieCmd\";\r\nimport { DrawPolyCmd } from \"./cmd/DrawPolyCmd\";\r\nimport { DrawRectCmd } from \"./cmd/DrawRectCmd\";\r\nimport { DrawTextureCmd } from \"./cmd/DrawTextureCmd\";\r\nimport { DrawTexturesCmd } from \"./cmd/DrawTexturesCmd\";\r\nimport { DrawTrianglesCmd } from \"./cmd/DrawTrianglesCmd\";\r\nimport { FillTextCmd } from \"./cmd/FillTextCmd\";\r\nimport { FillTextureCmd } from \"./cmd/FillTextureCmd\";\r\nimport { RestoreCmd } from \"./cmd/RestoreCmd\";\r\nimport { RotateCmd } from \"./cmd/RotateCmd\";\r\nimport { SaveCmd } from \"./cmd/SaveCmd\";\r\nimport { ScaleCmd } from \"./cmd/ScaleCmd\";\r\nimport { TransformCmd } from \"./cmd/TransformCmd\";\r\nimport { TranslateCmd } from \"./cmd/TranslateCmd\";\r\nimport { Matrix } from \"../maths/Matrix\";\r\nimport { Point } from \"../maths/Point\";\r\nimport { Rectangle } from \"../maths/Rectangle\";\r\nimport { Context } from \"../resource/Context\";\r\nimport { Texture } from \"../resource/Texture\";\r\nexport declare class Graphics {\r\n    _sp: Sprite | null;\r\n    _one: any;\r\n    _render: (sprite: Sprite, context: Context, x: number, y: number) => void;\r\n    private _cmds;\r\n    protected _vectorgraphArray: any[] | null;\r\n    private _graphicBounds;\r\n    autoDestroy: boolean;\r\n    constructor();\r\n    _createData(): void;\r\n    _clearData(): void;\r\n    _destroyData(): void;\r\n    destroy(): void;\r\n    clear(recoverCmds?: boolean): void;\r\n    private _clearBoundsCache;\r\n    private _initGraphicBounds;\r\n    _repaint(): void;\r\n    _isOnlyOne(): boolean;\r\n    cmds: any[];\r\n    getBounds(realSize?: boolean): Rectangle;\r\n    getBoundPoints(realSize?: boolean): any[];\r\n    drawImage(texture: Texture, x?: number, y?: number, width?: number, height?: number): DrawImageCmd | null;\r\n    drawTexture(texture: Texture | null, x?: number, y?: number, width?: number, height?: number, matrix?: Matrix | null, alpha?: number, color?: string | null, blendMode?: string | null, uv?: number[]): DrawTextureCmd | null;\r\n    drawTextures(texture: Texture, pos: any[]): DrawTexturesCmd | null;\r\n    drawTriangles(texture: Texture, x: number, y: number, vertices: Float32Array, uvs: Float32Array, indices: Uint16Array, matrix?: Matrix | null, alpha?: number, color?: string | null, blendMode?: string | null, colorNum?: number): DrawTrianglesCmd;\r\n    fillTexture(texture: Texture, x: number, y: number, width?: number, height?: number, type?: string, offset?: Point | null): FillTextureCmd | null;\r\n    _saveToCmd(fun: Function | null, args: any): any;\r\n    clipRect(x: number, y: number, width: number, height: number): ClipRectCmd;\r\n    fillText(text: string, x: number, y: number, font: string, color: string, textAlign: string): FillTextCmd;\r\n    fillBorderText(text: string, x: number, y: number, font: string, fillColor: string, textAlign: string, lineWidth: number, borderColor: string): FillTextCmd;\r\n    fillWords(words: any[], x: number, y: number, font: string, color: string): FillTextCmd;\r\n    fillBorderWords(words: any[], x: number, y: number, font: string, fillColor: string, borderColor: string, lineWidth: number): FillTextCmd;\r\n    strokeText(text: string, x: number, y: number, font: string, color: string, lineWidth: number, textAlign: string): FillTextCmd;\r\n    alpha(alpha: number): AlphaCmd;\r\n    transform(matrix: Matrix, pivotX?: number, pivotY?: number): TransformCmd;\r\n    rotate(angle: number, pivotX?: number, pivotY?: number): RotateCmd;\r\n    scale(scaleX: number, scaleY: number, pivotX?: number, pivotY?: number): ScaleCmd;\r\n    translate(tx: number, ty: number): TranslateCmd;\r\n    save(): SaveCmd;\r\n    restore(): RestoreCmd;\r\n    replaceText(text: string): boolean;\r\n    private _isTextCmd;\r\n    replaceTextColor(color: string): void;\r\n    private _setTextCmdColor;\r\n    loadImage(url: string, x?: number, y?: number, width?: number, height?: number, complete?: Function | null): void;\r\n    _renderEmpty(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    _renderAll(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    _renderOne(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    _renderOneImg(sprite: Sprite, context: Context, x: number, y: number): void;\r\n    drawLine(fromX: number, fromY: number, toX: number, toY: number, lineColor: string, lineWidth?: number): DrawLineCmd;\r\n    drawLines(x: number, y: number, points: any[], lineColor: any, lineWidth?: number): DrawLinesCmd | null;\r\n    drawCurves(x: number, y: number, points: any[], lineColor: any, lineWidth?: number): DrawCurvesCmd;\r\n    drawRect(x: number, y: number, width: number, height: number, fillColor: any, lineColor?: any, lineWidth?: number): DrawRectCmd;\r\n    drawCircle(x: number, y: number, radius: number, fillColor: any, lineColor?: any, lineWidth?: number): DrawCircleCmd;\r\n    drawPie(x: number, y: number, radius: number, startAngle: number, endAngle: number, fillColor: any, lineColor?: any, lineWidth?: number): DrawPieCmd;\r\n    drawPoly(x: number, y: number, points: any[], fillColor: any, lineColor?: any, lineWidth?: number): DrawPolyCmd;\r\n    drawPath(x: number, y: number, paths: any[], brush?: any, pen?: any): DrawPathCmd;\r\n    draw9Grid(texture: Texture, x: number, y: number, width: number, height: number, sizeGrid: any[]): void;\r\n}\r\n"
  }
}

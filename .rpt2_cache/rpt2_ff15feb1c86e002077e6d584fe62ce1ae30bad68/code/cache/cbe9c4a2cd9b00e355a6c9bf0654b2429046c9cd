{
  "code": "import { ILaya } from \"../../ILaya\";\r\nimport { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { URL } from \"../net/URL\";\r\nimport { Resource } from \"../resource/Resource\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { AtlasInfoManager } from \"./AtlasInfoManager\";\r\nimport { Loader } from \"./Loader\";\r\nexport class LoaderManager extends EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this.retryNum = 1;\r\n        this.retryDelay = 0;\r\n        this.maxLoader = 5;\r\n        this._loaders = [];\r\n        this._loaderCount = 0;\r\n        this._resInfos = [];\r\n        this._infoPool = [];\r\n        this._maxPriority = 5;\r\n        this._failRes = {};\r\n        this._statInfo = { count: 1, loaded: 1 };\r\n        for (var i = 0; i < this._maxPriority; i++)\r\n            this._resInfos[i] = [];\r\n    }\r\n    getProgress() {\r\n        return this._statInfo.loaded / this._statInfo.count;\r\n    }\r\n    resetProgress() {\r\n        this._statInfo.count = this._statInfo.loaded = 1;\r\n    }\r\n    create(url, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true) {\r\n        this._create(url, true, complete, progress, type, constructParams, propertyParams, priority, cache);\r\n    }\r\n    _create(url, mainResou, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true) {\r\n        if (url instanceof Array) {\r\n            var allScuess = true;\r\n            var items = url;\r\n            var itemCount = items.length;\r\n            var loadedCount = 0;\r\n            if (progress) {\r\n                var progress2 = Handler.create(progress.caller, progress ? progress.method : null, progress.args, false);\r\n            }\r\n            for (var i = 0; i < itemCount; i++) {\r\n                var item = items[i];\r\n                if (typeof (item) == 'string')\r\n                    item = items[i] = { url: item };\r\n                item.progress = 0;\r\n            }\r\n            for (i = 0; i < itemCount; i++) {\r\n                item = items[i];\r\n                var progressHandler = progress ? Handler.create(null, function (item, value) {\r\n                    item.progress = value;\r\n                    var num = 0;\r\n                    for (var j = 0; j < itemCount; j++) {\r\n                        var item1 = items[j];\r\n                        num += item1.progress;\r\n                    }\r\n                    var v = num / itemCount;\r\n                    progress2.runWith(v);\r\n                }, [item], false) : null;\r\n                var completeHandler = (progress || complete) ? Handler.create(null, function (item, content = null) {\r\n                    loadedCount++;\r\n                    item.progress = 1;\r\n                    content || (allScuess = false);\r\n                    if (loadedCount === itemCount && complete) {\r\n                        complete.runWith(allScuess);\r\n                    }\r\n                }, [item]) : null;\r\n                this._createOne(item.url, mainResou, completeHandler, progressHandler, item.type || type, item.constructParams || constructParams, item.propertyParams || propertyParams, item.priority || priority, cache);\r\n            }\r\n        }\r\n        else {\r\n            this._createOne(url, mainResou, complete, progress, type, constructParams, propertyParams, priority, cache);\r\n        }\r\n    }\r\n    _createOne(url, mainResou, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true) {\r\n        var item = this.getRes(url);\r\n        if (!item) {\r\n            var extension = (LoaderManager.createMap[Utils.getFilecompatibleExtension(url)]) ? Utils.getFilecompatibleExtension(url) : Utils.getFileExtension(url);\r\n            (type) || (type = LoaderManager.createMap[extension] ? LoaderManager.createMap[extension][0] : null);\r\n            if (!type) {\r\n                this.load(url, complete, progress, type, priority, cache);\r\n                return;\r\n            }\r\n            var parserMap = Loader.parserMap;\r\n            if (!parserMap[type]) {\r\n                this.load(url, complete, progress, type, priority, cache);\r\n                return;\r\n            }\r\n            this._createLoad(url, Handler.create(null, function (createRes) {\r\n                if (createRes) {\r\n                    if (!mainResou && createRes instanceof Resource)\r\n                        createRes._addReference();\r\n                    createRes._setCreateURL(url);\r\n                }\r\n                complete && complete.runWith(createRes);\r\n                ILaya.loader.event(url);\r\n            }), progress, type, constructParams, propertyParams, priority, cache, true);\r\n        }\r\n        else {\r\n            if (!mainResou && item instanceof Resource)\r\n                item._addReference();\r\n            progress && progress.runWith(1);\r\n            complete && complete.runWith(item);\r\n        }\r\n    }\r\n    load(url, complete = null, progress = null, type = null, priority = 1, cache = true, group = null, ignoreCache = false, useWorkerLoader = ILaya.WorkerLoader.enable) {\r\n        if (url instanceof Array) {\r\n            return this._loadAssets(url, complete, progress, type, priority, cache, group);\r\n        }\r\n        if (!type) {\r\n            if (url.indexOf(\"data:image\") === 0)\r\n                type = Loader.IMAGE;\r\n            else\r\n                type = Loader.getTypeFromUrl(url);\r\n        }\r\n        var content;\r\n        if (type === Loader.IMAGE)\r\n            content = Loader.textureMap[URL.formatURL(url)];\r\n        else\r\n            content = Loader.loadedMap[URL.formatURL(url)];\r\n        if (!ignoreCache && content != null) {\r\n            ILaya.systemTimer.callLater(this, function () {\r\n                progress && progress.runWith(1);\r\n                complete && complete.runWith(content instanceof Array ? [content] : content);\r\n                this._loaderCount || this.event(Event.COMPLETE);\r\n            });\r\n        }\r\n        else {\r\n            var original;\r\n            original = url;\r\n            url = AtlasInfoManager.getFileLoadPath(url);\r\n            if (url != original && type !== \"nativeimage\") {\r\n                type = Loader.ATLAS;\r\n            }\r\n            else {\r\n                original = null;\r\n            }\r\n            var info = LoaderManager._resMap[url];\r\n            if (!info) {\r\n                info = this._infoPool.length ? this._infoPool.pop() : new ResInfo();\r\n                info.url = url;\r\n                info.type = type;\r\n                info.cache = cache;\r\n                info.group = group;\r\n                info.ignoreCache = ignoreCache;\r\n                info.useWorkerLoader = useWorkerLoader;\r\n                info.originalUrl = original;\r\n                complete && info.on(Event.COMPLETE, complete.caller, complete.method, complete.args);\r\n                progress && info.on(Event.PROGRESS, progress.caller, progress.method, progress.args);\r\n                LoaderManager._resMap[url] = info;\r\n                priority = priority < this._maxPriority ? priority : this._maxPriority - 1;\r\n                this._resInfos[priority].push(info);\r\n                this._statInfo.count++;\r\n                this.event(Event.PROGRESS, this.getProgress());\r\n                this._next();\r\n            }\r\n            else {\r\n                if (complete) {\r\n                    if (original) {\r\n                        complete && info._createListener(Event.COMPLETE, this, this._resInfoLoaded, [original, complete], false, false);\r\n                    }\r\n                    else {\r\n                        complete && info._createListener(Event.COMPLETE, complete.caller, complete.method, complete.args, false, false);\r\n                    }\r\n                }\r\n                progress && info._createListener(Event.PROGRESS, progress.caller, progress.method, progress.args, false, false);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _resInfoLoaded(original, complete) {\r\n        complete.runWith(Loader.getRes(original));\r\n    }\r\n    _createLoad(url, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true, ignoreCache = false) {\r\n        if (url instanceof Array)\r\n            return this._loadAssets(url, complete, progress, type, priority, cache);\r\n        var content = Loader.getRes(url);\r\n        if (content != null) {\r\n            ILaya.systemTimer.frameOnce(1, this, function () {\r\n                progress && progress.runWith(1);\r\n                complete && complete.runWith(content);\r\n                this._loaderCount || this.event(Event.COMPLETE);\r\n            });\r\n        }\r\n        else {\r\n            var info = LoaderManager._resMap[url];\r\n            if (!info) {\r\n                info = this._infoPool.length ? this._infoPool.pop() : new ResInfo();\r\n                info.url = url;\r\n                info.type = type;\r\n                info.cache = false;\r\n                info.ignoreCache = ignoreCache;\r\n                info.originalUrl = null;\r\n                info.group = null;\r\n                info.createCache = cache;\r\n                info.createConstructParams = constructParams;\r\n                info.createPropertyParams = propertyParams;\r\n                complete && info.on(Event.COMPLETE, complete.caller, complete.method, complete.args);\r\n                progress && info.on(Event.PROGRESS, progress.caller, progress.method, progress.args);\r\n                LoaderManager._resMap[url] = info;\r\n                priority = priority < this._maxPriority ? priority : this._maxPriority - 1;\r\n                this._resInfos[priority].push(info);\r\n                this._statInfo.count++;\r\n                this.event(Event.PROGRESS, this.getProgress());\r\n                this._next();\r\n            }\r\n            else {\r\n                complete && info._createListener(Event.COMPLETE, complete.caller, complete.method, complete.args, false, false);\r\n                progress && info._createListener(Event.PROGRESS, progress.caller, progress.method, progress.args, false, false);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _next() {\r\n        if (this._loaderCount >= this.maxLoader)\r\n            return;\r\n        for (var i = 0; i < this._maxPriority; i++) {\r\n            var infos = this._resInfos[i];\r\n            while (infos.length > 0) {\r\n                var info = infos.shift();\r\n                if (info)\r\n                    return this._doLoad(info);\r\n            }\r\n        }\r\n        this._loaderCount || this.event(Event.COMPLETE);\r\n    }\r\n    _doLoad(resInfo) {\r\n        this._loaderCount++;\r\n        var loader = this._loaders.length ? this._loaders.pop() : new Loader();\r\n        loader.on(Event.COMPLETE, null, onLoaded);\r\n        loader.on(Event.PROGRESS, null, function (num) {\r\n            resInfo.event(Event.PROGRESS, num);\r\n        });\r\n        loader.on(Event.ERROR, null, function (msg) {\r\n            onLoaded(null);\r\n        });\r\n        var _me = this;\r\n        function onLoaded(data = null) {\r\n            loader.offAll();\r\n            loader._data = null;\r\n            loader._customParse = false;\r\n            _me._loaders.push(loader);\r\n            _me._endLoad(resInfo, data instanceof Array ? [data] : data);\r\n            _me._loaderCount--;\r\n            _me._next();\r\n        }\r\n        loader._constructParams = resInfo.createConstructParams;\r\n        loader._propertyParams = resInfo.createPropertyParams;\r\n        loader._createCache = resInfo.createCache;\r\n        loader.load(resInfo.url, resInfo.type, resInfo.cache, resInfo.group, resInfo.ignoreCache, resInfo.useWorkerLoader);\r\n    }\r\n    _endLoad(resInfo, content) {\r\n        var url = resInfo.url;\r\n        if (content == null) {\r\n            var errorCount = this._failRes[url] || 0;\r\n            if (errorCount < this.retryNum) {\r\n                console.warn(\"[warn]Retry to load:\", url);\r\n                this._failRes[url] = errorCount + 1;\r\n                ILaya.systemTimer.once(this.retryDelay, this, this._addReTry, [resInfo], false);\r\n                return;\r\n            }\r\n            else {\r\n                Loader.clearRes(url);\r\n                console.warn(\"[error]Failed to load:\", url);\r\n                this.event(Event.ERROR, url);\r\n            }\r\n        }\r\n        if (this._failRes[url])\r\n            this._failRes[url] = 0;\r\n        delete LoaderManager._resMap[url];\r\n        if (resInfo.originalUrl) {\r\n            content = Loader.getRes(resInfo.originalUrl);\r\n        }\r\n        resInfo.event(Event.COMPLETE, content);\r\n        resInfo.offAll();\r\n        this._infoPool.push(resInfo);\r\n        this._statInfo.loaded++;\r\n        this.event(Event.PROGRESS, this.getProgress());\r\n    }\r\n    _addReTry(resInfo) {\r\n        this._resInfos[this._maxPriority - 1].push(resInfo);\r\n        this._next();\r\n    }\r\n    clearRes(url) {\r\n        Loader.clearRes(url);\r\n    }\r\n    clearTextureRes(url) {\r\n        Loader.clearTextureRes(url);\r\n    }\r\n    getRes(url) {\r\n        return Loader.getRes(url);\r\n    }\r\n    cacheRes(url, data) {\r\n        Loader.cacheRes(url, data);\r\n    }\r\n    setGroup(url, group) {\r\n        Loader.setGroup(url, group);\r\n    }\r\n    clearResByGroup(group) {\r\n        Loader.clearResByGroup(group);\r\n    }\r\n    static cacheRes(url, data) {\r\n        Loader.cacheRes(url, data);\r\n    }\r\n    clearUnLoaded() {\r\n        for (var i = 0; i < this._maxPriority; i++) {\r\n            var infos = this._resInfos[i];\r\n            for (var j = infos.length - 1; j > -1; j--) {\r\n                var info = infos[j];\r\n                if (info) {\r\n                    info.offAll();\r\n                    this._infoPool.push(info);\r\n                }\r\n            }\r\n            infos.length = 0;\r\n        }\r\n        this._loaderCount = 0;\r\n        LoaderManager._resMap = {};\r\n    }\r\n    cancelLoadByUrls(urls) {\r\n        if (!urls)\r\n            return;\r\n        for (var i = 0, n = urls.length; i < n; i++) {\r\n            this.cancelLoadByUrl(urls[i]);\r\n        }\r\n    }\r\n    cancelLoadByUrl(url) {\r\n        for (var i = 0; i < this._maxPriority; i++) {\r\n            var infos = this._resInfos[i];\r\n            for (var j = infos.length - 1; j > -1; j--) {\r\n                var info = infos[j];\r\n                if (info && info.url === url) {\r\n                    infos[j] = null;\r\n                    info.offAll();\r\n                    this._infoPool.push(info);\r\n                }\r\n            }\r\n        }\r\n        if (LoaderManager._resMap[url])\r\n            delete LoaderManager._resMap[url];\r\n    }\r\n    _loadAssets(arr, complete = null, progress = null, type = null, priority = 1, cache = true, group = null) {\r\n        var itemCount = arr.length;\r\n        var loadedCount = 0;\r\n        var totalSize = 0;\r\n        var items = [];\r\n        var success = true;\r\n        for (var i = 0; i < itemCount; i++) {\r\n            let url = arr[i];\r\n            let item;\r\n            if (typeof (url) == 'string')\r\n                item = { url: url, type: type, size: 1, priority: priority };\r\n            else\r\n                item = url;\r\n            if (!item.size)\r\n                item.size = 1;\r\n            item.progress = 0;\r\n            totalSize += item.size;\r\n            items.push(item);\r\n            var progressHandler = progress ? Handler.create(null, loadProgress, [item], false) : null;\r\n            var completeHandler = (complete || progress) ? Handler.create(null, loadComplete, [item]) : null;\r\n            this.load(item.url, completeHandler, progressHandler, item.type, item.priority || 1, cache, item.group || group, false, item.useWorkerLoader);\r\n        }\r\n        function loadComplete(item, content = null) {\r\n            loadedCount++;\r\n            item.progress = 1;\r\n            if (!content)\r\n                success = false;\r\n            if (loadedCount === itemCount && complete) {\r\n                complete.runWith(success);\r\n            }\r\n        }\r\n        function loadProgress(item, value) {\r\n            if (progress != null) {\r\n                item.progress = value;\r\n                var num = 0;\r\n                for (var j = 0; j < items.length; j++) {\r\n                    var item1 = items[j];\r\n                    if (item1) {\r\n                        let prog = item1.progress == undefined ? 0 : item1.progress;\r\n                        num += item1.size == undefined ? 0 : item1.size * prog;\r\n                    }\r\n                }\r\n                var v = num / totalSize;\r\n                progress.runWith(v);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    decodeBitmaps(urls) {\r\n        var i, len = urls.length;\r\n        var ctx;\r\n        ctx = ILaya.Render._context;\r\n        for (i = 0; i < len; i++) {\r\n            var atlas;\r\n            atlas = Loader.getAtlas(urls[i]);\r\n            if (atlas) {\r\n                this._decodeTexture(atlas[0], ctx);\r\n            }\r\n            else {\r\n                var tex;\r\n                tex = this.getRes(urls[i]);\r\n                if (tex && tex instanceof Texture) {\r\n                    this._decodeTexture(tex, ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _decodeTexture(tex, ctx) {\r\n        var bitmap = tex.bitmap;\r\n        if (!tex || !bitmap)\r\n            return;\r\n        var tImg = bitmap.source || bitmap.image;\r\n        if (!tImg)\r\n            return;\r\n        if (tImg instanceof HTMLImageElement) {\r\n            ctx.drawImage(tImg, 0, 0, 1, 1);\r\n            var info = ctx.getImageData(0, 0, 1, 1);\r\n        }\r\n    }\r\n}\r\nLoaderManager._resMap = {};\r\nLoaderManager.createMap = { atlas: [null, Loader.ATLAS] };\r\nclass ResInfo extends EventDispatcher {\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/ILaya.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/events/Event.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/events/EventDispatcher.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/net/URL.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/ICreateResource.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/Resource.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/Texture.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/Handler.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/utils/Utils.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/net/AtlasInfoManager.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/net/Loader.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/net/LoaderManager.d.ts",
    "writeByteOrderMark": false,
    "text": "import { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class LoaderManager extends EventDispatcher {\r\n    private static _resMap;\r\n    static createMap: any;\r\n    retryNum: number;\r\n    retryDelay: number;\r\n    maxLoader: number;\r\n    private _loaders;\r\n    private _loaderCount;\r\n    private _resInfos;\r\n    private _infoPool;\r\n    private _maxPriority;\r\n    private _failRes;\r\n    private _statInfo;\r\n    getProgress(): number;\r\n    resetProgress(): void;\r\n    constructor();\r\n    create(url: any, complete?: Handler | null, progress?: Handler | null, type?: string | null, constructParams?: any[] | null, propertyParams?: any, priority?: number, cache?: boolean): void;\r\n    _create(url: any, mainResou: boolean, complete?: Handler | null, progress?: Handler | null, type?: string | null, constructParams?: any[] | null, propertyParams?: any, priority?: number, cache?: boolean): void;\r\n    private _createOne;\r\n    load(url: string | string[] | loadItem[], complete?: Handler | null, progress?: Handler | null, type?: string | null, priority?: number, cache?: boolean, group?: string | null, ignoreCache?: boolean, useWorkerLoader?: boolean): LoaderManager;\r\n    private _resInfoLoaded;\r\n    _createLoad(url: any, complete?: Handler | null, progress?: Handler | null, type?: string | null, constructParams?: any[] | null, propertyParams?: any, priority?: number, cache?: boolean, ignoreCache?: boolean): LoaderManager;\r\n    private _next;\r\n    private _doLoad;\r\n    private _endLoad;\r\n    private _addReTry;\r\n    clearRes(url: string): void;\r\n    clearTextureRes(url: string): void;\r\n    getRes(url: string): any;\r\n    cacheRes(url: string, data: any): void;\r\n    setGroup(url: string, group: string): void;\r\n    clearResByGroup(group: string): void;\r\n    static cacheRes(url: string, data: any): void;\r\n    clearUnLoaded(): void;\r\n    cancelLoadByUrls(urls: any[]): void;\r\n    cancelLoadByUrl(url: string): void;\r\n    private _loadAssets;\r\n    decodeBitmaps(urls: any[]): void;\r\n    private _decodeTexture;\r\n}\r\nexport interface loadItem {\r\n    url: string;\r\n    type?: string;\r\n    size?: number;\r\n    priority?: number;\r\n    useWorkerLoader?: boolean;\r\n    progress?: number;\r\n    group?: string;\r\n}\r\n"
  }
}

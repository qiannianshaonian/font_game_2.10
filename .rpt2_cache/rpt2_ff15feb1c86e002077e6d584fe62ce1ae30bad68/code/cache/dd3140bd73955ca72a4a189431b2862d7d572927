{
  "code": "export class AtlasGrid {\r\n    constructor(width = 0, height = 0, id = 0) {\r\n        this.atlasID = 0;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._texCount = 0;\r\n        this._rowInfo = null;\r\n        this._cells = null;\r\n        this._used = 0;\r\n        this._cells = null;\r\n        this._rowInfo = null;\r\n        this.atlasID = id;\r\n        this._init(width, height);\r\n    }\r\n    addRect(type, width, height, pt) {\r\n        if (!this._get(width, height, pt))\r\n            return false;\r\n        this._fill(pt.x, pt.y, width, height, type);\r\n        this._texCount++;\r\n        return true;\r\n    }\r\n    _release() {\r\n        this._cells = null;\r\n        this._rowInfo = null;\r\n    }\r\n    _init(width, height) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._release();\r\n        if (this._width == 0)\r\n            return false;\r\n        this._cells = new Uint8Array(this._width * this._height * 3);\r\n        this._rowInfo = new Uint8Array(this._height);\r\n        this._used = 0;\r\n        this._clear();\r\n        return true;\r\n    }\r\n    _get(width, height, pt) {\r\n        if (width > this._width || height > this._height) {\r\n            return false;\r\n        }\r\n        var rx = -1;\r\n        var ry = -1;\r\n        var nWidth = this._width;\r\n        var nHeight = this._height;\r\n        var pCellBox = this._cells;\r\n        for (var y = 0; y < nHeight; y++) {\r\n            if (this._rowInfo[y] < width)\r\n                continue;\r\n            for (var x = 0; x < nWidth;) {\r\n                var tm = (y * nWidth + x) * 3;\r\n                if (pCellBox[tm] != 0 || pCellBox[tm + 1] < width || pCellBox[tm + 2] < height) {\r\n                    x += pCellBox[tm + 1];\r\n                    continue;\r\n                }\r\n                rx = x;\r\n                ry = y;\r\n                for (var xx = 0; xx < width; xx++) {\r\n                    if (pCellBox[3 * xx + tm + 2] < height) {\r\n                        rx = -1;\r\n                        break;\r\n                    }\r\n                }\r\n                if (rx < 0) {\r\n                    x += pCellBox[tm + 1];\r\n                    continue;\r\n                }\r\n                pt.x = rx;\r\n                pt.y = ry;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    _fill(x, y, w, h, type) {\r\n        var nWidth = this._width;\r\n        var nHeghit = this._height;\r\n        this._check((x + w) <= nWidth && (y + h) <= nHeghit);\r\n        for (var yy = y; yy < (h + y); ++yy) {\r\n            this._check(this._rowInfo[yy] >= w);\r\n            this._rowInfo[yy] -= w;\r\n            for (var xx = 0; xx < w; xx++) {\r\n                var tm = (x + yy * nWidth + xx) * 3;\r\n                this._check(this._cells[tm] == 0);\r\n                this._cells[tm] = type;\r\n                this._cells[tm + 1] = w;\r\n                this._cells[tm + 2] = h;\r\n            }\r\n        }\r\n        if (x > 0) {\r\n            for (yy = 0; yy < h; ++yy) {\r\n                var s = 0;\r\n                for (xx = x - 1; xx >= 0; --xx, ++s) {\r\n                    if (this._cells[((y + yy) * nWidth + xx) * 3] != 0)\r\n                        break;\r\n                }\r\n                for (xx = s; xx > 0; --xx) {\r\n                    this._cells[((y + yy) * nWidth + x - xx) * 3 + 1] = xx;\r\n                    this._check(xx > 0);\r\n                }\r\n            }\r\n        }\r\n        if (y > 0) {\r\n            for (xx = x; xx < (x + w); ++xx) {\r\n                s = 0;\r\n                for (yy = y - 1; yy >= 0; --yy, s++) {\r\n                    if (this._cells[(xx + yy * nWidth) * 3] != 0)\r\n                        break;\r\n                }\r\n                for (yy = s; yy > 0; --yy) {\r\n                    this._cells[(xx + (y - yy) * nWidth) * 3 + 2] = yy;\r\n                    this._check(yy > 0);\r\n                }\r\n            }\r\n        }\r\n        this._used += (w * h) / (this._width * this._height);\r\n    }\r\n    _check(ret) {\r\n        if (ret == false) {\r\n            console.log(\"xtexMerger 错误啦\");\r\n        }\r\n    }\r\n    _clear() {\r\n        this._texCount = 0;\r\n        for (var y = 0; y < this._height; y++) {\r\n            this._rowInfo[y] = this._width;\r\n        }\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                var tm = (i * this._width + j) * 3;\r\n                this._cells[tm] = 0;\r\n                this._cells[tm + 1] = this._width - j;\r\n                this._cells[tm + 2] = this._width - i;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/maths/Point.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/webgl/text/AtlasGrid.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Point } from \"../../maths/Point\";\r\nexport declare class AtlasGrid {\r\n    atlasID: number;\r\n    private _width;\r\n    private _height;\r\n    private _texCount;\r\n    private _rowInfo;\r\n    private _cells;\r\n    _used: number;\r\n    constructor(width?: number, height?: number, id?: number);\r\n    addRect(type: number, width: number, height: number, pt: Point): boolean;\r\n    private _release;\r\n    private _init;\r\n    private _get;\r\n    private _fill;\r\n    private _check;\r\n    private _clear;\r\n}\r\n"
  }
}

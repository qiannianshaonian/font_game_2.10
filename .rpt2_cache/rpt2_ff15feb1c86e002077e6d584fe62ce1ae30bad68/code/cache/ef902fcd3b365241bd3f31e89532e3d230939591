{
  "code": "import { ILaya } from \"../../ILaya\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { URL } from \"../net/URL\";\r\nexport class Resource extends EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this._id = 0;\r\n        this._url = null;\r\n        this._cpuMemory = 0;\r\n        this._gpuMemory = 0;\r\n        this._destroyed = false;\r\n        this._referenceCount = 0;\r\n        this.lock = false;\r\n        this.name = null;\r\n        this._id = ++Resource._uniqueIDCounter;\r\n        this._destroyed = false;\r\n        this._referenceCount = 0;\r\n        Resource._idResourcesMap[this.id] = this;\r\n        this.lock = false;\r\n    }\r\n    static get cpuMemory() {\r\n        return Resource._cpuMemory;\r\n    }\r\n    static get gpuMemory() {\r\n        return Resource._gpuMemory;\r\n    }\r\n    static _addCPUMemory(size) {\r\n        Resource._cpuMemory += size;\r\n    }\r\n    static _addGPUMemory(size) {\r\n        Resource._gpuMemory += size;\r\n    }\r\n    static _addMemory(cpuSize, gpuSize) {\r\n        Resource._cpuMemory += cpuSize;\r\n        Resource._gpuMemory += gpuSize;\r\n    }\r\n    static getResourceByID(id) {\r\n        return Resource._idResourcesMap[id];\r\n    }\r\n    static getResourceByURL(url, index = 0) {\r\n        return Resource._urlResourcesMap[url][index];\r\n    }\r\n    static destroyUnusedResources() {\r\n        for (var k in Resource._idResourcesMap) {\r\n            var res = Resource._idResourcesMap[k];\r\n            if (!res.lock && res._referenceCount === 0)\r\n                res.destroy();\r\n        }\r\n    }\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    get url() {\r\n        return this._url;\r\n    }\r\n    get cpuMemory() {\r\n        return this._cpuMemory;\r\n    }\r\n    get gpuMemory() {\r\n        return this._gpuMemory;\r\n    }\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    get referenceCount() {\r\n        return this._referenceCount;\r\n    }\r\n    _setCPUMemory(value) {\r\n        var offsetValue = value - this._cpuMemory;\r\n        this._cpuMemory = value;\r\n        Resource._addCPUMemory(offsetValue);\r\n    }\r\n    _setGPUMemory(value) {\r\n        var offsetValue = value - this._gpuMemory;\r\n        this._gpuMemory = value;\r\n        Resource._addGPUMemory(offsetValue);\r\n    }\r\n    _setCreateURL(url) {\r\n        url = URL.formatURL(url);\r\n        if (this._url !== url) {\r\n            var resList;\r\n            if (this._url) {\r\n                resList = Resource._urlResourcesMap[this._url];\r\n                resList.splice(resList.indexOf(this), 1);\r\n                (resList.length === 0) && (delete Resource._urlResourcesMap[this._url]);\r\n            }\r\n            if (url) {\r\n                resList = Resource._urlResourcesMap[url];\r\n                (resList) || (Resource._urlResourcesMap[url] = resList = []);\r\n                resList.push(this);\r\n            }\r\n            this._url = url;\r\n        }\r\n    }\r\n    _addReference(count = 1) {\r\n        this._referenceCount += count;\r\n    }\r\n    _removeReference(count = 1) {\r\n        this._referenceCount -= count;\r\n    }\r\n    _clearReference() {\r\n        this._referenceCount = 0;\r\n    }\r\n    _recoverResource() {\r\n    }\r\n    _disposeResource() {\r\n    }\r\n    _activeResource() {\r\n    }\r\n    destroy() {\r\n        if (this._destroyed)\r\n            return;\r\n        this._destroyed = true;\r\n        this.lock = false;\r\n        this._disposeResource();\r\n        delete Resource._idResourcesMap[this.id];\r\n        var resList;\r\n        if (this._url) {\r\n            resList = Resource._urlResourcesMap[this._url];\r\n            if (resList) {\r\n                resList.splice(resList.indexOf(this), 1);\r\n                (resList.length === 0) && (delete Resource._urlResourcesMap[this._url]);\r\n            }\r\n            var resou = ILaya.Loader.loadedMap[this._url];\r\n            (resou == this) && (delete ILaya.Loader.loadedMap[this._url]);\r\n        }\r\n    }\r\n}\r\nResource._uniqueIDCounter = 0;\r\nResource._idResourcesMap = {};\r\nResource._urlResourcesMap = {};\r\nResource._cpuMemory = 0;\r\nResource._gpuMemory = 0;\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/ILaya.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/events/EventDispatcher.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/net/URL.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/ICreateResource.ts",
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/resource/IDestroy.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/resource/Resource.d.ts",
    "writeByteOrderMark": false,
    "text": "import { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { ICreateResource } from \"./ICreateResource\";\r\nimport { IDestroy } from \"./IDestroy\";\r\nexport declare class Resource extends EventDispatcher implements ICreateResource, IDestroy {\r\n    private static _uniqueIDCounter;\r\n    private static _idResourcesMap;\r\n    private static _urlResourcesMap;\r\n    private static _cpuMemory;\r\n    private static _gpuMemory;\r\n    static readonly cpuMemory: number;\r\n    static readonly gpuMemory: number;\r\n    static _addCPUMemory(size: number): void;\r\n    static _addGPUMemory(size: number): void;\r\n    static _addMemory(cpuSize: number, gpuSize: number): void;\r\n    static getResourceByID(id: number): Resource;\r\n    static getResourceByURL(url: string, index?: number): Resource;\r\n    static destroyUnusedResources(): void;\r\n    protected _id: number;\r\n    private _url;\r\n    private _cpuMemory;\r\n    private _gpuMemory;\r\n    private _destroyed;\r\n    protected _referenceCount: number;\r\n    lock: boolean;\r\n    name: string;\r\n    readonly id: number;\r\n    readonly url: string;\r\n    readonly cpuMemory: number;\r\n    readonly gpuMemory: number;\r\n    readonly destroyed: boolean;\r\n    readonly referenceCount: number;\r\n    constructor();\r\n    _setCPUMemory(value: number): void;\r\n    _setGPUMemory(value: number): void;\r\n    _setCreateURL(url: string): void;\r\n    _addReference(count?: number): void;\r\n    _removeReference(count?: number): void;\r\n    _clearReference(): void;\r\n    protected _recoverResource(): void;\r\n    protected _disposeResource(): void;\r\n    protected _activeResource(): void;\r\n    destroy(): void;\r\n}\r\n"
  }
}

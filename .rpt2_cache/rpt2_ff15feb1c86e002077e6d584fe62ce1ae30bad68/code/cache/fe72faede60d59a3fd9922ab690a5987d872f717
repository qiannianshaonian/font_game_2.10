{
  "code": "export class DeformSlotDisplayData {\r\n    constructor() {\r\n        this.slotIndex = -1;\r\n        this.timeList = [];\r\n        this.vectices = [];\r\n        this.tweenKeyList = [];\r\n        this.frameIndex = 0;\r\n    }\r\n    binarySearch1(values, target) {\r\n        var low = 0;\r\n        var high = values.length - 2;\r\n        if (high == 0)\r\n            return 1;\r\n        var current = high >>> 1;\r\n        while (true) {\r\n            if (values[Math.floor(current + 1)] <= target)\r\n                low = current + 1;\r\n            else\r\n                high = current;\r\n            if (low == high)\r\n                return low + 1;\r\n            current = (low + high) >>> 1;\r\n        }\r\n        return 0;\r\n    }\r\n    apply(time, boneSlot, alpha = 1) {\r\n        time += 0.05;\r\n        if (this.timeList.length <= 0) {\r\n            return;\r\n        }\r\n        var i = 0;\r\n        var tTime = this.timeList[0];\r\n        if (time < tTime) {\r\n            return;\r\n        }\r\n        var tVertexCount = this.vectices[0].length;\r\n        var tVertices = [];\r\n        var tFrameIndex = this.binarySearch1(this.timeList, time);\r\n        this.frameIndex = tFrameIndex;\r\n        if (time >= this.timeList[this.timeList.length - 1]) {\r\n            var lastVertices = this.vectices[this.vectices.length - 1];\r\n            if (alpha < 1) {\r\n                for (i = 0; i < tVertexCount; i++) {\r\n                    tVertices[i] += (lastVertices[i] - tVertices[i]) * alpha;\r\n                }\r\n            }\r\n            else {\r\n                for (i = 0; i < tVertexCount; i++) {\r\n                    tVertices[i] = lastVertices[i];\r\n                }\r\n            }\r\n            this.deformData = tVertices;\r\n            return;\r\n        }\r\n        var tPrevVertices = this.vectices[this.frameIndex - 1];\r\n        var tNextVertices = this.vectices[this.frameIndex];\r\n        var tPreFrameTime = this.timeList[this.frameIndex - 1];\r\n        var tFrameTime = this.timeList[this.frameIndex];\r\n        if (this.tweenKeyList[tFrameIndex - 1]) {\r\n            alpha = (time - tPreFrameTime) / (tFrameTime - tPreFrameTime);\r\n        }\r\n        else {\r\n            alpha = 0;\r\n        }\r\n        var tPrev;\r\n        for (i = 0; i < tVertexCount; i++) {\r\n            tPrev = tPrevVertices[i];\r\n            tVertices[i] = tPrev + (tNextVertices[i] - tPrev) * alpha;\r\n        }\r\n        this.deformData = tVertices;\r\n    }\r\n}\r\n",
  "references": [
    "F:/ProjectsWorks/font_game_2ceshi/libs/laya/ani/bone/BoneSlot.ts"
  ],
  "dts": {
    "name": "F:/ProjectsWorks/font_game_2ceshi/.rpt2_cache/placeholder/laya/ani/bone/DeformSlotDisplayData.d.ts",
    "writeByteOrderMark": false,
    "text": "import { BoneSlot } from \"./BoneSlot\";\r\nexport declare class DeformSlotDisplayData {\r\n    boneSlot: BoneSlot;\r\n    slotIndex: number;\r\n    attachment: string;\r\n    timeList: number[];\r\n    vectices: any[][];\r\n    tweenKeyList: boolean[];\r\n    deformData: any[];\r\n    frameIndex: number;\r\n    constructor();\r\n    private binarySearch1;\r\n    apply(time: number, boneSlot: BoneSlot, alpha?: number): void;\r\n}\r\n"
  }
}

"use strict";var _interopRequireWildcard=require("@babel/runtime-corejs2/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_Object$defineProperty=require("@babel/runtime-corejs2/core-js/object/define-property");_Object$defineProperty(exports,"__esModule",{value:!0}),exports.filter=filter,exports.toConfigs=toConfigs;var _create=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/create")),_cliSharedUtils=require("@vivo-minigame/cli-shared-utils"),_path=_interopRequireDefault(require("path")),constanst=_interopRequireWildcard(require("./constanst")),paths=_interopRequireWildcard(require("./paths"));/**
 * 过滤manifest.json中分包配置。只取合法的配置，不正确的配置被过滤掉
 */ /**
 * 将配置中的分包转化为webpack的entry
 * 将配置中的分包转化为webpack的externals
 * 将配置中的分包转化为resConfig
 * @param {Array} subpackages
 */function toConfigs(a){const b=(0,_create.default)(null),c=(0,_create.default)(null),d=[];let e=!1;return a.forEach(({name:a,root:f})=>{const g=_path.default.join(paths.SRC,f);let h,i,j;if("main"===a&&(e=!0),_cliSharedUtils.fs.statSync(g).isDirectory())i=_path.default.join(g,constanst.ENTRY),h=_path.default.join(f,constanst.ENTRY_NAME),j=_path.default.posix.join(f,constanst.ENTRY),d.push({name:a,root:f});else{i=g;// 去掉.js的后缀，作为entryKey
const a=_path.default.parse(f);h=_path.default.posix.join(a.dir,a.name),j=f}b[h]=i,c[a]=`commonjs ${j}`}),{isMain:e,externals:c,entry:b,resConfig:d}}function filter(a=[]){return a.filter(({name:a,root:b})=>{if(!a)return(0,_cliSharedUtils.warn)("\u5206\u5305\u914D\u7F6E\u4E2Dname\u4E3A\u7A7A\u7684\u5206\u5305\uFF0C\u5DF2\u7ECF\u88AB\u8FC7\u6EE4\uFF01"),!1;if(!b)return(0,_cliSharedUtils.warn)(`分包配置中name=${a}的分包，root不存在，已经被过滤！`),!1;// 检查 root 值对应的目录是否存在
const c=_path.default.join(paths.SRC,b);return _cliSharedUtils.fs.existsSync(c)?!_cliSharedUtils.fs.statSync(c).isDirectory()||_cliSharedUtils.fs.existsSync(_path.default.join(c,constanst.ENTRY))||((0,_cliSharedUtils.warn)(`分包配置name=${a}的分包，在${c}目录下不存在${constanst.ENTRY}，已经被过滤！`),!1):((0,_cliSharedUtils.warn)(`分包配置name=${a}的分包，在${paths.SRC}目录下不存在${c}，已经被过滤！`),!1)})}
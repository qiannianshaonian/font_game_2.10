"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_freeze=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/freeze"));/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file at
 * https://github.com/facebook/create-react-app/blob/master/LICENSE
 */const open=require("open"),execa=require("execa"),chalk=require("chalk"),execSync=require("child_process").execSync,OSX_CHROME="google chrome",Actions=(0,_freeze.default)({NONE:0,BROWSER:1,SCRIPT:2});function getBrowserEnv(){// Attempt to honor this environment variable.
// It is specific to the operating system.
// See https://github.com/sindresorhus/open#app for documentation.
const a=process.env.BROWSER;let b;return b=a?a.toLowerCase().endsWith(".js")?Actions.SCRIPT:"none"===a.toLowerCase()?Actions.NONE:Actions.BROWSER:Actions.BROWSER,{action:b,value:a}}function executeNodeScript(a,b){const c=process.argv.slice(2),d=execa("node",[a,...c,b],{stdio:"inherit"});return d.on("close",b=>{0!==b&&(console.log(),console.log(chalk.red("The script specified as BROWSER environment variable failed.")),console.log(chalk.cyan(a)+" exited with code "+b+"."),console.log())}),!0}function startBrowserProcess(a,b){// If we're on OS X, the user hasn't specifically
// requested a different browser, we can try opening
// Chrome with AppleScript. This lets us reuse an
// existing tab when possible instead of creating a new one.
const c="darwin"===process.platform&&("string"!=typeof a||a===OSX_CHROME);if(c)try{return execSync("ps cax | grep \"Google Chrome\""),execSync("osascript openChrome.applescript \""+encodeURI(b)+"\"",{cwd:__dirname,stdio:"ignore"}),!0}catch(a){// Ignore errors.
}// Another special case: on OS X, check if BROWSER has been set to "open".
// In this case, instead of passing the string `open` to `open` function (which won't work),
// just ignore it (thus ensuring the intended behavior, i.e. opening the system browser):
// https://github.com/facebook/create-react-app/pull/1690#issuecomment-283518768
"darwin"===process.platform&&"open"===a&&(a=void 0);// Fallback to open
// (It will always open new tab)
try{var d={app:a,url:!0};// Prevent `unhandledRejection` error.
return open(b,d).catch(()=>{}),!0}catch(a){return!1}}/**
 * Reads the BROWSER environment variable and decides what to do with it. Returns
 * true if it opened a browser or ran a node.js script, otherwise false.
 */exports.openBrowser=function(a){const{action:b,value:c}=getBrowserEnv();switch(b){case Actions.NONE:// Special case: BROWSER="none" will prevent opening completely.
return!1;case Actions.SCRIPT:return executeNodeScript(c,a);case Actions.BROWSER:return startBrowserProcess(c,a);default:throw new Error("Not implemented.");}};
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_Object$defineProperty=require("@babel/runtime-corejs2/core-js/object/define-property");_Object$defineProperty(exports,"__esModule",{value:!0}),exports.getRecords=getRecords,exports.getProjectClients=getProjectClients,exports.recordClient=recordClient,exports.getRecordClient=getRecordClient,exports.clearProjectRecord=clearProjectRecord,exports.removeClientBySn=removeClientBySn,exports.mkdirsSync=mkdirsSync,exports.getIPv4IPAddress=getIPv4IPAddress,exports.ipConvert=ipConvert,exports.getClientFromRequest=getClientFromRequest,exports.getDebugInfoFromRequest=getDebugInfoFromRequest,exports.LINK_MODE=exports.clientRecordPath=exports.CLIENT_PORT=void 0;var _stringify=_interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify")),_os=_interopRequireDefault(require("os")),_fs=_interopRequireDefault(require("fs")),_path=_interopRequireDefault(require("path")),_ipaddr=_interopRequireDefault(require("ipaddr.js")),_cliSharedUtils=require("@vivo-minigame/cli-shared-utils");/**
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */const home=require("os").homedir(),CLIENT_PORT=39517;exports.CLIENT_PORT=CLIENT_PORT;const clientRecordPath=_path.default.join(home,"quickgame-toolkit-client-records.json");exports.clientRecordPath=clientRecordPath;const LINK_MODE={NULL:0,WIFI:1,ADB:2/**
 * 读取记录文件
 * @param {String} clientRecordPath - 记录文件的地址
 * @returns {Object} - 记录的全部设备信息
 */};exports.LINK_MODE=LINK_MODE;function getRecords(a){let b={records:{}};try{b=JSON.parse(_fs.default.readFileSync(a).toString())}catch(a){console.error(`读取client.json文件出错: ${a.message}`)}return b}/**
 * 将设备记录写入记录文件
 * @param {String} clientRecordPath - 记录文件的地址
 * @param {Object} recordData - 要写入的全部设备记录
 */function writeRecords(a,b){_fs.default.writeFileSync(a,(0,_stringify.default)(b,null,2))}/**
 * 读取一个项目的设备记录
 * @param {Object} recordData - 全部设备信息
 * @returns {Array} - 设备记录
 */function getProjectClients(a){let b=a.records;b=b instanceof Object?b:{};const c=b[_cliSharedUtils.projectPath];return c&&c instanceof Array?c:[]}/**
 * 保存设备记录
 * @param {String} clientRecordPath - 记录文件的地址
 * @param {String} newClient - 新的设备记录
 * @param {callback} logHook - log信息的钩子，参数为要打印的信息
 */function recordClient(a,b,c){const d=_path.default.dirname(a);let e;if(mkdirsSync(d),_fs.default.existsSync(a)){e=getRecords(a);let d=getProjectClients(e);// 保留最后的4条记录，最多记录5条
for(c&&c(`writeClientLogFile(): before: ${(0,_stringify.default)(e.records)}`),d=d.filter(a=>a.ip!==b.ip||a.port!==b.port);4<d.length;)d.shift();e.records[_cliSharedUtils.projectPath]=d}else e={records:{}},e.records[_cliSharedUtils.projectPath]=[];// 写入文件
e.records[_cliSharedUtils.projectPath].push(b),writeRecords(a,e),c&&c(`writeClientLogFile(): after: ${(0,_stringify.default)(e.records)}`)}/**
 * 根据设备sn和ip获取设备的记录
 * @param {String} clientRecordPath - 记录文件地址
 * @param {String} sn - 设备序列号
 * @param {String} ip
 * @returns {Object} - 匹配的设备记录
 */function getRecordClient(a,b,c){if(_fs.default.existsSync(a)){const d=getRecords(a),e=getProjectClients(d);return e.find(a=>a.sn===b&&a.ip===c&&a.port)}}/**
 * 清除一个项目的设备记录
 * @param {String} clientRecordPath
 */function clearProjectRecord(a){if(_fs.default.existsSync(a)){const b=getRecords(a);b.records[_cliSharedUtils.projectPath]=[],writeRecords(a,b),console.info("### App Server ### \u6E05\u7A7A\u8C03\u8BD5\u8BBE\u5907\u8BB0\u5F55")}else console.info("### App Server ### \u6CA1\u6709\u9700\u8981\u6E05\u7A7A\u7684\u8C03\u8BD5\u8BBE\u5907\u8BB0\u5F55")}/**
 * 从端口映射记录文件中移除项目的一个设备记录
 * @param {String} clientRecordPath - 记录文件的地址
 * @param {String} sn - 设备序列号
 * @param {callback} logHook - log信息的钩子，参数为要打印的信息
 */function removeClientBySn(a,b,c){if(_fs.default.existsSync(a)){const d=getRecords(a),e=d.records,f=getProjectClients(d);c&&c(`_removeItemFromClientLogFile(): before: ${(0,_stringify.default)(e)}`),e[_cliSharedUtils.projectPath]=f.filter(a=>a.sn!==b),writeRecords(a,d),c&&c(`_removeItemFromClientLogFile(): after: ${(0,_stringify.default)(e)}`)}}/**
 * 创建任意深度的路径的文件夹
 * @param dirname
 * @returns {boolean}
 */function mkdirsSync(a){if(_fs.default.existsSync(a))return!0;return mkdirsSync(_path.default.dirname(a))?(_fs.default.mkdirSync(a),!0):void 0}/**
 * 获取服务器端的IP
 */function getIPv4IPAddress(){const a=_os.default.networkInterfaces();let b;for(const c in a)if(Object.prototype.hasOwnProperty.call(a,c)){const d=a[c];if(d.every(a=>!!("IPv4"!==a.family||a.internal||"127.0.0.1"===a.address)||(b=a,!1)),void 0!==b)break}return b&&b.address}// ipv6地址转ipv4
function ipConvert(a){if(_ipaddr.default.IPv6.isValid(a)){var b=_ipaddr.default.IPv6.parse(a);if(b.isIPv4MappedAddress())return b.toIPv4Address().toString()}return a}/**
 * 冗余方法，获取客户端的请求信息
 * @param request
 * @returns {{clientIp: (any|*|string), sn, linkMode}}
 */function getClientFromRequest(a){const b=ipConvert(a.ip),c=getIPv4IPAddress(),d=a.header["device-serial-number"];let e=LINK_MODE.NULL;return"127.0.0.1"===b&&d?e=LINK_MODE.ADB:"127.0.0.1"!==b&&b!==c&&(e=LINK_MODE.WIFI),{clientIp:b,sn:d,linkMode:e,serverIp:c}}/**
 * 获取请求信息
 * @param request
 * @returns {{sn, linkMode, ws, application, devicePort}}
 */function getDebugInfoFromRequest(a){const{sn:b,linkMode:c,serverIp:d}=getClientFromRequest(a),{ws:e,application:f}=a.body,g=e.split(":")[1].split("/")[0];return{sn:b,linkMode:c,ws:e,application:f,devicePort:g,serverIp:d}}
"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_Object$defineProperty=require("@babel/runtime-corejs2/core-js/object/define-property");_Object$defineProperty(exports,"__esModule",{value:!0}),exports.requiredVersion=exports.isLinux=exports.isMacintosh=exports.isWindows=exports.hasProjectPnpm=exports.hasPnpm3OrLater=exports.hasProjectGit=exports.hasGit=exports.hasProjectYarn=exports.hasYarn=void 0;var _child_process=require("child_process"),_fsExtra=_interopRequireDefault(require("fs-extra")),_path=_interopRequireDefault(require("path")),_lruCache=_interopRequireDefault(require("lru-cache")),_semver=_interopRequireDefault(require("semver"));let _hasYarn;const _yarnProjects=new _lruCache.default({max:10,maxAge:1e3});let _hasGit;const _gitProjects=new _lruCache.default({max:10,maxAge:1e3}),hasYarn=()=>{if(null!=_hasYarn)return _hasYarn;try{return(0,_child_process.execSync)("yarnpkg --version",{stdio:"ignore"}),_hasYarn=!0}catch(a){return _hasYarn=!1}};// env detection
exports.hasYarn=hasYarn;const hasProjectYarn=a=>{if(_yarnProjects.has(a))return checkYarn(_yarnProjects.get(a));const b=_path.default.join(a,"yarn.lock"),c=_fsExtra.default.existsSync(b);return _yarnProjects.set(a,c),checkYarn(c)};exports.hasProjectYarn=hasProjectYarn;function checkYarn(a){if(a&&!hasYarn())throw new Error(`The project seems to require yarn but it's not installed.`);return a}const hasGit=()=>{if(null!=_hasGit)return _hasGit;try{return(0,_child_process.execSync)("git --version",{stdio:"ignore"}),_hasGit=!0}catch(a){return _hasGit=!1}};exports.hasGit=hasGit;const hasProjectGit=a=>{if(_gitProjects.has(a))return _gitProjects.get(a);let b;try{(0,_child_process.execSync)("git status",{stdio:"ignore",cwd:a}),b=!0}catch(a){b=!1}return _gitProjects.set(a,b),b};exports.hasProjectGit=hasProjectGit;let _hasPnpm,_hasPnpm3orLater;const _pnpmProjects=new _lruCache.default({max:10,maxAge:1e3}),hasPnpm3OrLater=()=>{if(null!=_hasPnpm3orLater)return _hasPnpm3orLater;try{const a=(0,_child_process.execSync)("pnpm --version",{stdio:["pipe","pipe","ignore"]}).toString();// there's a critical bug in pnpm 2
// https://github.com/pnpm/pnpm/issues/1678#issuecomment-469981972
// so we only support pnpm >= 3.0.0
return _hasPnpm=!0,_hasPnpm3orLater=_semver.default.gte(a,"3.0.0"),_hasPnpm3orLater}catch(a){return _hasPnpm3orLater=!1}};exports.hasPnpm3OrLater=hasPnpm3OrLater;const hasProjectPnpm=a=>{if(_pnpmProjects.has(a))return checkPnpm(_pnpmProjects.get(a));const b=_path.default.join(a,"pnpm-lock.yaml"),c=_fsExtra.default.existsSync(b);return _pnpmProjects.set(a,c),checkPnpm(c)};exports.hasProjectPnpm=hasProjectPnpm;function checkPnpm(a){if(a&&!exports.hasPnpm3OrLater())throw new Error(`The project seems to require pnpm${_hasPnpm?" >= 3":""} but it's not installed.`);return a}// OS
const isWindows="win32"===process.platform;exports.isWindows=isWindows;const isMacintosh="darwin"===process.platform;exports.isMacintosh=isMacintosh;const isLinux="linux"===process.platform;// 依赖的node版本可能会全局使用，提到shared模块
exports.isLinux=isLinux;const requiredVersion=require("../../package.json").engines.node;exports.requiredVersion=requiredVersion;
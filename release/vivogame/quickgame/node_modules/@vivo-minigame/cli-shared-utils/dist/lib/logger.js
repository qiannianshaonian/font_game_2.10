"use strict";var _interopRequireDefault=require("@babel/runtime-corejs2/helpers/interopRequireDefault"),_Object$defineProperty=require("@babel/runtime-corejs2/core-js/object/define-property");_Object$defineProperty(exports,"__esModule",{value:!0}),exports.clearConsole=exports.error=exports.warn=exports.done=exports.info=exports.log=exports.events=exports.colorconsole=void 0;var _chalk=_interopRequireDefault(require("chalk")),_readline=_interopRequireDefault(require("readline")),_stringPrototype=_interopRequireDefault(require("string.prototype.padstart")),_events=_interopRequireDefault(require("events"));// import { Console } from 'console'
/**
 * 带颜色的 info, log, warn, error, trace 的打印日志输出流
 */const colorconsole={writable:null,init(a){this.writable=a}};exports.colorconsole=colorconsole;const events=new _events.default;/**
 * 日志操作，通过事件总线分发，目前未使用
 * @param {String} type  info|warn|error|done
 * @param {String} tag 标签
 * @param {String} message 要打印出来的消息
 */exports.events=events;function _log(a,b,c){c&&events.emit("log",{message:c,type:a,tag:b})}const format=(a,b)=>b.split("\n").map((b,c)=>0===c?`${a} ${b}`:(0,_stringPrototype.default)(b,_chalk.default.reset(a).length)).join("\n"),chalkTag=a=>_chalk.default.bgBlackBright.white.dim(` ${a} `),log=(a="",b=null)=>{b?console.log(format(chalkTag(b),a)):console.log(a),colorconsole.writable&&colorconsole.writable.write(a),_log("log",b,a)};/**
 * Tag标签，使用亮黑色背景，白色字
 * @param {String`} msg Tag标签的格式
 */exports.log=log;/**
 * 常规的info。label为蓝色背景，黑色字体
 * @param {String} msg 要打印的信息
 * @param {String} tag 要打印信息的标签
 */const info=(a,b=null)=>{console.log(format(_chalk.default.bgBlue.black(" INFO ")+(b?chalkTag(b):""),a)),colorconsole.writable&&colorconsole.writable.write(`[INFO] ${a}`),_log("info",b,a)};/**
 * 常规的done。label为绿色背景，黑色字体
 * @param {String} msg 要打印的信息
 * @param {String} msg 要打印的信息
 * @param {String} tag 要打印信息的标签
 */exports.info=info;const done=(a,b=null)=>{console.log(format(_chalk.default.bgGreen.black(" DONE ")+(b?chalkTag(b):""),a)),colorconsole.writable&&colorconsole.writable.write(`[DONE] ${a}`),_log("done",b,a)};/**
 * 警告。label为黄色色背景，黑色字体  msg颜色为黄色
 * @param {String} msg 要打印的信息
 * @param {String} tag 要打印信息的标签
 */exports.done=done;const warn=(a,b=null)=>{console.warn(format(_chalk.default.bgYellow.black(" WARN ")+(b?chalkTag(b):""),_chalk.default.yellow(a))),colorconsole.writable&&colorconsole.writable.write(`[WARN] ${a}`),_log("warn",b,a)};/**
 * 错误。label为红色背景，黑色字体  msg颜色为红色
 * @param {String} msg 要打印的信息
 * @param {String} tag 要打印信息的标签
 */exports.warn=warn;const error=(a,b=null)=>{console.error(format(_chalk.default.bgRed(" ERROR ")+(b?chalkTag(b):""),_chalk.default.red(a))),colorconsole.writable&&colorconsole.writable.write(`[ERROR] ${a}`),_log("error",b,a),a instanceof Error&&_log("error",b,a.stack)};/**
 * 清楚控制台的信息
 * @param {String} title [可选] 清除控制台后的提示
 */exports.error=error;const clearConsole=a=>{if(process.stdout.isTTY){const b="\n".repeat(process.stdout.rows);console.log(b),_readline.default.cursorTo(process.stdout,0,0),_readline.default.clearScreenDown(process.stdout),a&&console.log(a)}};exports.clearConsole=clearConsole;
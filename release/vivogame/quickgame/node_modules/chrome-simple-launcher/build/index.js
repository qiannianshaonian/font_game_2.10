"use strict";
const child_process_1 = require("child_process");
const fs = require("fs");
const path = require("path");
const sniffer_linux_1 = require("./sniffer-linux");
const sniffer_mac_1 = require("./sniffer-mac");
const sniffer_windows_1 = require("./sniffer-windows");
const lookupMap = {
    win32: sniffer_windows_1.default,
    darwin: sniffer_mac_1.default,
    linux: sniffer_linux_1.default,
};
let chromeArgs = ['--enable-devtools-experiments', '--no-first-run'];
function launch(url, options = {}) {
    setupUserProfileArg();
    return new Promise((resolve, reject) => {
        lookupForChromePath(options).then(chromeBinaryPath => {
            const chromeProcess = launchChrome(chromeBinaryPath, url, options);
            resolve(chromeProcess);
        }, err => {
            reject(err);
        });
    });
}
function lookupForChromePath(options) {
    return new Promise((resolve, reject) => {
        let chromePath = options.chromePath;
        if (chromePath) {
            try {
                chromePath = path.resolve(chromePath);
                fs.accessSync(chromePath);
                return resolve(chromePath);
            }
            catch (err) {
                return reject(err);
            }
        }
        else {
            const lookupMethod = lookupMap[process.platform];
            lookupMethod().then(value => {
                return resolve(value);
            });
        }
    });
}
function setupUserProfileArg() {
    chromeArgs = chromeArgs.concat([
        `--user-data-dir=${path.resolve(__dirname, '.devProfile')}`,
    ]);
}
function launchChrome(filePath, url, options) {
    let child;
    const argsUrl = chromeArgs.concat([url]);
    try {
        child = child_process_1.spawn(filePath, argsUrl);
    }
    catch (err) {
        onLaunchChromeError(err);
        return err;
    }
    child.on('error', onLaunchChromeError);
    child.on('exit', onChromeExit);
    return child;
    function onLaunchChromeError(err) {
        typeof options.onError === 'function' && options.onError(err);
    }
    function onChromeExit() {
        typeof options.onExit === 'function' && options.onExit();
    }
}
module.exports = { launch };
